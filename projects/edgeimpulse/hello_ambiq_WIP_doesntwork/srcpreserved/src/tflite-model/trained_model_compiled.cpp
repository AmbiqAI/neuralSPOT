/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 25.10.2022 22:13:14

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 52
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 34592;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[98];
TfLiteEvalTensor tflEvalTensors[98];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[36];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036917892284691334, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data4[3*3*3*1] = { 
  /* [0][0][][] */ -23, 1, 19, 
  /* [0][1][][] */ -127, -77, -9, 
  /* [0][2][][] */ -98, -102, -35, 
  /* [1][0][][] */ 88, 65, -11, 
  /* [1][1][][] */ 127, 119, 2, 
  /* [1][2][][] */ 59, 73, 9, 
  /* [2][0][][] */ -95, -67, -50, 
  /* [2][1][][] */ -127, -101, -45, 
  /* [2][2][][] */ -88, -61, 37, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 3,3,3,1 } };
const TfArray<3, float> quant4_scale = { 3, { 0.0056584211997687817, 0.0043482193723320961, 0.0051304679363965988, } };
const TfArray<3, int> quant4_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[3] = { 2588, 468, 13404, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const TfArray<3, float> quant5_scale = { 3, { 2.0889698134851642e-05, 1.6052708815550432e-05, 1.8940605514217168e-05, } };
const TfArray<3, int> quant5_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[1*3*3*3] = { 
  /* [0][0][][] */ 30,26,-10, 100,8,24, 24,-2,24, 
  /* [0][1][][] */ 69,104,95, 127,127,61, 51,24,19, 
  /* [0][2][][] */ 37,59,-2, 123,101,127, 45,55,27, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant6_scale = { 3, { 0.071871392428874969, 0.0043350076302886009, 0.015974599868059158, } };
const TfArray<3, int> quant6_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 3 };
const ALIGN(8) int32_t tensor_data7[3] = { -2392, 2997, -4021, };
const TfArray<1, int> tensor_dimension7 = { 1, { 3 } };
const TfArray<3, float> quant7_scale = { 3, { 0.0005814063479192555, 3.5068209399469197e-05, 0.00012922713358420879, } };
const TfArray<3, int> quant7_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[6*1*1*3] = { 
  /* [0][0][][] */ 37,-127,31, 
  /* [1][0][][] */ 127,-1,-32, 
  /* [2][0][][] */ -29,127,-67, 
  /* [3][0][][] */ -20,127,-18, 
  /* [4][0][][] */ -22,127,-16, 
  /* [5][0][][] */ -127,60,8, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant8_scale = { 6, { 0.0074506588280200958, 0.0088284416124224663, 0.0087853632867336273, 0.003728371812030673, 0.0031443361658602953, 0.012509028427302837, } };
const TfArray<6, int> quant8_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[6] = { 6340, -4696, -7810, 635, 6787, -1082, };
const TfArray<1, int> tensor_dimension9 = { 1, { 6 } };
const TfArray<6, float> quant9_scale = { 6, { 0.00012333346239756793, 0.00014614040264859796, 0.00014542730059474707, 6.1717088101431727e-05, 5.2049337682547048e-05, 0.00020706649229396135, } };
const TfArray<6, int> quant9_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*6] = { 
  /* [0][0][][] */ 22,-120,3,68,-55,-66, 15,-127,127,127,16,-9, 0,-7,85,-29,18,-8, 
  /* [0][1][][] */ -127,15,121,-45,-67,127, -50,-5,-105,2,-112,105, 13,3,-110,1,-42,-17, 
  /* [0][2][][] */ -20,109,56,-44,127,12, 18,106,-69,-69,100,-33, 36,23,0,2,17,-31, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant10_scale = { 6, { 0.0081350179389119148, 0.043776348233222961, 0.0078351059928536415, 0.025916775688529015, 0.05129149928689003, 0.015797967091202736, } };
const TfArray<6, int> quant10_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[6] = { 15061, 2299, -2633, 5008, -74, -2030, };
const TfArray<1, int> tensor_dimension11 = { 1, { 6 } };
const TfArray<6, float> quant11_scale = { 6, { 0.00011401361552998424, 0.00061353272758424282, 0.00010981029481627047, 0.00036322785308584571, 0.00071885879151523113, 0.00022141110093798488, } };
const TfArray<6, int> quant11_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[12*1*1*6] = { 
  /* [0][0][][] */ -127,5,-1,-32,-51,-91, 
  /* [1][0][][] */ -23,34,85,127,69,-87, 
  /* [2][0][][] */ 23,127,-55,1,22,-9, 
  /* [3][0][][] */ 122,2,44,46,19,127, 
  /* [4][0][][] */ 52,-80,19,-127,54,44, 
  /* [5][0][][] */ 127,6,-52,64,63,112, 
  /* [6][0][][] */ -94,-24,-95,-66,127,-51, 
  /* [7][0][][] */ -52,26,-63,77,127,21, 
  /* [8][0][][] */ -93,-7,-88,127,43,106, 
  /* [9][0][][] */ 120,-1,25,27,70,127, 
  /* [10][0][][] */ 3,-49,-5,-127,23,5, 
  /* [11][0][][] */ 118,-9,6,-52,-19,127, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant12_scale = { 12, { 0.0042025488801300526, 0.012453609146177769, 0.038004364818334579, 0.0025515276938676834, 0.0028533677104860544, 0.0036912770010530949, 0.0012616763124242425, 0.011187979020178318, 0.0094100283458828926, 0.0032285933848470449, 0.0039089643396437168, 0.00080463004997000098, } };
const TfArray<12, int> quant12_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[12] = { 21033, -11900, -8582, -5448, 18470, -10536, 39056, -7087, -8090, -6133, 20627, 43936, };
const TfArray<1, int> tensor_dimension13 = { 1, { 12 } };
const TfArray<12, float> quant13_scale = { 12, { 9.888350177789107e-05, 0.00029302609618753195, 0.00089422037126496434, 6.0035945352865383e-05, 6.7138062149751931e-05, 8.6853578977752477e-05, 2.9686501875403337e-05, 0.00026324656209908426, 0.00022141243971418589, 7.5966905569657683e-05, 9.1975634859409183e-05, 1.8932472812593915e-05, } };
const TfArray<12, int> quant13_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[1*3*3*12] = { 
  /* [0][0][][] */ -93,51,-70,5,15,10,48,-59,-47,97,10,16, -127,127,-127,-24,6,-11,-20,-66,127,127,-127,17, -86,-14,-54,-23,-17,-67,-9,-29,-4,-31,-6,-3, 
  /* [0][1][][] */ 33,35,-60,11,46,40,-127,-97,16,8,-2,-55, 93,102,-7,-70,45,127,-44,-80,-33,-29,-94,-110, 23,46,-2,63,-43,42,-84,-127,55,-6,-35,-60, 
  /* [0][2][][] */ 74,7,-16,-53,-127,-56,72,-3,-3,-71,-58,32, 87,-50,13,127,125,-81,45,-85,-76,-60,-7,127, 62,-62,2,-28,16,43,96,0,-51,7,-30,28, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant14_scale = { 12, { 0.0078273247927427292, 0.0063018845394253731, 0.0054875635541975498, 0.044851165264844894, 0.020898891612887383, 0.024608002975583076, 0.016329046338796616, 0.0039328606799244881, 0.016410542652010918, 0.017585115507245064, 0.012602664530277252, 0.037462741136550903, } };
const TfArray<12, int> quant14_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 3 };
const ALIGN(16) int32_t tensor_data15[12] = { 1577, 1570, 2610, -60, -2505, -1768, 1766, 6239, -10, 191, 11923, 201, };
const TfArray<1, int> tensor_dimension15 = { 1, { 12 } };
const TfArray<12, float> quant15_scale = { 12, { 0.00018417235696688294, 0.00014827963605057448, 0.00012911914382129908, 0.0010553215397521853, 0.00049173861043527722, 0.00057901185937225819, 0.00038421284989453852, 9.2537899035960436e-05, 0.00038613041397184134, 0.00041376744047738612, 0.0002965332823805511, 0.00088147626956924796, } };
const TfArray<12, int> quant15_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[12*1*1*12] = { 
  /* [0][0][][] */ 24,24,9,10,-33,38,70,-39,46,-9,-11,127, 
  /* [1][0][][] */ -55,-11,-76,-8,-34,-77,89,101,-25,127,53,40, 
  /* [2][0][][] */ -32,19,-8,53,116,91,-88,-104,-38,127,-69,101, 
  /* [3][0][][] */ -75,21,-11,127,-19,30,-11,26,30,43,29,-20, 
  /* [4][0][][] */ -37,57,-35,-59,27,18,-22,-18,69,127,94,-8, 
  /* [5][0][][] */ 127,68,11,-16,-47,-55,15,-4,79,76,69,-95, 
  /* [6][0][][] */ 117,45,127,7,-116,-50,-44,18,-11,104,-35,-8, 
  /* [7][0][][] */ -102,-56,53,11,100,91,-26,-52,-127,-9,-99,98, 
  /* [8][0][][] */ 42,-22,-127,5,64,-53,8,28,65,-51,39,13, 
  /* [9][0][][] */ -5,-40,63,127,-89,-1,-15,-37,-8,-49,-50,72, 
  /* [10][0][][] */ 127,91,-10,-52,17,-15,70,-62,37,41,25,-27, 
  /* [11][0][][] */ 64,23,1,-7,-56,-24,41,45,77,-26,127,-69, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant16_scale = { 12, { 0.0083563793450593948, 0.0029576632659882307, 0.0031342967413365841, 0.0027995775453746319, 0.00087716733105480671, 0.0060166907496750355, 0.0089262081310153008, 0.0056678871624171734, 0.0094008408486843109, 0.0052504870109260082, 0.0081563619896769524, 0.0070816758088767529, } };
const TfArray<12, int> quant16_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[12] = { -1195, 193, 8416, 6622, 31455, -6669, -5358, 7213, -690, 748, -6139, -6664, };
const TfArray<1, int> tensor_dimension17 = { 1, { 12 } };
const TfArray<12, float> quant17_scale = { 12, { 0.00019662069098558277, 6.9592075305990875e-05, 7.3748160502873361e-05, 6.5872416598722339e-05, 2.0639232388930395e-05, 0.00014156919496599585, 0.00021002843277528882, 0.00013336206029634923, 0.00022119625646155328, 0.00012354087084531784, 0.00019191439787391573, 0.00016662766574881971, } };
const TfArray<12, int> quant17_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*12] = { 
  /* [0][0][][] */ 48,24,48,-81,94,127,-24,69,-40,-36,-95,53, 76,-36,-68,-79,19,61,-59,71,-84,45,-90,93, 30,55,18,-20,-2,45,3,16,-59,67,-16,33, 
  /* [0][1][][] */ 68,9,127,-127,127,74,-111,120,-86,22,-94,76, 127,2,-102,-122,41,-15,-91,127,-127,123,-127,127, 44,127,-4,-21,-5,20,-69,39,-84,127,-35,48, 
  /* [0][2][][] */ 31,-13,88,-62,74,28,-127,83,-83,59,-25,23, 63,20,-45,-44,30,-61,-44,94,-68,120,-107,53, 15,98,-23,7,5,-21,-40,45,-19,82,-36,15, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant18_scale = { 12, { 0.0044659827835857868, 0.0075925658456981182, 0.0057778358459472656, 0.0049371835775673389, 0.019623808562755585, 0.0030919935088604689, 0.0023745361249893904, 0.0032698356080800295, 0.0037172066513448954, 0.0051387217827141285, 0.0019727554172277451, 0.0029662430752068758, } };
const TfArray<12, int> quant18_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[12] = { -761, 723, 6697, 32946, -9306, -3475, 16681, 168, 7908, 497, 22834, -269, };
const TfArray<1, int> tensor_dimension19 = { 1, { 12 } };
const TfArray<12, float> quant19_scale = { 12, { 0.00010508194827707484, 0.0001786486100172624, 0.00013594908523373306, 0.00011616903066169471, 0.00046173669397830963, 7.2752787673380226e-05, 5.5871438235044479e-05, 7.6937307312618941e-05, 8.74636898515746e-05, 0.00012091109965695068, 4.6417775592999533e-05, 6.9793954025954008e-05, } };
const TfArray<12, int> quant19_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[25*1*1*12] = { 
  /* [0][0][][] */ -7,4,13,-43,-78,-5,46,127,-11,58,55,-63, 
  /* [1][0][][] */ -59,-48,-51,1,90,-21,-63,124,-127,-96,26,0, 
  /* [2][0][][] */ 127,29,50,103,26,1,10,77,10,52,-14,-67, 
  /* [3][0][][] */ 0,-127,-21,29,33,44,5,-21,-48,-91,-49,32, 
  /* [4][0][][] */ -18,23,63,-23,-101,-10,-48,127,34,47,-7,-35, 
  /* [5][0][][] */ -52,-54,-23,66,66,25,-49,-14,-56,-19,-61,127, 
  /* [6][0][][] */ 45,77,-12,-127,-3,-24,-27,105,-12,-18,-44,-51, 
  /* [7][0][][] */ -9,-40,127,79,83,-7,-36,97,-55,-18,8,-49, 
  /* [8][0][][] */ 11,7,-29,15,127,-31,-52,32,-22,-11,-50,-16, 
  /* [9][0][][] */ 52,-6,23,-47,41,0,19,-55,47,108,-127,-74, 
  /* [10][0][][] */ 73,41,-66,-95,-12,6,-55,127,-45,65,57,-93, 
  /* [11][0][][] */ -28,20,4,-47,-45,4,24,-79,35,127,9,27, 
  /* [12][0][][] */ -67,33,-13,-64,-14,-82,127,-35,-51,75,41,-9, 
  /* [13][0][][] */ 7,127,-5,75,21,20,-24,36,97,-4,50,17, 
  /* [14][0][][] */ -118,-44,6,-8,-79,-97,49,-17,57,16,127,22, 
  /* [15][0][][] */ 10,12,5,-120,-127,-9,42,-20,0,1,-46,92, 
  /* [16][0][][] */ 105,84,-48,38,11,-21,-63,127,1,68,5,-102, 
  /* [17][0][][] */ 4,56,45,-36,-44,-10,23,-48,0,-22,-40,127, 
  /* [18][0][][] */ 48,94,-19,-10,-26,-110,-44,-88,-6,-7,-74,127, 
  /* [19][0][][] */ 127,-48,-18,-76,40,-46,-1,80,-25,-78,-84,-77, 
  /* [20][0][][] */ 44,71,-35,15,127,-14,-54,6,-60,59,-29,79, 
  /* [21][0][][] */ 19,-12,127,-9,-40,17,-14,-22,-2,2,43,-9, 
  /* [22][0][][] */ 0,1,-44,-73,-60,98,26,-127,23,-39,63,-68, 
  /* [23][0][][] */ 127,117,4,120,-105,21,1,-1,-22,55,-44,103, 
  /* [24][0][][] */ 34,114,-15,-105,-12,5,67,127,32,78,-33,-24, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant20_scale = { 25, { 0.0011554922675713897, 0.0054777609184384346, 0.0038150087930262089, 0.0014297235757112503, 0.0061737718060612679, 0.0060083810240030289, 0.0035905411932617426, 0.0094764037057757378, 0.004869803786277771, 0.0016494981246069074, 0.0029792501591145992, 0.0023982776328921318, 0.0034766776952892542, 0.0037511102855205536, 0.00065079465275630355, 0.0047153877094388008, 0.0035425715614110231, 0.0035830081906169653, 0.004452994093298912, 0.0019295704551041126, 0.0019368459470570087, 0.0023025339469313622, 0.0099821751937270164, 0.0027831734623759985, 0.002119164215400815, } };
const TfArray<25, int> quant20_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[25] = { 28365, 4277, -11877, 24892, 4754, -1438, 20659, -13458, 1015, 25425, 13804, 17474, 10982, -9167, 54139, 20369, -1992, 8939, 7164, 23917, 6427, 8966, 12013, -3716, 15238, };
const TfArray<1, int> tensor_dimension21 = { 1, { 25 } };
const TfArray<25, float> quant21_scale = { 25, { 2.7188054446014576e-05, 0.00012888849596492946, 8.9764915173873305e-05, 3.3640553738223389e-05, 0.00014526522136293352, 0.00014137367543298751, 8.4483326645568013e-05, 0.00022297420946415514, 0.00011458362132543698, 3.8811722333775833e-05, 7.0100002631079406e-05, 5.643006443278864e-05, 8.1804180808831006e-05, 8.8261418568436056e-05, 1.5312814866774715e-05, 0.00011095029913121834, 8.3354629168752581e-05, 8.4306077042128891e-05, 0.0001047763362294063, 4.5401659008348361e-05, 4.5572847739094868e-05, 5.4177271522348747e-05, 0.00023487472208216786, 6.5486434323247522e-05, 4.9862686864798889e-05, } };
const TfArray<25, int> quant21_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*25] = { 
  /* [0][0][][] */ 71,-9,-61,-127,80,-18,40,27,-92,40,-127,-118,-127,-8,53,13,-9,74,82,127,66,-25,6,-24,16, 105,-43,-78,70,-92,-127,-40,-43,127,-48,-55,11,-97,-127,51,47,127,-73,127,7,77,9,22,-47,7, -127,-8,-4,-1,14,34,4,43,-24,-27,-38,71,16,8,8,-29,4,-53,-50,21,19,39,40,15,16, 
  /* [0][1][][] */ -93,-7,-127,70,-49,-95,127,4,95,73,83,-78,-14,47,-63,-47,58,18,13,18,-127,-65,-13,127,51, -44,8,-18,30,127,-57,-27,-7,-93,127,88,127,-42,89,-127,14,-10,-13,50,47,70,127,-127,-65,-79, 82,-8,34,6,24,-49,2,127,12,-28,72,-94,-24,-7,26,21,-72,-39,-42,-26,-54,24,-25,-31,-127, 
  /* [0][2][][] */ 10,18,-14,30,-81,-22,-51,-40,35,4,38,106,-92,-1,-4,127,-5,-96,23,11,-49,-3,18,28,32, -32,127,65,-32,118,-109,10,-15,-29,41,-39,62,-50,71,27,38,-39,127,34,5,11,62,-21,-41,73, -10,40,-22,3,3,29,-11,18,-5,-61,28,-51,8,3,-29,16,26,42,-8,-6,14,-19,10,2,-2, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant22_scale = { 25, { 0.024344412609934807, 0.012468380853533745, 0.010429027490317822, 0.040497314184904099, 0.0059574777260422707, 0.0053778928704559803, 0.016722943633794785, 0.0064535746350884438, 0.015956711024045944, 0.016892869025468826, 0.0082841375842690468, 0.014433159492909908, 0.0092261964455246925, 0.01198531873524189, 0.047371529042720795, 0.011266828514635563, 0.01030993927270174, 0.014234606176614761, 0.0071031921543180943, 0.020232448354363441, 0.015613971278071404, 0.020956732332706451, 0.006785491481423378, 0.011173185892403126, 0.014967643655836582, } };
const TfArray<25, int> quant22_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[25] = { 759, -2544, 5402, -1998, -3003, 8757, 842, 184, -360, -2873, 103, 996, 9852, -855, 2201, -1396, 1136, 518, -2897, -3175, -382, -3889, 7541, 6110, 184, };
const TfArray<1, int> tensor_dimension23 = { 1, { 25 } };
const TfArray<25, float> quant23_scale = { 25, { 0.00057280971668660641, 0.00029337368323467672, 0.00024538888828828931, 0.00095287797739729285, 0.00014017595094628632, 0.00012653865269385278, 0.00039348102291114628, 0.00015184881340246648, 0.000375452043954283, 0.0003974792780354619, 0.00019492088176775724, 0.00033960375003516674, 0.00021708698477596045, 0.00028200750239193439, 0.0011146242031827569, 0.00026510184397920966, 0.00024258681514766067, 0.00033493191585876048, 0.00016713394143152982, 0.00047605761210434139, 0.00036738757626153529, 0.00049309962196275592, 0.00015965862257871777, 0.00026289850939065218, 0.00035217986442148685, } };
const TfArray<25, int> quant23_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[25*1*1*25] = { 
  /* [0][0][][] */ 13,81,127,-72,8,107,-21,-51,3,-3,-23,-1,21,-19,0,-50,-127,15,18,-44,5,-100,-52,91,123, 
  /* [1][0][][] */ -71,-33,5,-28,118,6,63,-54,-6,46,46,52,83,-23,70,33,45,1,-59,-127,-55,42,15,10,-32, 
  /* [2][0][][] */ -28,36,-111,-39,-28,-22,-27,23,-7,108,-79,65,-17,-25,64,-9,-48,-65,66,113,-65,127,-3,0,74, 
  /* [3][0][][] */ -11,-28,28,-31,-34,-61,-69,-6,53,-11,61,5,59,60,80,-14,26,-2,-15,-127,119,38,-26,-59,0, 
  /* [4][0][][] */ -29,27,16,-34,30,2,-52,-3,-26,22,-43,38,56,58,-25,21,-44,10,-33,-34,-22,-9,-127,41,107, 
  /* [5][0][][] */ 7,-59,64,11,-1,-11,-127,-31,9,-18,26,63,34,-32,48,-5,35,105,-37,-4,65,-24,73,-48,-67, 
  /* [6][0][][] */ 46,4,26,-45,2,-3,-73,-9,2,-17,2,106,-13,-21,5,39,11,71,17,42,25,-20,67,127,-60, 
  /* [7][0][][] */ 33,-20,35,11,-8,-98,12,19,61,-45,-92,-12,-60,7,122,-95,-102,75,127,42,33,14,-24,18,-26, 
  /* [8][0][][] */ -127,-20,-107,111,12,21,99,8,85,7,95,-78,-15,-62,-12,96,41,-42,-5,-31,-51,28,-72,-120,-62, 
  /* [9][0][][] */ 57,-25,6,49,3,6,106,1,74,42,0,-2,-4,-25,7,-36,13,20,-3,-17,-52,-85,-17,-127,8, 
  /* [10][0][][] */ 23,21,31,-18,-34,1,-56,26,49,24,-24,127,-6,-34,16,-93,-52,31,-24,4,47,-75,2,3,-50, 
  /* [11][0][][] */ -54,22,-45,-17,86,26,-70,-8,-76,9,52,-60,31,-6,-127,23,69,27,-66,-29,28,-33,33,76,58, 
  /* [12][0][][] */ 87,-38,-26,12,35,-48,-78,-28,-20,52,45,-29,17,4,0,-99,127,36,0,59,5,6,12,-19,-29, 
  /* [13][0][][] */ -19,-28,-94,-42,-31,-77,-10,-43,28,-56,5,58,-49,127,127,-13,-16,-93,115,80,109,-3,-73,77,-113, 
  /* [14][0][][] */ -44,-66,-17,-23,-8,-68,127,53,73,-19,15,10,-52,65,29,-6,19,-126,48,-18,-13,-4,-41,21,40, 
  /* [15][0][][] */ -99,-20,-107,-107,-12,54,1,35,22,12,80,127,-16,-11,-9,-15,78,10,-32,79,-14,42,95,41,7, 
  /* [16][0][][] */ 91,48,-65,-1,18,-10,90,40,15,-127,8,8,14,7,38,24,-15,24,-54,-3,-25,31,16,17,20, 
  /* [17][0][][] */ 21,-48,-93,-21,-12,-38,127,49,-7,-21,57,1,17,31,21,25,62,-31,22,11,-13,46,7,19,41, 
  /* [18][0][][] */ -127,-94,12,12,43,58,83,-4,33,-19,104,-48,10,-38,4,50,-28,-76,-5,-42,-12,56,-75,10,-12, 
  /* [19][0][][] */ 23,17,-15,76,-57,-58,33,65,19,127,3,-61,-54,-11,27,-9,-88,2,110,-114,-4,54,-41,50,-1, 
  /* [20][0][][] */ 41,-109,53,-49,53,98,26,-7,-19,60,-39,-12,36,-21,-80,73,-21,-55,2,-127,-87,19,30,37,-56, 
  /* [21][0][][] */ -15,-5,74,35,31,-79,-53,-56,15,55,-10,-46,-8,34,127,-74,65,-60,72,31,122,-62,-63,-28,74, 
  /* [22][0][][] */ 1,-16,27,-127,62,55,-18,69,25,-25,81,63,52,65,42,-28,112,12,41,58,-41,2,61,-75,-35, 
  /* [23][0][][] */ -10,63,13,107,-22,-85,21,16,42,-12,14,2,-113,57,127,-62,46,-16,58,23,90,-28,-50,-10,-24, 
  /* [24][0][][] */ -13,30,-116,15,-33,-16,114,86,-11,22,33,74,-28,13,-77,-37,121,10,-27,-127,-65,-6,15,4,59, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant24_scale = { 25, { 0.0033488236367702484, 0.0054871872998774052, 0.0034796816762536764, 0.0042055272497236729, 0.0046950541436672211, 0.0024207134265452623, 0.0042814849875867367, 0.0050088930875062943, 0.0012547089718282223, 0.0040386645123362541, 0.0039225379005074501, 0.0014984336448833346, 0.0017738929018378258, 0.003166241105645895, 0.0009387003374285996, 0.0013953857123851776, 0.0073612197302281857, 0.0029026095289736986, 0.0012220893986523151, 0.0056369653902947903, 0.00085525313625112176, 0.0014701200416311622, 0.0011248561786487699, 0.0026777207385748625, 0.0026767323724925518, } };
const TfArray<25, int> quant24_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[25] = { 3378, -1971, 1164, 3209, 3102, 2164, -9819, 2455, 32705, 7385, 3370, 18692, 12162, 3737, 32829, 4398, -2201, 973, 24622, 981, 38268, 15965, 9702, 7071, 7978, };
const TfArray<1, int> tensor_dimension25 = { 1, { 25 } };
const TfArray<25, float> quant25_scale = { 25, { 7.8795848821755499e-05, 0.00012911029625684023, 8.1874866737052798e-05, 9.8953583801630884e-05, 0.0001104718612623401, 5.6957964261528105e-05, 0.00010074082820210606, 0.00011785631068050861, 2.9522565455408767e-05, 9.5027404313441366e-05, 9.2295013018883765e-05, 3.5257264244137332e-05, 4.1738658183021471e-05, 7.4499788752291352e-05, 2.2087067918619141e-05, 3.2832605938892812e-05, 0.00017320517508778721, 6.8296692916192114e-05, 2.8755044695571996e-05, 0.00013263447908684611, 2.0123603462707251e-05, 3.4591059375088662e-05, 2.6467205316293985e-05, 6.3005194533616304e-05, 6.2981940573081374e-05, } };
const TfArray<25, int> quant25_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[1*3*3*25] = { 
  /* [0][0][][] */ 27,57,32,40,-6,-48,-30,114,122,42,-26,-127,31,22,46,108,47,83,12,28,-127,-104,127,-108,-124, 2,11,88,-4,16,127,97,48,-105,78,-46,-18,-54,54,67,67,6,62,11,79,-93,44,-87,-39,-127, 21,4,26,3,-34,-45,67,-7,2,-26,-36,-12,-13,117,54,63,-2,-15,14,57,43,125,14,-11,-63, 
  /* [0][1][][] */ -12,127,51,127,45,-44,-68,127,127,41,-96,0,89,6,6,127,127,127,127,43,-122,-57,34,105,120, -8,26,123,-10,77,114,127,77,-90,127,-127,-5,-14,31,-84,-87,64,69,-87,127,-87,-77,-93,127,116, 127,-1,127,-5,73,-83,116,-5,-16,-31,-45,5,-89,127,-127,-3,-2,-33,14,70,69,-127,18,19,78, 
  /* [0][2][][] */ -38,77,26,68,37,-14,-12,54,36,21,-70,20,-27,-3,-37,-7,118,19,127,17,34,106,-34,23,86, -22,7,54,15,66,28,45,28,-2,68,-100,-25,66,13,-87,-86,62,11,-98,66,15,113,28,10,12, 51,-6,113,-3,127,-48,56,3,-10,-5,-29,-11,127,40,-91,-47,31,-20,0,43,60,-8,22,-66,-83, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant26_scale = { 25, { 0.0072532529011368752, 0.0050330553203821182, 0.0031322110444307327, 0.0079260207712650299, 0.0075170225463807583, 0.008471745066344738, 0.0049705947749316692, 0.0034489086829125881, 0.010637383908033371, 0.0079807518050074577, 0.0063954484649002552, 0.019658105447888374, 0.010299534536898136, 0.0046209292486310005, 0.011356617324054241, 0.0081925224512815475, 0.0033052198123186827, 0.0062405755743384361, 0.01406172476708889, 0.0045834202319383621, 0.014806804247200489, 0.008183811791241169, 0.016206393018364906, 0.0069392803125083447, 0.0046360716223716736, } };
const TfArray<25, int> quant26_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 3 };
const ALIGN(16) int32_t tensor_data27[25] = { 96, 1261, -7182, -5823, -998, 1708, -1364, 3168, 1963, 3881, 15538, 5658, -872, 398, 10783, -19, -34, 1311, -1356, -5, 10735, 3969, 291, 5583, 3817, };
const TfArray<1, int> tensor_dimension27 = { 1, { 25 } };
const TfArray<25, float> quant27_scale = { 25, { 0.00017066477448679507, 0.00011842483218060806, 7.3699084168765694e-05, 0.00018649460980668664, 0.00017687112267594784, 0.00019933517614845186, 0.00011695517605403438, 8.115079253911972e-05, 0.00025029139942489564, 0.00018778239609673619, 0.00015048113709781319, 0.00046254365588538349, 0.00024234199372585863, 0.0001087277487386018, 0.00026721452013589442, 0.00019276523380540311, 7.7769880590494722e-05, 0.00014683707559015602, 0.00033086413168348372, 0.00010784518235595897, 0.0003483954060357064, 0.00019256028463132679, 0.00038132691406644881, 0.00016327718913089484, 0.00010908403783105314, } };
const TfArray<25, int> quant27_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[51*1*1*25] = { 
  /* [0][0][][] */ 19,-19,-29,82,-8,12,-5,-17,-38,9,-11,-88,53,48,-39,45,-38,5,7,-30,14,-31,-25,127,36, 
  /* [1][0][][] */ -7,18,30,-9,16,0,-85,-11,15,-34,49,46,127,73,44,-49,-4,103,-33,-25,-26,64,-3,23,-51, 
  /* [2][0][][] */ -4,127,17,-56,-50,37,-64,-12,64,9,-10,1,9,-35,-8,37,44,28,-4,-17,-77,8,-36,-30,45, 
  /* [3][0][][] */ -23,-17,-14,-17,10,-55,-15,10,62,-4,-17,56,50,39,93,-42,-52,22,-7,-49,127,-86,-17,-9,-45, 
  /* [4][0][][] */ 85,-47,16,-32,30,40,-32,-20,14,27,46,-6,1,127,-31,-3,19,7,-56,17,26,-67,-18,34,-27, 
  /* [5][0][][] */ -1,-8,-38,53,44,-23,-37,127,-9,-37,-30,2,25,-12,-9,-19,73,23,5,-25,59,11,-9,-36,-6, 
  /* [6][0][][] */ -38,-61,-4,115,37,10,-33,-27,-18,-14,-73,-38,-1,3,-10,2,-5,-127,-21,1,-57,-19,-43,41,-38, 
  /* [7][0][][] */ 21,3,127,28,-13,76,-34,-11,9,-7,-99,50,44,24,19,14,102,0,-27,-61,-38,-34,35,14,-62, 
  /* [8][0][][] */ 37,-87,84,120,-3,30,-7,-31,-100,-11,-3,119,21,33,-93,-113,-99,19,4,-127,-64,105,25,112,-31, 
  /* [9][0][][] */ -3,45,10,-56,4,35,-4,9,11,-51,-76,15,16,6,-32,35,30,16,127,-5,9,17,35,-5,-31, 
  /* [10][0][][] */ 111,23,-19,-36,1,-34,67,46,31,-33,-30,39,56,-96,-124,20,1,-42,2,127,14,-8,4,40,-27, 
  /* [11][0][][] */ -46,-18,-77,67,83,-44,-49,21,12,-34,-15,12,18,82,19,10,-35,-1,29,-6,127,13,15,12,12, 
  /* [12][0][][] */ -6,4,38,13,10,67,-6,13,20,-30,17,-15,43,7,10,53,46,80,9,-7,-56,35,-4,127,-9, 
  /* [13][0][][] */ 7,-7,-69,84,-5,-72,-10,-14,-64,17,1,40,-5,34,30,-21,-9,127,-11,35,39,-4,-24,-4,81, 
  /* [14][0][][] */ -14,-127,-109,-51,8,33,-40,-90,-44,126,-9,58,-87,91,-44,-60,91,-110,-114,-30,2,28,34,23,-62, 
  /* [15][0][][] */ 24,-5,-9,-127,-39,-39,16,-54,-30,-18,-27,11,-24,33,4,35,111,71,-61,-64,88,1,34,0,35, 
  /* [16][0][][] */ -96,8,62,-20,-50,33,104,22,-100,-44,-87,-22,-35,-84,-127,87,73,48,-16,19,-109,-96,-45,-32,97, 
  /* [17][0][][] */ 18,-42,-21,124,40,-44,-1,-56,-39,87,-24,-46,29,6,-39,-71,29,127,-23,8,71,13,16,-58,-62, 
  /* [18][0][][] */ -17,22,104,32,-13,-35,13,33,-27,-22,-11,11,17,4,4,-10,32,32,11,-17,20,-23,-127,-21,17, 
  /* [19][0][][] */ 20,-38,13,3,-26,-53,-17,32,-71,91,-68,-2,-72,-15,-58,-126,26,-49,-6,-89,72,36,-127,-24,-68, 
  /* [20][0][][] */ -22,33,79,-127,65,32,22,38,27,71,50,14,-38,-25,-126,112,14,7,2,35,-73,-7,16,-11,1, 
  /* [21][0][][] */ 16,-102,48,18,-6,-97,41,92,4,-22,-3,61,-8,-11,-40,1,3,-127,-9,17,-33,42,-13,-12,-16, 
  /* [22][0][][] */ -18,18,7,68,-5,11,-26,127,-53,5,-28,18,-11,-48,51,8,25,41,-2,13,39,-23,87,-12,20, 
  /* [23][0][][] */ 29,-61,91,-55,-18,65,48,95,127,-61,23,29,79,0,-54,12,-45,112,21,-60,-17,18,10,8,-29, 
  /* [24][0][][] */ -31,6,64,-41,-44,127,65,-6,14,-25,-52,21,20,71,-16,68,67,77,35,68,82,-12,-60,29,-84, 
  /* [25][0][][] */ -127,106,59,91,55,93,41,-124,22,120,-63,46,-39,-57,24,-40,-56,-75,-5,-21,-26,-46,-32,-43,12, 
  /* [26][0][][] */ -13,-15,-29,36,13,11,-23,23,-4,-20,11,127,2,1,12,-41,-27,11,2,62,37,0,4,-68,63, 
  /* [27][0][][] */ 15,4,-15,-103,-24,-5,-10,-8,20,5,-32,-8,16,127,41,-24,-31,-13,1,-3,55,70,-2,-7,28, 
  /* [28][0][][] */ -25,-32,-40,-48,-32,-5,127,5,-31,29,-4,9,98,45,108,21,15,-52,-29,7,-5,46,-12,26,-45, 
  /* [29][0][][] */ 62,92,49,34,-65,-66,43,-4,-23,88,-97,-6,-40,-74,-42,-7,127,100,-21,-95,-60,7,43,22,36, 
  /* [30][0][][] */ 8,-47,76,-127,10,75,-81,50,-64,108,-87,101,61,-21,-77,27,-85,70,-37,32,35,-29,98,53,-90, 
  /* [31][0][][] */ 47,83,-76,31,23,-38,62,28,-62,-98,10,127,96,100,2,50,16,-108,-10,-99,101,2,-30,14,-26, 
  /* [32][0][][] */ 35,21,16,-50,9,-17,-12,37,-14,21,50,-57,-32,-33,87,-7,-62,-78,25,-11,127,26,10,-21,76, 
  /* [33][0][][] */ 17,13,-34,127,31,-14,19,17,1,18,15,-3,-32,44,-1,-66,108,-80,11,-11,5,-27,-56,49,-30, 
  /* [34][0][][] */ -50,5,4,37,114,-13,-85,-11,66,22,-74,-3,29,127,-74,-55,-30,41,-18,-14,-37,-1,21,3,-4, 
  /* [35][0][][] */ 28,-6,-17,9,-24,29,33,-21,127,80,-32,15,-3,15,-15,-28,-53,-29,18,-87,36,-16,-70,1,-18, 
  /* [36][0][][] */ -26,-21,87,6,-17,13,-2,80,127,-31,19,65,-28,-9,2,58,22,8,-22,18,-10,11,-7,11,-5, 
  /* [37][0][][] */ 10,-16,-2,-19,-10,7,1,75,1,-48,-30,-3,-25,-26,2,-3,28,127,20,-21,-44,8,45,-13,-19, 
  /* [38][0][][] */ 30,87,-29,29,20,6,16,-49,46,74,127,120,32,-47,-38,-51,122,2,14,-54,58,-8,94,6,-19, 
  /* [39][0][][] */ -9,-67,53,127,20,4,-14,13,-32,3,-4,31,-1,32,-55,-46,12,10,71,-41,22,45,24,-27,-31, 
  /* [40][0][][] */ -38,49,7,-66,12,7,127,-69,30,72,-100,-55,-8,-87,-59,78,-13,75,-14,22,50,45,-20,-104,-62, 
  /* [41][0][][] */ 7,-12,22,14,51,26,-21,-1,10,-20,3,-28,-23,23,23,-71,-78,-120,51,25,38,-101,54,-127,66, 
  /* [42][0][][] */ -29,2,25,-22,20,-3,44,6,-19,32,-31,-2,-24,66,-127,63,68,-85,-13,-56,-81,-98,16,-21,50, 
  /* [43][0][][] */ -13,22,37,49,-43,-47,12,127,5,-60,-22,-51,-26,-24,-44,30,-42,-26,-48,55,11,11,-4,28,-40, 
  /* [44][0][][] */ 94,3,4,-7,31,-25,-22,-2,-12,-59,-61,-39,28,28,-51,-24,127,78,36,-35,-48,73,-15,-50,23, 
  /* [45][0][][] */ -33,-47,-36,-98,-19,-2,127,9,-87,61,-26,41,17,-92,31,92,63,47,-90,3,-46,-45,15,-15,20, 
  /* [46][0][][] */ -1,-1,24,-53,-45,3,6,9,-24,-14,-90,-62,127,-23,-6,-93,87,61,-10,-22,-18,125,-38,-11,-47, 
  /* [47][0][][] */ -3,64,-23,-27,-49,-49,-2,-127,-12,-15,18,-46,35,24,2,-46,0,-66,31,-23,-38,67,14,-12,31, 
  /* [48][0][][] */ 23,113,-10,-21,-9,-9,-24,-43,19,-23,41,-20,9,56,80,-29,27,-6,-14,-30,-25,9,66,-33,-127, 
  /* [49][0][][] */ -1,-23,-39,-28,24,-4,-22,-36,-8,-30,40,6,-16,16,48,2,127,-56,17,-2,-27,-23,-11,46,-34, 
  /* [50][0][][] */ 2,45,19,68,-18,4,38,-86,-19,-127,-3,74,-14,17,-70,36,-12,122,14,42,-23,-4,8,8,40, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant28_scale = { 51, { 0.0054847225546836853, 0.0024597651790827513, 0.0049606799148023129, 0.0069386754184961319, 0.0027608287055045366, 0.0034573518205434084, 0.0040035396814346313, 0.0031011649407446384, 0.0050002182833850384, 0.0093074673786759377, 0.0040346365422010422, 0.0048054037615656853, 0.0024996944703161716, 0.0049783303402364254, 0.0024040343705564737, 0.0025936844758689404, 0.0046296208165585995, 0.0026375714223831892, 0.0046328459866344929, 0.0043064383789896965, 0.0030773933976888657, 0.0063380785286426544, 0.0032355291768908501, 0.0022335995454341173, 0.0023327134549617767, 0.0039240177720785141, 0.00395544758066535, 0.0071816779673099518, 0.002638800535351038, 0.0042930003255605698, 0.0017871332820504904, 0.0034970683045685291, 0.0054546226747334003, 0.0046726432628929615, 0.0028319924604147673, 0.0051273321732878685, 0.0032242927700281143, 0.0045530437491834164, 0.0038597628008574247, 0.0013629558961838484, 0.0042779408395290375, 0.0039862021803855896, 0.0044283675961196423, 0.0060988361947238445, 0.003451415104791522, 0.0027619895990937948, 0.0026753176935017109, 0.0040636444464325905, 0.0058603095822036266, 0.0054507055319845676, 0.0034295842051506042, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[51] = { -2305, 797, 964, -4077, 2599, 3920, 18893, 5094, 4720, -1457, 1979, -5332, -4107, -6567, 22541, 7200, 18383, 2221, 1873, 16604, 1943, 10458, -2457, 861, -8012, 6478, 3848, -3287, 4487, -8111, 10871, -1674, -1463, -2212, 8172, -3521, -2618, 3181, -15036, 23195, 3420, 10951, 13272, 2396, 7964, 10740, 13382, 10676, -18, 5920, 4693, };
const TfArray<1, int> tensor_dimension29 = { 1, { 51 } };
const TfArray<51, float> quant29_scale = { 51, { 0.00012905229232273996, 5.7876830396708101e-05, 0.0001167218797490932, 0.0001632629573578015, 6.4960673626046628e-05, 8.1349455285817385e-05, 9.4200935564003885e-05, 7.2968585300259292e-05, 0.00011765219824155793, 0.00021899923740420491, 9.4932627689559013e-05, 0.00011306832311674953, 5.8816342061618343e-05, 0.00011713718413375318, 5.6565517297713086e-05, 6.1027873016428202e-05, 0.00010893225407926366, 6.2060506024863571e-05, 0.00010900814231717959, 0.00010132796160178259, 7.240926061058417e-05, 0.00014913125778548419, 7.6130098022986203e-05, 5.2555285947164521e-05, 5.4887375881662592e-05, 9.2329828476067632e-05, 9.3069356807973236e-05, 0.00016898066678550094, 6.208942795637995e-05, 0.00010101177758770064, 4.205019649816677e-05, 8.2283964729867876e-05, 0.00012834406516049057, 0.00010994455078616738, 6.6635118855629116e-05, 0.00012064311158610508, 7.586571155115962e-05, 0.00010713044321164489, 9.0817949967458844e-05, 3.2069550798041746e-05, 0.00010065743117593229, 9.3792994448449463e-05, 0.00010419688624097034, 0.00014350202400237322, 8.1209771451540291e-05, 6.4987994846887887e-05, 6.2948653066996485e-05, 9.5615163445472717e-05, 0.00013788964133709669, 0.0001282518933294341, 8.069610339589417e-05, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*51] = { 
  /* [0][0][][] */ -71,-35,127,127,1,-34,-12,-6,127,8,18,-101,-15,63,-7,18,88,-11,16,-20,-27,27,51,1,127,32,-14,79,-10,-40,76,127,-66,-21,0,4,-23,-127,127,-56,67,127,23,-45,-15,-58,-5,-17,127,-19,-31, 127,53,58,33,-87,127,9,109,-32,-11,110,2,127,28,-7,127,-18,-9,3,-5,-27,4,127,-33,116,24,-7,-11,127,6,72,-43,-47,-81,50,-6,-26,-45,21,48,83,-4,15,-31,73,45,-23,-51,73,127,7, 14,-48,-30,13,-51,79,-2,127,-35,-58,87,24,64,69,-27,19,-51,-1,-7,29,11,-37,-2,19,-57,-5,-21,127,69,-18,24,-53,-58,43,-127,127,45,3,-31,-41,-70,5,127,-19,87,-30,-16,12,2,24,-16, 
  /* [0][1][][] */ -3,-1,-84,-41,-10,-32,-106,-25,-11,-28,127,-31,-1,127,-38,-44,-9,127,79,-38,1,127,3,-4,-13,-14,-80,-89,-20,27,6,33,-37,-99,30,5,-9,-102,-75,-12,127,-44,-25,127,127,-19,-2,71,-34,-27,127, -7,94,-23,9,72,7,-45,8,7,127,-22,-103,-82,-11,-46,-62,-20,-2,-61,3,-100,76,-25,127,20,127,3,-11,15,-4,127,-43,72,127,-103,49,-19,-118,-12,-127,-22,-23,-39,4,-75,-30,14,127,0,-33,-20, 31,-127,7,-27,-127,23,11,-34,-50,83,-2,-35,-44,-7,127,-6,-84,-83,-50,-18,127,-19,11,18,-24,-1,-47,-84,-18,-23,16,-44,127,14,-44,-55,17,87,-2,-66,-30,-9,-10,-62,-56,113,-71,4,-36,-16,-9, 
  /* [0][2][][] */ -31,-22,-14,-14,22,72,127,-20,-19,-14,41,-127,16,-32,32,-10,-5,-3,21,-17,13,-21,-25,-1,-49,16,127,-7,12,127,27,33,-9,-12,33,0,-32,17,-25,49,-39,-67,4,46,-51,20,25,-1,-21,-41,18, 19,-13,-12,6,22,-41,36,-9,-5,53,-35,-110,-27,4,-26,-12,31,25,127,-44,98,6,-23,-53,-28,-8,24,-19,10,33,10,-10,-2,11,-48,43,127,11,-8,81,3,9,4,56,-10,-58,127,-11,-29,3,15, 15,107,-2,5,62,-15,-2,-28,-6,50,4,-57,-32,3,-14,-8,127,0,-59,127,17,-1,10,91,-20,8,50,-51,6,-64,-3,-9,23,-19,-7,88,-25,-22,-3,68,-35,15,-34,-40,-5,127,55,19,-6,-9,3, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.0096372803673148155, 0.013653920963406563, 0.010142279788851738, 0.011047982610762119, 0.012289108708500862, 0.009805937297642231, 0.017845341935753822, 0.011183496564626694, 0.010472984984517097, 0.006475615780800581, 0.0083142193034291267, 0.0075156320817768574, 0.0138659393414855, 0.0093171363696455956, 0.015173333697021008, 0.017279051244258881, 0.0097104543820023537, 0.013121107593178749, 0.0079085379838943481, 0.015286955051124096, 0.0093363858759403229, 0.008047531358897686, 0.014607236720621586, 0.013379193842411041, 0.0092658624053001404, 0.010871042497456074, 0.01487625390291214, 0.0096649983897805214, 0.015060595236718655, 0.0098516512662172318, 0.010271591134369373, 0.0072574429214000702, 0.0098575791344046593, 0.011359501630067825, 0.013939326629042625, 0.012826917693018913, 0.014107564464211464, 0.0098369065672159195, 0.011307046748697758, 0.028449853882193565, 0.010632551275193691, 0.019242694601416588, 0.015195032581686974, 0.0072270678356289864, 0.010003923438489437, 0.010169924236834049, 0.012185209430754185, 0.010060416534543037, 0.0096322745084762573, 0.013958883471786976, 0.01723155751824379, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[51] = { -304, -115, 630, -1996, 3538, -160, 468, -1762, -363, -1896, -414, 9664, 2097, 849, 1712, 530, -1168, 196, 2417, 395, 235, -581, -438, -2258, -223, -1943, -75, -670, -1942, 620, -4535, -773, -770, 2249, 3646, -869, -628, 5293, 1091, 2088, 698, 293, 1120, 42, 2288, -1627, -1624, -1493, 161, 204, -126, };
const TfArray<1, int> tensor_dimension31 = { 1, { 51 } };
const TfArray<51, float> quant31_scale = { 51, { 0.00022675954096484929, 0.0003212687443010509, 0.00023864187824074179, 0.00025995253236033022, 0.00028915549046359956, 0.0002307279355591163, 0.00041989042074419558, 0.00026314108981750906, 0.00024642318021506071, 0.00015236742910929024, 0.000195628686924465, 0.00017683840997051448, 0.00032625740277580917, 0.00021922674204688519, 0.00035701962769962847, 0.00040656593046151102, 0.00022848127991892397, 0.00030873194918967783, 0.00018608325626701117, 0.00035969307646155357, 0.00021967967040836811, 0.00018935368279926479, 0.00034369970671832561, 0.00031480457982979715, 0.00021802030096296221, 0.00025578922941349447, 0.00035002949880436063, 0.00022741172870155424, 0.00035436695907264948, 0.0002318035694770515, 0.00024168450909201056, 0.00017076336371246725, 0.00023194304958451539, 0.00026728239026851952, 0.00032798416214063764, 0.00030180983594618738, 0.00033194269053637981, 0.00023145662271417677, 0.00026604815502651036, 0.00066940835677087307, 0.00025017769075930119, 0.00045276927994564176, 0.00035753019619733095, 0.00017004866094794124, 0.00023538644018117338, 0.00023929233429953456, 0.00028671082691289485, 0.00023671568487770855, 0.00022664175776299089, 0.00032844432280398905, 0.00040544843068346381, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[51*1*1*51] = { 
  /* [0][0][][] */ -89,-113,72,-54,-57,7,-4,-37,12,-59,20,-1,48,45,40,7,-59,-9,27,-21,-87,43,27,-35,40,13,-2,-127,-110,-99,-24,-47,-99,38,-71,-71,-49,-80,40,71,17,-28,-121,86,31,-53,-16,42,-38,-13,49, 
  /* [1][0][][] */ 82,-3,1,-105,-106,6,17,-2,-70,-48,-90,123,-125,-15,27,-56,50,-9,-6,29,21,-46,40,44,-98,-47,95,-50,73,50,81,-19,-29,10,-37,-17,-3,28,-15,-65,28,76,-19,91,-80,127,40,3,85,-39,-7, 
  /* [2][0][][] */ -63,13,33,-61,9,8,-8,5,52,-10,-50,-18,-17,-79,-28,-39,-25,-23,16,-88,-38,46,-4,4,127,-9,52,-70,-18,-38,15,60,17,1,40,-37,-18,-13,7,-83,-49,-66,19,5,26,-28,5,-58,-1,-4,-81, 
  /* [3][0][][] */ 9,33,-4,-61,36,-34,38,-45,-6,-10,40,-127,23,-48,-12,-86,11,-35,10,-36,82,-98,8,-45,-48,41,98,7,-14,-24,-56,-4,-15,105,3,-1,-52,89,-61,-37,-51,75,-11,-19,58,20,-58,87,11,35,34, 
  /* [4][0][][] */ -1,0,-75,8,-3,-71,-2,-3,-33,8,-36,32,-28,-42,77,74,4,92,40,98,9,-34,-39,-14,-19,127,12,-27,6,-9,-106,40,-8,-44,3,19,-20,41,-22,6,90,27,12,-6,13,101,-70,81,-7,3,6, 
  /* [5][0][][] */ -24,-58,-48,-62,-78,62,-61,9,-5,45,23,-24,-37,-58,-7,-10,58,-68,72,1,-77,-127,-4,-26,-51,-78,74,-18,16,29,55,-50,-29,31,51,28,123,-20,37,121,29,28,-3,-71,76,13,-36,82,92,71,89, 
  /* [6][0][][] */ -9,24,-102,-10,15,38,17,-20,20,-9,24,33,22,-78,-42,-16,12,-50,27,7,32,-19,-45,-41,-15,-20,-48,32,-20,127,5,12,-23,-13,28,-23,39,5,-58,55,59,-19,30,-40,-27,31,-62,-20,-6,23,-5, 
  /* [7][0][][] */ 28,-9,2,11,9,5,-18,12,-1,7,3,-27,-22,-38,-18,127,-8,-37,50,21,11,40,13,-42,21,-27,94,48,15,-35,18,-37,11,59,25,16,13,-24,77,35,20,22,30,0,-21,17,-15,-40,-25,54,-33, 
  /* [8][0][][] */ 24,-14,-13,125,27,-36,23,36,25,11,15,-49,42,0,-21,1,54,-15,-13,-3,-37,49,-38,-22,62,1,-46,26,24,-44,-13,12,29,-48,5,1,-4,-60,4,-6,-127,108,-25,-13,3,43,-32,24,-5,-18,-28, 
  /* [9][0][][] */ 69,56,-60,25,-14,6,-55,58,-8,-34,85,16,31,2,-76,-105,-48,25,-16,-34,-36,-18,27,43,-35,15,17,22,24,-73,-26,36,85,-36,30,-3,-23,23,-34,2,-119,-36,36,-60,-84,31,127,-19,-59,22,33, 
  /* [10][0][][] */ 26,-37,-3,-69,52,76,-41,-36,-12,21,24,-77,62,-79,-70,-19,-6,-39,34,36,3,43,11,51,44,33,86,-71,62,-45,-16,5,29,76,-63,24,-42,-120,-5,-16,-20,-42,70,127,-3,-64,-46,-43,-45,-46,-119, 
  /* [11][0][][] */ -127,-53,12,-4,56,5,62,21,13,117,50,27,34,-48,-75,-11,-34,25,-57,21,-54,-1,3,18,18,41,25,18,-72,-61,25,-12,4,-79,26,100,35,-41,30,-53,15,-55,-20,53,-23,-86,28,22,9,-63,16, 
  /* [12][0][][] */ 12,-6,55,-5,11,23,64,38,0,46,-22,-12,-51,-24,14,-1,39,-82,-37,-13,-31,13,30,15,-21,32,56,-16,1,-69,-12,8,12,38,4,-24,-39,-47,-32,-37,34,34,-28,75,-3,-102,-32,-7,-10,72,127, 
  /* [13][0][][] */ -98,-62,-18,-37,39,101,-27,-115,-10,-54,13,-18,7,107,47,15,117,33,58,-13,-21,5,82,-24,-44,39,6,84,24,91,127,22,0,-83,3,-6,-29,-39,-48,-75,-28,-1,-85,20,-19,56,20,45,-31,-12,-73, 
  /* [14][0][][] */ 34,-67,-8,51,-39,31,98,-127,-21,-15,32,9,77,-77,-59,-1,-67,79,-17,-16,59,-45,-25,-2,-112,42,126,110,-10,125,2,-15,38,-55,-4,-49,110,-1,-94,0,-4,-15,49,-99,110,-12,106,-50,-1,-61,-93, 
  /* [15][0][][] */ -78,-44,25,-60,11,-23,-8,-59,-119,3,112,77,-22,33,-20,-45,-39,54,15,-10,6,19,-26,56,-92,-11,-12,26,30,-127,-4,-70,-33,-123,47,4,78,49,-3,-59,65,-13,-33,11,23,26,-6,54,114,7,-84, 
  /* [16][0][][] */ -22,42,-83,-25,-68,-46,115,23,127,37,9,7,-30,38,-12,-2,-3,49,-19,-57,6,-104,-5,26,22,26,14,43,6,-62,66,-9,7,65,18,-28,-48,10,-35,83,0,-31,51,-119,-70,40,9,-34,-83,6,96, 
  /* [17][0][][] */ -21,76,50,-22,-53,-57,-31,-9,24,6,-10,-40,40,-33,1,101,-52,-66,-37,-5,6,17,127,10,-59,-31,39,36,-29,-61,56,46,-39,-65,34,47,-17,-29,13,-93,47,-2,17,14,1,51,-28,3,14,39,6, 
  /* [18][0][][] */ 0,-14,-1,-29,32,-17,127,-11,1,-27,8,58,17,6,-10,-12,75,-11,-3,-16,-12,-33,-31,74,-24,19,45,-8,-19,-15,8,2,-43,-25,13,9,-13,48,-16,-5,18,-14,-27,11,38,-36,48,13,34,18,-100, 
  /* [19][0][][] */ -5,12,-4,9,43,-103,25,17,62,9,-32,-97,-14,14,4,-8,0,29,56,-54,17,10,76,-5,-63,36,56,-109,7,4,-53,85,-127,-42,-116,8,-19,96,-35,-23,-44,42,-14,-69,8,10,-42,5,-68,48,-54, 
  /* [20][0][][] */ -18,66,-66,-59,-84,77,45,-15,27,109,-64,-102,91,100,-3,52,-24,49,22,49,-35,64,-8,-27,-43,54,65,-5,-35,-23,111,-74,88,92,127,-35,-11,28,53,-18,-53,-89,40,42,97,-47,126,64,63,-45,12, 
  /* [21][0][][] */ -6,49,-2,-1,24,-30,5,47,-87,37,4,1,7,-27,-32,9,-4,-37,-11,-1,72,-29,-36,38,-44,-25,-30,23,-19,-47,0,-127,-37,-5,-36,-4,12,-80,9,-47,-62,11,2,16,-8,2,-22,-36,27,-10,-5, 
  /* [22][0][][] */ 112,-58,-31,43,-36,-35,4,127,-30,3,-75,82,50,57,24,25,-82,33,-27,-18,-32,11,-108,-50,-26,2,46,78,78,30,1,51,14,12,62,-54,-26,-1,98,-98,25,-13,14,46,-80,-4,-87,-70,-79,-98,-23, 
  /* [23][0][][] */ 31,56,-23,41,-2,42,-20,-11,-45,49,37,-53,-38,36,-41,7,-76,-42,-21,17,0,-3,127,-20,-30,-10,18,51,30,-28,52,15,-5,19,10,-55,-31,48,25,-24,-8,40,28,-42,33,-35,2,4,-31,27,-24, 
  /* [24][0][][] */ 22,55,-20,-43,12,-27,21,11,-27,-19,-7,11,-35,9,-15,39,64,-9,43,35,-40,-28,13,16,-34,19,21,47,18,1,-34,41,5,63,-48,-17,20,-127,104,-1,40,-9,41,4,-97,-20,-51,-9,33,-12,5, 
  /* [25][0][][] */ 2,-6,-21,-6,25,-33,6,-24,-3,-72,23,7,25,-25,-31,-2,31,-30,62,103,47,-22,-12,-58,-10,-17,-7,5,-19,-11,29,20,3,-9,-16,-63,-46,-27,29,10,2,-10,27,9,44,127,11,37,12,-22,17, 
  /* [26][0][][] */ -60,-42,86,-3,-24,11,37,-36,-18,51,9,5,-93,-63,61,80,-5,31,109,-1,68,-32,-25,-9,-77,43,44,11,11,-59,45,43,20,-127,31,15,45,-97,73,27,-36,39,-26,29,-35,38,-1,50,9,6,-7, 
  /* [27][0][][] */ 8,2,-11,3,45,85,-31,-24,-15,-51,9,17,70,14,-17,-3,-27,27,20,-37,-3,5,127,-14,8,-26,24,49,38,-51,-16,12,-55,-10,-24,7,42,3,0,-12,12,-4,-37,6,-8,-51,-23,53,-38,24,-24, 
  /* [28][0][][] */ 41,16,17,-45,-28,45,-8,31,-50,25,3,-29,1,40,63,-3,-2,127,-14,5,29,-15,19,54,-57,32,47,-9,-52,-13,13,21,23,53,-17,-13,9,8,34,-3,92,15,-44,55,18,-10,-4,8,-44,-7,-63, 
  /* [29][0][][] */ 56,6,-21,23,-28,34,26,62,-9,39,-19,-64,-10,86,41,-42,60,15,56,43,87,-47,-15,3,-50,-30,54,72,-61,-71,16,-27,-48,-80,-58,-45,43,-4,36,2,28,12,-29,-11,12,85,69,-20,-23,127,-107, 
  /* [30][0][][] */ -50,25,57,-75,26,17,4,-22,-4,3,51,-96,-36,-47,-15,102,-11,-110,-34,2,-42,4,-9,-19,-4,-54,-35,-27,36,-74,-27,-18,-19,127,-40,27,8,45,-13,32,98,-104,-72,48,55,14,-17,-35,-40,19,-33, 
  /* [31][0][][] */ -45,-34,6,21,-1,14,46,-1,124,-13,-53,-127,60,-35,29,-34,-16,10,31,26,5,-43,62,38,14,3,74,-28,-57,-91,31,-55,11,69,38,3,-48,-115,-58,-64,-32,-68,-71,30,92,16,21,-40,10,50,33, 
  /* [32][0][][] */ -101,58,57,106,21,-66,6,11,8,-2,53,55,30,13,26,-35,-12,-14,58,101,-119,23,22,-71,16,51,-2,93,-50,69,17,20,117,-18,114,-127,-2,-29,37,120,18,-6,7,-25,47,-110,97,-31,12,-27,-57, 
  /* [33][0][][] */ 50,113,127,-33,-11,45,13,-123,-13,-39,-93,-75,23,-43,93,-22,14,58,39,99,-1,17,-99,15,31,11,9,-12,73,39,71,-16,-49,14,67,-8,22,56,79,89,-21,70,43,-12,63,-1,9,-46,6,-79,-10, 
  /* [34][0][][] */ 66,79,-27,-55,30,5,-18,-42,34,58,32,8,-12,-20,20,-14,5,-27,-26,-5,-21,-83,-78,-34,-60,89,22,5,31,45,0,25,-5,36,-5,-9,-81,51,10,127,56,35,-59,-17,4,61,104,55,14,9,27, 
  /* [35][0][][] */ 43,-62,-37,48,-46,-19,-11,49,-32,5,22,37,6,-28,-27,-61,-5,53,-30,-41,79,21,89,14,73,-25,44,34,-40,-1,75,127,-76,31,-4,-57,27,-12,-52,-2,-94,11,69,-102,115,-21,-34,26,-42,-46,5, 
  /* [36][0][][] */ 9,50,-33,-57,-47,-55,-15,-2,-7,4,-35,47,19,13,0,-24,31,-36,-40,50,-44,-8,12,-41,-10,-34,8,40,-24,-14,-48,32,-62,-34,51,-23,127,48,47,31,40,-4,13,126,26,44,21,-31,-9,16,66, 
  /* [37][0][][] */ -43,-9,-15,-4,43,75,-19,-57,-6,30,-112,7,-34,-27,42,-42,23,19,-56,11,16,-53,21,0,-44,-9,-12,-77,69,-15,20,-31,45,-44,-127,-43,4,-10,-13,-32,16,-10,102,15,-37,-33,27,8,112,54,13, 
  /* [38][0][][] */ 71,-4,78,-89,32,76,44,127,-46,-28,-27,-47,-28,-100,-77,-29,52,-91,-42,26,-72,21,10,-34,-49,10,49,8,12,-80,64,100,-33,95,-59,-25,48,17,18,36,31,19,-27,-16,5,44,50,-44,-5,16,-40, 
  /* [39][0][][] */ -14,12,-116,-51,87,-67,-72,-85,14,-25,31,13,-59,-37,-34,-25,-26,-3,13,48,15,57,-5,63,-12,-9,-18,11,-17,-51,35,35,-12,-6,-6,42,-22,-8,-127,-13,5,-19,-42,-13,-21,-40,-12,20,-113,28,9, 
  /* [40][0][][] */ 120,-23,-31,11,13,-41,-51,-25,127,28,-21,-64,69,78,24,0,77,11,-7,-10,64,-3,0,23,-53,13,35,-34,-1,-37,-19,-21,6,-9,9,24,-8,8,15,-8,-36,37,-9,-9,17,-13,49,-31,-20,-31,-51, 
  /* [41][0][][] */ 5,20,30,127,5,46,-76,54,76,11,6,-38,64,-66,-6,-65,-10,-74,54,-22,-105,28,119,-17,-51,22,-102,-30,-17,-83,-17,68,98,-78,-100,-5,29,-1,-18,-69,-13,-37,66,55,-24,13,-19,71,-41,-44,-12, 
  /* [42][0][][] */ -28,107,3,-49,91,1,20,3,13,-19,-72,-28,-35,-23,-82,-41,6,23,19,-6,-12,9,-33,20,46,-59,51,-43,-15,52,56,-14,-75,-36,-127,-74,0,57,-53,64,-23,-5,-29,4,67,70,3,11,26,22,-22, 
  /* [43][0][][] */ -49,-32,-92,-18,-127,21,39,72,15,9,-59,-68,-92,44,24,-10,-28,-24,-13,8,-2,-31,18,15,9,-12,1,-35,40,-13,25,-61,16,73,14,15,-8,0,-22,-12,-58,-34,-12,-10,-51,-16,106,23,-76,-19,42, 
  /* [44][0][][] */ -12,5,6,73,-16,64,-4,40,-32,-1,46,66,-67,-93,-27,50,51,14,-62,-13,-28,-44,-103,58,97,-30,-14,43,-35,56,26,-32,-73,-37,-33,-23,-97,-102,58,34,11,-57,-18,41,17,114,-46,-8,-41,127,-77, 
  /* [45][0][][] */ -93,14,17,100,63,-19,-9,-47,34,4,-27,-63,127,12,53,44,-68,45,-27,42,-27,27,1,-11,11,-1,-6,109,-49,-3,-68,118,-26,32,6,-24,-5,-60,52,-38,-14,-67,32,11,20,-29,20,-16,5,-2,8, 
  /* [46][0][][] */ 24,70,-50,-1,64,-112,23,-40,39,112,8,-11,40,-6,-68,-61,69,19,-39,-113,32,-19,24,-107,2,58,-8,6,-17,73,36,68,67,80,127,-23,62,-35,18,22,-45,-60,-47,11,123,62,-75,37,-2,-87,30, 
  /* [47][0][][] */ 67,-15,35,-37,-38,42,-71,5,-19,4,-84,-15,51,33,-23,-119,89,-1,-19,-22,13,101,101,-46,103,-10,-23,21,127,-75,8,12,3,-35,-37,-35,-5,-28,-12,-14,40,-54,-17,1,8,-15,-91,39,0,-68,28, 
  /* [48][0][][] */ -86,-8,62,-3,-46,-28,49,-32,-58,60,16,1,-10,9,-16,10,5,37,-6,-6,85,-19,23,-62,21,9,13,21,-32,46,44,12,-32,-91,-11,-45,-80,-61,11,127,23,4,-44,27,13,-3,-37,28,0,41,-51, 
  /* [49][0][][] */ 2,-35,27,-22,17,45,-26,67,102,-8,-75,-127,64,70,-42,3,-19,-1,-12,6,-77,26,78,-37,-87,21,-12,-3,13,-79,-91,59,16,-5,-40,17,65,31,-30,-8,-29,-44,62,-55,57,-22,-4,2,-65,-9,-20, 
  /* [50][0][][] */ 27,42,-54,-35,110,-11,27,-17,9,35,-13,-63,-31,41,5,21,-9,28,33,-23,16,-38,32,-37,41,-18,47,-69,127,-52,-22,-15,-17,1,-76,-4,18,-9,41,3,65,-40,31,12,-42,-25,-27,22,10,7,17, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant32_scale = { 51, { 0.0025417667347937822, 0.0020347330719232559, 0.0037260956596583128, 0.0035154290962964296, 0.003452300326898694, 0.001793716917745769, 0.0038310608360916376, 0.0028607342392206192, 0.001972429221495986, 0.0028925749938935041, 0.0018185528460890055, 0.0022998861968517303, 0.0022688268218189478, 0.0028557004407048225, 0.0016919104382395744, 0.0027797410730272532, 0.0017645353218540549, 0.0021012080833315849, 0.0040842508897185326, 0.0042199394665658474, 0.0023631725925952196, 0.0041906214319169521, 0.0021920702420175076, 0.002970817731693387, 0.0044004437513649464, 0.0071402867324650288, 0.0028500484768301249, 0.0031738812103867531, 0.0026127907913178205, 0.0019710457418113947, 0.0027785156853497028, 0.0028877092991024256, 0.0017248130170628428, 0.0024185306392610073, 0.0027966713532805443, 0.0017306058434769511, 0.0030996627174317837, 0.0044155889190733433, 0.0027849259786307812, 0.0022347394842654467, 0.0029397199396044016, 0.0030292603187263012, 0.0040796441026031971, 0.003781014122068882, 0.0030645006336271763, 0.0024244466330856085, 0.002309443661943078, 0.0016445288201794028, 0.0021887773182243109, 0.0024644581135362387, 0.0029384719673544168, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[51] = { 20817, 7588, 12459, 1701, -1371, 7375, 167, -1642, 15024, 6003, 18357, 14522, 8774, 1007, 8441, 8648, 11280, 8107, 1403, 7964, -17936, 14955, 10548, -606, 4595, -1144, 931, -976, -873, 5707, 8518, 9207, 20, -7885, -12712, 7445, -1580, 4766, 2976, 20103, -292, 6931, 422, 11468, 15857, 2842, -5032, 9744, 12464, 6694, -2875, };
const TfArray<1, int> tensor_dimension33 = { 1, { 51 } };
const TfArray<51, float> quant33_scale = { 51, { 5.9806276112794876e-05, 4.7876073949737474e-05, 8.7672837253194302e-05, 8.2715981989167631e-05, 8.1230595242232084e-05, 4.2205105273751542e-05, 9.0142610133625567e-05, 6.7311397287994623e-05, 4.6410099457716569e-05, 6.8060588091611862e-05, 4.2789481085492298e-05, 5.4114971135277301e-05, 5.3384163038572297e-05, 6.7192951973993331e-05, 3.9809659938327968e-05, 6.5405671193730086e-05, 4.1518480429658666e-05, 4.9440190196037292e-05, 9.6100025984924287e-05, 9.9292694358155131e-05, 5.5604061344638467e-05, 9.8602860816754401e-05, 5.1578124839579687e-05, 6.9901594542898238e-05, 0.00010353985271649435, 0.00016800675075501204, 6.7059962020721287e-05, 7.4679555837064981e-05, 6.1477432609535754e-05, 4.6377546823350713e-05, 6.5376843849662691e-05, 6.7946100898552686e-05, 4.0583836380392313e-05, 5.6906603276729584e-05, 6.5804029873106629e-05, 4.0720136894378811e-05, 7.2933238698169589e-05, 0.00010389621456852183, 6.5527674451004714e-05, 5.2582105126930401e-05, 6.9169880589470267e-05, 7.1276714152190834e-05, 9.5991628768388182e-05, 8.8965040049515665e-05, 7.2105896833818406e-05, 5.7045803259825334e-05, 5.4339852795237675e-05, 3.8694797694915906e-05, 5.1500643166946247e-05, 5.7987250329460949e-05, 6.9140514824539423e-05, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*51] = { 
  /* [0][0][][] */ 5,127,-65,-3,127,127,-71,121,83,-116,-14,20,-27,-35,-14,22,86,-67,127,-60,41,-27,0,-2,-127,-5,34,-100,6,-127,-26,2,-8,-3,1,-79,-98,-36,-98,-23,-45,2,-54,-127,88,-30,28,122,-3,44,-66, -23,-90,127,127,-23,25,-88,127,98,127,-47,16,127,127,-6,33,127,17,85,127,-42,-3,-23,-24,-54,57,-51,127,7,21,7,-60,-10,-27,127,-42,32,-39,-89,127,127,32,2,98,-37,-21,-20,0,-52,89,-25, -7,12,-17,41,-31,91,-79,97,-68,73,127,127,-27,-51,127,7,12,83,62,-51,-16,-49,-37,-21,123,82,-11,66,-18,-61,-53,4,-22,10,-44,-51,15,20,49,102,10,46,51,-67,-5,1,-5,-17,-13,108,-18, 
  /* [0][1][][] */ -60,-16,14,-98,-8,-24,-25,105,32,-39,-16,-48,-14,43,44,-12,-107,-37,-81,-97,62,127,127,-37,-61,-4,7,85,110,83,127,-10,53,5,-31,-39,-4,-23,27,105,-50,119,-127,-82,127,-36,83,-127,-127,127,67, -113,38,15,59,-60,-3,80,-25,-125,-2,66,13,-28,17,11,-5,-20,-127,87,-58,21,14,-10,-26,-63,1,78,-43,-127,82,63,127,26,-62,-83,-98,-36,125,-6,40,-99,127,-48,-54,48,32,127,22,59,-10,102, -104,-106,-37,-3,-65,-29,127,-53,127,51,-1,58,25,-34,13,-9,-58,106,0,110,-68,-54,-18,-33,-56,127,127,-3,77,-13,63,-61,127,-10,80,127,127,127,111,94,-62,26,110,1,-15,127,-28,-48,99,-8,-55, 
  /* [0][2][][] */ 41,55,25,52,-47,39,24,-56,-77,-14,-27,9,27,71,-28,127,-36,-73,-17,-110,-40,12,-25,13,-70,3,-116,-32,97,-81,29,122,-15,-23,-46,-66,-29,-9,-14,57,-71,1,-66,-98,-10,-5,-10,-31,69,28,10, 127,12,-1,-11,-5,0,104,22,-48,-18,19,-33,31,-48,-84,-5,23,27,-52,-9,127,-31,4,86,-36,-6,123,16,107,-65,-14,112,-30,-7,-39,-4,-69,-35,127,2,74,-75,-43,-13,-25,-16,31,-85,59,-13,28, -65,42,-28,-42,-47,-21,3,6,17,58,19,-15,0,-36,91,-63,-29,57,30,45,-27,-61,72,127,-16,-69,117,1,10,-15,-14,37,34,127,-78,51,63,-14,48,32,-9,-18,-40,-16,-15,-25,-42,70,89,21,127, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant34_scale = { 51, { 0.0072820889763534069, 0.011450560763478279, 0.00828597042709589, 0.0072733513079583645, 0.008531663566827774, 0.013936994597315788, 0.0090281227603554726, 0.0065578860230743885, 0.012048526667058468, 0.0071655614301562309, 0.015859005972743034, 0.011807909235358238, 0.011883393861353397, 0.0082363300025463104, 0.012663648463785648, 0.011566461063921452, 0.010244235396385193, 0.0076348367147147655, 0.0070915957912802696, 0.004786346573382616, 0.00775538245216012, 0.012708104215562344, 0.011796405538916588, 0.0097079826518893242, 0.0071234614588320255, 0.0092531740665435791, 0.0060216626152396202, 0.011021888814866543, 0.0083139073103666306, 0.010929296724498272, 0.0095881493762135506, 0.005872718058526516, 0.014355710707604885, 0.0099676912650465965, 0.0090690720826387405, 0.0082096932455897331, 0.0089861517772078514, 0.0084301773458719254, 0.007590914610773325, 0.0094406548887491226, 0.0078174984082579613, 0.0070820897817611694, 0.0068945144303143024, 0.0084191178902983665, 0.0081402240321040154, 0.014730403199791908, 0.009869004599750042, 0.012994290329515934, 0.0098083596676588058, 0.0080940499901771545, 0.0095095653086900711, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[51] = { 5106, -1430, -126, -1590, 1396, -678, 125, -1092, -661, -969, -977, -2333, -359, 1318, -262, -771, -1626, 2430, -1083, 863, 756, -175, 550, 1521, 4343, -1853, -3261, -1747, 2, 2732, -387, 194, -1631, -721, 1926, 6854, -358, -2751, 1303, -5390, 617, -3429, 3670, 4549, 295, -1429, -2038, 3421, -1952, -2193, -508, };
const TfArray<1, int> tensor_dimension35 = { 1, { 51 } };
const TfArray<51, float> quant35_scale = { 51, { 0.0001713432720862329, 0.00026942495605908334, 0.00019496401364449412, 0.00017113768262788653, 0.00020074502390343696, 0.00032792930142022669, 0.00021242642833385617, 0.00015430319763254374, 0.00028349473723210394, 0.0001686014438746497, 0.00037315310328267515, 0.00027783316909335554, 0.00027960925945080817, 0.00019379600416868925, 0.0002979682176373899, 0.0002721520431805402, 0.00024104083422571421, 0.00017964321887120605, 0.00016686107846908271, 0.00011261992040090263, 0.00018247959087602794, 0.00029901420930400491, 0.00027756247436627746, 0.00022842313046567142, 0.00016761086590122432, 0.00021772175387013704, 0.00014168617781251669, 0.00025933855795301497, 0.0001956213527591899, 0.00025715993251651525, 0.0002256035222671926, 0.00013818161096423864, 0.00033778144279494882, 0.00023453391622751951, 0.00021338993974495679, 0.00019316925317980349, 0.00021143886260688305, 0.00019835711282212287, 0.00017860975640360266, 0.00022213306510820985, 0.00018394114158581942, 0.00016663741553202271, 0.00016222387785091996, 0.00019809689547400922, 0.00019153468019794673, 0.00034659772063605487, 0.00023221188166644424, 0.0003057480207644403, 0.00023078493541106582, 0.00019044823420699686, 0.00022375448315870017, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[51*1*1*51] = { 
  /* [0][0][][] */ 112,49,74,-15,22,-97,-7,-45,-16,38,50,-14,33,-19,-24,87,10,50,-50,30,19,-39,42,72,-6,1,-13,-34,11,-31,18,18,41,-6,-33,-19,-85,2,-50,-103,12,119,48,6,77,127,-26,-3,-63,-57,3, 
  /* [1][0][][] */ -18,28,-6,34,-33,-67,-81,42,9,36,16,2,-39,35,-80,15,-13,-33,-28,-32,-42,40,-17,6,-21,-31,-79,39,-54,-51,-10,16,27,14,2,-9,25,-127,-55,32,-27,-28,42,54,9,-42,-60,-45,-81,-14,-11, 
  /* [2][0][][] */ 36,-46,5,14,-13,-44,-47,127,-74,-42,116,17,89,25,-28,-32,-10,-2,39,-8,72,-23,-12,21,-54,32,-58,12,-61,11,112,38,30,-65,7,40,-11,-113,-27,-4,26,46,-41,26,57,-56,49,-80,0,-58,-28, 
  /* [3][0][][] */ -14,5,-3,-31,22,1,-18,-21,-4,80,-43,-35,-21,12,64,121,-8,-78,0,47,44,-49,-12,-16,-34,40,115,-80,13,13,87,14,-34,-56,45,80,-16,-35,-13,10,46,-85,36,36,18,-7,-44,-35,80,-127,8, 
  /* [4][0][][] */ 6,16,-68,56,59,127,-92,-92,-70,-13,48,56,105,-10,94,34,-51,-56,-12,36,-51,55,73,26,5,-33,33,-18,42,-46,38,-101,-39,-99,124,3,64,-47,93,83,-42,64,-73,-115,41,-85,-35,-57,-103,17,28, 
  /* [5][0][][] */ 9,-80,-73,66,25,52,-71,38,-127,-27,40,51,-25,-53,58,15,-95,69,-67,99,-26,-79,21,-8,63,-23,-73,-49,64,99,25,19,-8,-36,-57,47,-5,21,23,-1,32,-19,25,7,39,46,-28,23,92,27,8, 
  /* [6][0][][] */ 45,51,-60,-91,64,-26,-48,-48,8,43,-77,49,7,7,-31,-10,-89,26,3,20,4,-6,28,15,-18,20,-66,-27,-41,-3,-34,-89,-39,-51,-19,-54,-47,-97,-11,-52,-93,19,5,-5,16,12,32,-50,-35,30,127, 
  /* [7][0][][] */ -45,-10,127,118,-18,-74,-71,44,-101,-45,-20,37,18,23,-8,26,36,27,77,54,-10,-82,94,-5,96,-17,-16,50,-45,-25,127,-23,-43,-67,16,71,0,-12,22,-49,-16,-50,3,-90,-26,113,24,-78,43,-25,-8, 
  /* [8][0][][] */ 59,-59,-8,73,24,-34,-16,-32,8,-127,-9,-46,-30,53,30,13,-10,-112,-28,38,61,18,51,-42,-1,-38,33,18,-75,-32,-62,6,50,74,-41,4,9,-68,26,64,28,95,25,-81,17,-31,43,-69,-32,-58,-89, 
  /* [9][0][][] */ -5,-17,-1,75,-77,14,25,-4,-2,15,-20,20,-49,-10,-50,-20,27,48,18,-2,-20,-48,-127,-48,-31,56,18,-34,51,1,-43,-28,-55,12,-9,15,18,23,-10,-9,-17,-44,82,10,29,31,-19,51,7,-4,-20, 
  /* [10][0][][] */ -21,-16,-1,11,-26,103,36,19,-86,-17,-16,31,-48,61,16,22,38,30,-41,-2,-30,-29,10,-24,-32,-27,6,127,-8,38,-52,-3,12,66,-14,38,-54,-19,5,-21,-48,0,20,33,-20,0,-39,-33,-36,27,8, 
  /* [11][0][][] */ 67,-14,-7,-89,-5,31,-14,-13,10,45,-40,-25,41,2,-93,-42,6,-36,-50,11,-7,52,53,-59,2,24,18,-27,31,12,-58,127,-1,-23,58,32,1,-57,-86,-63,-6,-40,-99,-71,-28,71,23,-63,7,38,-11, 
  /* [12][0][][] */ -27,5,17,-73,127,0,31,-47,65,89,-37,64,-80,-42,-72,95,111,11,87,33,-16,-18,102,-73,72,11,-46,-58,-3,24,4,-3,67,13,18,115,27,-30,41,-75,38,-45,-46,-103,2,26,15,-26,-50,92,6, 
  /* [13][0][][] */ -64,5,-64,45,94,28,-38,-25,-45,-7,11,18,42,-8,-41,-4,22,-21,-5,-53,-3,45,28,67,21,27,-46,-15,-74,2,-5,68,22,-9,51,43,54,-37,-36,-127,-90,3,4,-36,-22,-110,14,-2,28,-74,-12, 
  /* [14][0][][] */ 8,-20,-46,39,26,-75,86,10,-88,-15,-30,-37,6,15,13,-127,-17,8,-6,-54,-3,33,24,1,13,-2,26,2,-21,-28,5,45,-9,119,13,10,22,-17,18,41,52,-20,-23,-22,-56,-44,-48,52,49,-78,16, 
  /* [15][0][][] */ -56,5,11,86,22,-1,-54,41,-17,37,-30,-34,61,10,-7,-69,-73,76,-80,-12,10,-65,-11,7,67,91,-34,-3,-63,70,61,-32,0,6,25,127,-18,6,2,-5,4,18,-39,34,-93,-12,14,15,31,-49,24, 
  /* [16][0][][] */ 61,-70,95,-60,-68,-83,23,-80,-15,20,-32,-41,-75,-99,35,-61,18,72,-26,28,-98,-57,95,75,-26,103,1,-44,-46,33,-57,-84,86,0,-76,52,58,2,0,127,-36,20,124,-18,-27,9,-35,-93,-108,-58,-37, 
  /* [17][0][][] */ -9,-28,-1,25,32,46,35,26,112,42,24,-33,-30,122,-1,-10,82,-41,58,41,-30,-28,-6,18,7,25,23,24,-68,-38,12,-66,-21,8,-56,54,-29,-17,-16,-9,-26,-79,-24,11,19,0,0,68,21,-41,127, 
  /* [18][0][][] */ -20,-11,2,-41,-50,-25,35,8,-25,-16,4,-1,-24,-119,-16,46,-38,58,54,24,-6,127,12,-4,29,-93,-56,28,74,-21,-4,62,-39,34,-38,11,-32,-3,28,33,33,-29,-46,-13,2,-94,25,-26,15,-5,-16, 
  /* [19][0][][] */ -99,-68,-106,66,1,-13,-14,67,-97,-101,-119,118,0,95,127,3,-36,46,-45,35,-75,-28,-37,126,-101,125,67,-40,69,-89,30,54,12,-28,79,104,87,20,1,-27,-78,57,24,-2,45,13,-3,-22,43,11,-6, 
  /* [20][0][][] */ -18,-118,45,18,-2,-9,78,-47,-41,23,-54,-72,-83,7,80,46,87,16,-33,-127,-26,-110,4,-89,-37,5,-2,91,5,114,50,28,32,72,9,74,-47,-67,51,29,104,-13,23,42,-25,58,47,-39,10,2,-27, 
  /* [21][0][][] */ -18,-27,23,108,-14,87,-109,-123,2,-18,-29,20,31,50,-33,17,46,-58,9,-53,3,-50,55,13,-5,37,-33,-92,14,-2,-36,-30,24,21,41,23,-1,29,45,-5,127,-34,-40,22,-8,64,-13,30,32,10,-2, 
  /* [22][0][][] */ 26,28,-67,28,23,42,29,-95,39,-56,-84,-12,-53,-46,35,-14,-24,-71,-104,-20,-12,-92,104,31,-43,-6,31,-5,91,-14,53,-54,-117,11,1,31,-32,127,3,39,-26,117,22,-41,-26,-10,64,65,-11,-64,63, 
  /* [23][0][][] */ -31,-31,16,12,18,73,-21,8,-13,-42,-79,5,-19,7,26,-12,-58,-68,9,-4,50,-120,127,5,-43,6,8,-67,-53,64,96,9,-25,-81,73,-39,60,61,42,-32,40,4,-18,40,-30,-122,79,-126,56,-72,-30, 
  /* [24][0][][] */ -53,-62,12,-30,-2,31,-42,41,44,66,127,14,7,26,-7,65,-26,78,41,22,43,2,25,-16,41,26,-53,20,4,-29,65,-1,41,-46,3,0,0,-34,37,56,-92,-17,-22,-17,37,98,25,23,20,7,-9, 
  /* [25][0][][] */ -38,73,-24,-5,-72,-54,-1,16,13,-55,-2,69,-72,-127,48,20,-17,84,-30,77,-11,-19,-5,95,31,35,-46,8,78,-9,-3,-37,-73,11,-23,-12,-40,8,7,-76,-20,-55,31,-68,13,9,64,-40,-22,27,30, 
  /* [26][0][][] */ -56,-39,47,61,34,17,36,-9,-37,24,-59,-82,24,13,-40,39,-68,50,-19,-98,-73,108,27,-51,7,0,-8,-82,3,2,9,3,49,20,47,-6,127,7,50,52,35,-45,-46,47,37,8,84,-73,42,-88,-19, 
  /* [27][0][][] */ -2,-99,-43,25,8,-16,-9,22,-65,38,-18,78,-7,-34,34,62,6,127,-45,-6,-43,-71,41,-1,39,-71,-25,-41,-24,57,-75,-33,98,-1,33,56,-9,-44,3,6,-26,-80,58,16,6,17,-18,7,35,21,6, 
  /* [28][0][][] */ 23,-44,15,43,-27,94,-1,93,73,-43,-66,86,120,-7,-16,-59,42,27,34,23,-10,-34,36,29,5,-26,-54,-16,43,17,15,26,7,-40,13,39,-28,-37,126,38,5,-56,-67,97,-2,127,-48,34,34,-33,-34, 
  /* [29][0][][] */ 34,-91,33,12,-18,-48,80,-48,38,-12,4,-127,-16,-6,44,-25,58,7,2,-12,-41,-71,-14,-54,30,-8,-108,75,-35,47,-1,-23,77,72,-2,-70,-55,3,-47,61,-34,-12,43,37,30,72,20,-40,-19,20,61, 
  /* [30][0][][] */ 33,-98,-98,75,-32,-36,-46,127,43,28,-97,30,61,30,65,-30,13,-32,59,44,23,-100,-74,-69,20,-8,25,7,11,-106,-43,-106,56,-15,-23,107,78,11,9,-3,-25,-48,68,66,-17,15,-18,34,-61,-30,-3, 
  /* [31][0][][] */ -77,-90,-11,4,64,50,-29,-34,-8,-10,-114,-37,15,29,-7,-34,-61,11,48,-40,-74,-81,-49,10,-46,32,23,23,-81,28,48,49,90,-44,-60,-8,-75,11,64,-34,11,69,82,12,-36,6,-62,-39,28,-127,-41, 
  /* [32][0][][] */ 66,-30,-58,19,-48,52,-98,-24,34,-25,17,127,3,17,-47,-91,17,-1,16,58,-77,87,6,-55,-49,-49,57,6,-36,18,11,27,-115,55,6,62,45,21,-35,0,-2,-49,-67,36,11,50,99,23,24,-26,50, 
  /* [33][0][][] */ 50,12,-11,42,13,-15,18,-72,127,17,43,8,-6,-65,-19,58,-30,77,-74,-60,57,50,98,-97,66,6,-91,10,-23,-2,-40,-39,-17,-18,-45,52,94,-6,31,31,66,-9,52,-16,59,56,-51,61,-75,60,-80, 
  /* [34][0][][] */ 15,-29,30,11,7,42,31,-49,23,13,-16,-9,-18,-31,10,-1,-21,-11,9,-65,33,-64,-13,-31,-2,14,39,35,66,4,16,-13,0,9,36,41,47,-13,46,24,9,16,-52,12,-11,-10,-19,30,5,-32,127, 
  /* [35][0][][] */ -13,-55,67,-24,-9,35,16,-6,-9,-18,-13,52,-49,48,4,-19,26,40,0,-16,-27,-15,22,-12,127,-9,-54,-17,-40,37,-52,-35,44,-12,-15,14,63,-97,-23,-9,-14,80,-36,-83,-76,-75,16,-45,51,92,13, 
  /* [36][0][][] */ -51,-13,-3,-15,-28,-16,-80,21,2,-33,-46,72,38,77,-73,8,20,-20,-96,31,-34,-38,-127,57,-9,27,79,-40,9,89,41,57,50,-103,84,4,99,39,-28,-86,-67,-39,-38,125,-38,30,-93,-11,94,65,-68, 
  /* [37][0][][] */ 13,-19,-5,3,54,69,-127,-54,-53,-102,58,-37,60,28,-81,-11,15,18,-78,-18,0,16,11,67,-44,17,17,24,84,19,-7,38,60,-65,66,19,-52,-29,-76,-34,6,1,-23,3,-14,-19,-22,-30,-6,12,-27, 
  /* [38][0][][] */ -66,45,11,-51,13,-21,-63,77,-28,-25,61,127,23,-10,47,34,19,83,52,47,10,-14,7,56,61,42,-21,-32,63,-28,48,35,-117,-64,-35,-90,64,-29,73,-69,-36,-58,-20,-47,-80,6,-93,-6,6,-56,-26, 
  /* [39][0][][] */ -54,-1,15,99,75,29,-58,9,68,-42,35,3,-1,71,-86,-94,8,127,26,38,40,-67,52,79,26,-2,85,98,17,-116,20,79,36,-1,2,-21,97,65,38,24,58,87,80,6,-43,30,-49,-39,52,31,-109, 
  /* [40][0][][] */ -27,-22,-7,19,71,21,4,-4,45,-3,-31,28,5,49,55,56,-106,45,56,-31,25,-10,73,-52,-25,-45,26,-89,-99,21,13,-3,5,88,19,-34,19,-9,-39,8,80,-6,-15,82,-29,61,-8,127,24,-17,-7, 
  /* [41][0][][] */ 43,-97,-40,12,-28,-101,-13,-63,18,103,-63,98,-34,-22,-25,-22,-13,-4,-21,-41,-36,-81,-67,97,19,13,-6,49,85,63,-35,-66,-24,-8,-2,-27,47,15,-23,15,48,-59,11,-37,-46,13,62,12,98,-127,-7, 
  /* [42][0][][] */ -61,-76,30,-36,-1,0,-40,26,39,-22,-59,31,35,29,41,45,30,-48,40,-65,-43,-15,-74,-63,22,43,-36,39,-39,21,-34,-127,-7,44,-10,49,-90,-25,115,-64,23,-70,-30,-73,-34,8,-106,93,33,20,-2, 
  /* [43][0][][] */ -16,103,1,33,-52,-34,-6,-9,-55,5,-39,36,9,-22,-56,17,30,-25,-26,21,127,41,33,51,-41,14,-31,0,-17,0,-16,-20,2,-8,13,24,-79,33,-34,-48,43,18,-5,-23,99,-15,19,-73,-75,41,-47, 
  /* [44][0][][] */ 58,-15,-50,31,8,-11,-78,-9,-8,-26,-35,-80,6,-55,57,0,-8,-47,3,-25,5,8,-15,-102,-68,-1,9,-42,-10,31,-81,75,127,10,81,-91,-33,-19,19,10,-70,-79,0,31,52,-11,124,-38,109,15,107, 
  /* [45][0][][] */ 25,-60,53,-1,1,-45,61,-74,5,21,-2,-47,16,-80,-21,-64,10,47,8,-52,-13,-43,-74,-3,21,32,-46,-11,0,-17,-99,43,-39,42,-34,78,-12,85,-27,-37,-14,-33,-100,-9,70,-25,-5,-42,3,112,127, 
  /* [46][0][][] */ 15,124,13,-29,3,-12,-73,-37,-23,97,-44,69,66,-48,28,9,16,29,31,-70,3,34,12,-40,-13,-49,-39,85,8,54,64,-34,-71,-3,1,-20,-68,43,-14,-29,64,-127,-4,81,89,2,-5,23,-42,16,4, 
  /* [47][0][][] */ 38,-86,121,-52,0,-96,4,74,-34,127,-76,3,91,-1,53,-2,-48,36,5,41,-45,-29,-36,15,-39,26,-22,27,1,-50,79,-20,-55,-27,21,-50,43,-3,-80,66,52,89,40,-5,26,-39,-24,7,-123,-26,-5, 
  /* [48][0][][] */ -64,46,-13,4,-50,0,78,34,-55,8,-37,-20,-11,41,-67,19,62,2,-11,-9,-19,-12,19,33,-73,-14,-127,73,7,11,-7,3,-34,-73,101,-40,-67,-20,-1,-27,22,8,-34,58,-74,-11,-3,12,-14,-40,-14, 
  /* [49][0][][] */ -30,-21,-68,9,-26,12,-16,18,-60,28,-16,-13,12,81,85,9,36,86,12,69,-61,11,84,-47,-24,54,32,25,7,-99,-18,22,-127,39,3,-1,45,58,103,-11,-12,50,-25,-27,-77,56,13,-2,36,54,7, 
  /* [50][0][][] */ -80,11,65,52,3,-13,127,-14,35,61,36,-30,-40,-20,-21,12,40,56,-81,2,-29,-88,-5,69,58,-29,5,80,-5,92,-19,-20,50,34,-46,-25,49,42,-115,76,45,15,-21,10,-27,38,104,-12,14,7,10, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant36_scale = { 51, { 0.0025680593680590391, 0.003753850469365716, 0.0027323949616402388, 0.0035248366184532642, 0.0019458438036963344, 0.0032236683182418346, 0.0021786263678222895, 0.0023799065966159105, 0.0032120209652930498, 0.0036271170247346163, 0.0042101074941456318, 0.003302854485809803, 0.0016716726822778583, 0.005241758655756712, 0.0054528806358575821, 0.0021961189340800047, 0.0019781764131039381, 0.0044222590513527393, 0.0026347811799496412, 0.0015873577212914824, 0.0027975707780569792, 0.0036098218988627195, 0.0030084878671914339, 0.0024346949066966772, 0.0041716690175235271, 0.0028503746725618839, 0.0017893038457259536, 0.0015235838945955038, 0.0024314087349921465, 0.0024147271178662777, 0.004574277438223362, 0.0025132617447525263, 0.0024432563222944736, 0.0027603183407336473, 0.0021623016800731421, 0.0027403964195400476, 0.0024393226485699415, 0.0031379535794258118, 0.0027045521419495344, 0.0018499301513656974, 0.0045980745926499367, 0.0019038032041862607, 0.0027142618782818317, 0.0028656541835516691, 0.0032354060094803572, 0.0035236491821706295, 0.0027459701523184776, 0.0032088838052004576, 0.0034550584387034178, 0.0032166719902306795, 0.0017306157387793064, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[51] = { 85, 15348, 1747, -921, 5099, -7518, 22081, 1854, 13538, 6349, -230, 6851, 11962, 5528, 2199, 5958, 14827, -2844, 5287, -1000, -3416, -2825, 7048, 12968, -14807, 9990, 8603, 4124, -12624, 12801, 3189, 18521, 4141, -1665, 2794, 4697, 1714, 4084, 4788, -11523, -8718, 15051, 17678, 4370, 1073, 5584, 689, -596, 8933, -2451, 1537, };
const TfArray<1, int> tensor_dimension37 = { 1, { 51 } };
const TfArray<51, float> quant37_scale = { 51, { 6.042492896085605e-05, 8.832589810481295e-05, 6.4291649323422462e-05, 8.2937331171706319e-05, 4.5784559915773571e-05, 7.5851021392736584e-05, 5.1261798944324255e-05, 5.599780342890881e-05, 7.5576965173240751e-05, 8.5343934188131243e-05, 9.9061355285812169e-05, 7.7714226790703833e-05, 3.9333473978331313e-05, 0.0001233354996656999, 0.00012830307241529226, 5.167338895262219e-05, 4.6545326767954975e-05, 0.00010405315697425976, 6.1994855059310794e-05, 3.7349593185354024e-05, 6.5825195633806288e-05, 8.4936989878769964e-05, 7.0787951699458063e-05, 5.7286939409095794e-05, 9.8156917374581099e-05, 6.706763815600425e-05, 4.2101266444660723e-05, 3.5849032428814098e-05, 5.7209617807529867e-05, 5.6817108998075128e-05, 0.00010763006139313802, 5.9135571063961834e-05, 5.7488385209580883e-05, 6.4948668295983225e-05, 5.0877686589956284e-05, 6.4479914726689458e-05, 5.7395827752770856e-05, 7.3834205977618694e-05, 6.3636522099841386e-05, 4.3527768866624683e-05, 0.00010818998998729512, 4.4795371650252491e-05, 6.3864987168926746e-05, 6.7427157773636281e-05, 7.6127202191855758e-05, 8.2909391494467854e-05, 6.4611063862685114e-05, 7.550315058324486e-05, 8.12954967841506e-05, 7.5686402851715684e-05, 4.0720369725022465e-05, } };
const TfArray<51, int> quant37_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[1*3*3*51] = { 
  /* [0][0][][] */ -67,-120,33,79,127,-31,-80,116,30,-20,-71,127,-37,-41,10,-6,-48,8,-18,-5,-69,-19,1,-98,-113,-92,-33,-17,127,127,106,90,-36,-67,109,88,95,-2,-37,127,1,-29,-15,-8,-41,18,-20,34,35,-32,4, 127,51,-31,-75,127,93,54,-2,-65,-27,52,87,-37,-19,-60,65,127,-33,-27,127,-46,-51,46,108,-46,127,23,-4,99,47,-19,-13,127,23,-121,-24,127,22,27,-25,8,46,127,127,64,-51,36,62,-50,9,94, 15,19,-88,-49,77,-47,14,-25,-74,45,-69,-15,24,127,75,66,62,50,-53,55,-127,-127,29,-15,-25,-28,75,20,-100,61,-106,27,105,71,-127,-42,108,-78,63,13,37,23,57,-36,-94,-3,-14,83,22,79,-94, 
  /* [0][1][][] */ -104,39,114,-47,-7,-46,-33,44,40,-37,96,23,16,33,-37,-11,-33,-53,-20,114,11,52,33,127,-127,-38,-15,-57,-66,36,84,-66,6,86,-21,-74,114,1,-63,-23,-21,-24,-62,4,-81,76,-25,-127,127,127,-127, -3,77,87,30,113,-75,-57,-52,58,127,-26,15,127,67,99,127,15,2,-55,1,-83,107,11,-69,-78,3,37,-127,85,-23,-7,-59,-15,59,36,64,-3,19,127,-39,-18,-82,13,-28,-91,40,127,114,-99,-64,11, 39,41,125,48,-71,-43,127,45,-36,57,127,7,15,56,-28,98,-6,-26,127,68,59,-20,-48,107,-7,19,-14,82,74,-40,-98,71,37,127,-63,-108,36,80,64,-32,-6,-91,44,66,127,32,31,53,-101,120,-64, 
  /* [0][2][][] */ 127,-25,31,1,-59,127,-68,-21,3,-60,-96,10,47,-40,111,-4,-37,-18,58,-36,63,-15,127,7,44,-33,99,-96,63,-16,-33,127,22,-50,-11,-112,-120,-15,4,10,-42,-69,-64,-81,-71,-85,18,26,-73,-64,-2, 67,10,73,127,-71,-33,-80,127,127,11,-60,-10,-59,-18,127,79,-28,127,-58,31,-106,122,-4,-20,11,-22,0,-3,-79,-17,-26,-81,9,-105,74,75,-31,-24,4,-19,127,127,-22,49,-15,58,-13,-33,14,-15,-106, 105,127,127,-27,60,-45,55,39,-23,56,106,8,-11,20,-74,-44,-49,-45,-1,121,0,81,-20,62,82,-28,127,6,90,-19,-127,-79,-32,20,-34,-127,-28,127,-24,-19,22,10,-50,-20,-29,127,-4,4,-124,-30,7, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant38_scale = { 51, { 0.0074745751917362213, 0.0091223493218421936, 0.0057792309671640396, 0.0072822794318199158, 0.0061179278418421745, 0.0075078513473272324, 0.0093468604609370232, 0.0088784005492925644, 0.0086301527917385101, 0.0090067368000745773, 0.0073235491290688515, 0.016076881438493729, 0.014558992348611355, 0.0072431550361216068, 0.0054198084399104118, 0.0077206483110785484, 0.0091050639748573303, 0.0084412870928645134, 0.0097182253375649452, 0.0085349073633551598, 0.008753863163292408, 0.0069526280276477337, 0.011855447664856911, 0.0078186923637986183, 0.0055334265343844891, 0.0090109473094344139, 0.012848733924329281, 0.020371247082948685, 0.0067155258730053902, 0.012807874009013176, 0.006165647879242897, 0.0076526859775185585, 0.0089444871991872787, 0.0082162516191601753, 0.0087667424231767654, 0.0080591775476932526, 0.0061583714559674263, 0.0111948037520051, 0.0084902159869670868, 0.011118575930595398, 0.0080686435103416443, 0.013422600924968719, 0.0097507666796445847, 0.011490953154861927, 0.0068044974468648434, 0.011913498863577843, 0.011003805324435234, 0.010246285237371922, 0.0087172286584973335, 0.0088725704699754715, 0.011924787424504757, } };
const TfArray<51, int> quant38_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 3 };
const ALIGN(16) int32_t tensor_data39[51] = { -3128, -4594, -809, 47, -1547, 1554, 1066, -3364, -1564, 733, 878, -1959, -1556, -2130, -2508, -4486, 534, -521, 3249, -3971, 4590, -1664, 485, -2080, 7446, 1313, -3522, 6650, -680, -666, -2035, 1172, -2371, 645, 2951, 4298, 451, -1652, -832, 1821, -713, 2144, -409, -631, 4462, -59, -2503, -379, 4981, 464, 3282, };
const TfArray<1, int> tensor_dimension39 = { 1, { 51 } };
const TfArray<51, float> quant39_scale = { 51, { 0.00017587236652616411, 0.00021464351448230445, 0.00013598191435448825, 0.00017134775407612324, 0.0001439512416254729, 0.00017665533232502639, 0.00021992613619659096, 0.00020890354062430561, 0.00020306241640355438, 0.00021192322310525924, 0.00017231880337931216, 0.00037827956839464605, 0.00034256454091519117, 0.00017042718536686152, 0.00012752490874845535, 0.00018166231166105717, 0.00021423680300358683, 0.00019861852342728525, 0.0002286641247337684, 0.00020082134869880974, 0.00020597325055859983, 0.00016359124856535345, 0.00027895171660929918, 0.0001839692413341254, 0.00013019827019888908, 0.00021202229254413396, 0.00030232316930778325, 0.0004793234693352133, 0.00015801237896084785, 0.0003013617533724755, 0.00014507406740449369, 0.00018006320169661194, 0.00021045852918177843, 0.00019332357624080032, 0.00020627629419323057, 0.00018962770991493016, 0.00014490286412183195, 0.00026340715703554451, 0.0001997697982005775, 0.00026161354617215693, 0.00018985044152941555, 0.0003158259205520153, 0.00022942980285733938, 0.00027037537074647844, 0.00016010583203751594, 0.00028031761758029461, 0.00025891305995173752, 0.00024108907382469624, 0.00020511126786004752, 0.00020876637427136302, 0.00028058324824087322, } };
const TfArray<51, int> quant39_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[51*1*1*51] = { 
  /* [0][0][][] */ -43,33,-72,5,65,-50,16,107,-2,20,-31,-47,37,13,-63,49,58,40,-47,6,-12,48,-80,-41,-13,-101,-2,-24,11,-81,-51,-16,1,-48,10,-99,-69,74,-67,2,70,20,-33,122,42,127,-15,1,78,-79,-66, 
  /* [1][0][][] */ 10,13,59,10,28,-6,-36,33,-70,35,-62,-32,-57,-14,-25,-37,53,-46,-15,-7,-127,6,-21,-48,-67,-39,-70,-56,3,10,35,-40,-80,70,-47,72,67,38,-121,86,41,-42,83,-60,63,51,-29,73,-84,-89,27, 
  /* [2][0][][] */ 70,-11,-60,7,43,25,-68,124,-65,9,-78,-113,36,61,-127,37,-65,4,12,45,-48,-38,4,110,-14,33,22,17,6,-59,54,-59,59,66,46,-109,-34,-13,-30,3,-19,-101,25,57,-7,63,-2,37,39,-97,-52, 
  /* [3][0][][] */ -45,54,-19,26,-22,39,60,48,-65,18,62,69,39,86,-1,42,-87,30,-35,-37,57,-1,127,20,-72,48,-63,6,-1,37,-41,-28,-29,-68,-63,7,-80,-69,42,-127,15,-84,41,-24,-33,33,-33,9,39,-24,-79, 
  /* [4][0][][] */ 30,16,66,-73,13,19,-73,-27,27,44,59,-55,77,50,-115,-12,-3,25,-77,-29,42,10,25,60,-63,38,9,-42,28,-127,-79,18,-23,-91,62,-30,-117,98,25,-3,-1,14,123,-69,-14,13,-79,23,-58,-5,-38, 
  /* [5][0][][] */ -49,28,-1,-34,65,-17,7,-37,18,-59,-22,-62,-19,127,-61,75,-13,-7,-1,7,68,-45,20,-30,-46,-74,-36,-48,-49,-17,96,-12,45,6,-23,-25,70,-10,32,47,3,115,-12,-84,40,50,-9,13,-32,14,3, 
  /* [6][0][][] */ 27,-49,42,-60,0,27,-125,-41,-47,-41,-20,45,-77,-83,-51,67,53,42,-104,-50,82,10,69,-33,24,-20,102,-10,-22,-46,19,-53,-50,-55,12,127,-12,-1,-107,-58,-7,-30,45,49,3,35,74,121,-3,-78,63, 
  /* [7][0][][] */ -8,-3,61,-21,114,-24,8,71,27,-78,-52,47,-27,110,-24,-20,9,-18,89,-25,-60,104,82,-126,-32,-25,39,47,35,56,67,11,127,-56,-66,44,42,51,-3,-38,-127,103,-22,101,-45,26,-52,-31,59,-5,3, 
  /* [8][0][][] */ -25,22,29,17,-14,21,42,-15,0,48,-35,-19,-46,57,47,53,-42,-6,70,82,2,17,127,-18,30,-29,-69,-51,21,33,22,23,25,-25,-6,100,-56,16,-39,12,-62,-5,31,-16,-7,73,-75,35,-62,-31,14, 
  /* [9][0][][] */ -8,-104,8,-22,4,-50,80,55,39,7,50,-63,-104,-3,95,-31,-102,110,18,95,-81,-28,-16,-20,-70,-125,-33,-8,-59,40,55,-104,58,23,-4,0,40,57,24,65,-26,120,33,25,-44,78,-127,-12,7,-66,45, 
  /* [10][0][][] */ 55,54,0,-90,96,-30,107,29,21,-84,-83,15,14,113,-112,-127,-57,57,35,-23,56,1,36,-97,-10,53,-82,16,-7,-83,-5,-82,110,-9,101,23,-13,7,60,-95,-52,59,79,-53,-38,15,-24,72,-72,-18,-69, 
  /* [11][0][][] */ 127,-36,-26,-16,-81,96,34,67,80,-40,11,-53,21,56,-60,-12,-50,2,-95,-54,34,-47,-28,-63,-79,30,-106,-1,30,-59,85,-90,56,16,32,-40,-25,5,-70,12,-26,34,-105,-28,50,21,-31,-34,42,66,14, 
  /* [12][0][][] */ -15,19,53,13,-107,-91,94,-90,-127,16,-3,6,0,10,91,25,53,78,-70,21,14,93,37,25,-7,89,19,-119,-87,-83,-70,-13,24,-24,27,55,23,-67,-44,6,-25,-17,-12,-2,40,-3,-57,-59,76,45,-23, 
  /* [13][0][][] */ -68,-64,-23,106,29,-29,28,-119,-35,47,-35,80,67,-28,-35,9,-52,40,23,-12,-17,110,-4,-67,-87,-38,-18,47,-59,-35,-18,-36,-66,107,4,52,31,59,-127,4,48,10,-8,-18,13,71,68,98,-31,10,75, 
  /* [14][0][][] */ 11,59,99,-38,51,-58,52,85,-15,7,25,61,-15,-61,61,107,-4,3,-35,3,-48,-30,8,83,41,-30,-26,-12,33,-4,-64,-45,-21,-3,98,-4,-45,-71,6,-92,19,47,-7,11,-16,-35,-30,-19,-33,-57,-127, 
  /* [15][0][][] */ 57,-27,4,70,-14,-11,-6,3,-6,18,12,76,56,-22,74,-19,53,-76,22,-47,26,25,-29,-76,-11,19,13,62,0,27,-56,0,-31,28,-45,2,-20,4,-81,-25,80,1,-9,-43,127,-1,37,60,37,13,12, 
  /* [16][0][][] */ -73,121,-2,72,-44,75,-9,-101,49,63,-39,-89,18,27,10,-18,49,-93,-48,-46,11,65,29,-14,-28,-102,74,-98,20,-42,-119,-84,-37,-27,-45,127,-34,16,-93,50,11,116,-44,7,-17,-31,-127,-85,-55,-56,65, 
  /* [17][0][][] */ 17,41,-20,45,-103,60,-38,-90,-69,-112,15,-64,6,15,68,127,-66,85,1,-9,-23,56,-36,-34,47,45,88,-76,72,-51,76,72,51,44,111,-7,-75,69,16,-8,-31,42,21,44,9,-3,45,-70,-25,-33,33, 
  /* [18][0][][] */ -26,28,30,-77,-69,-78,12,-73,-86,107,-13,71,-42,112,-41,43,117,17,-42,108,2,-21,-8,22,-38,47,-54,108,-87,107,26,-3,-75,-85,36,103,-28,75,49,-10,-49,127,-51,-67,-11,-28,-54,-25,-2,1,-15, 
  /* [19][0][][] */ 62,19,-127,-71,-24,63,103,8,49,30,52,89,-61,-43,17,42,-25,67,-9,-97,57,62,-96,88,-93,19,-3,-7,74,-42,-127,59,65,-43,-34,20,-1,0,-22,-67,0,103,21,-70,29,-44,19,0,-56,-36,10, 
  /* [20][0][][] */ -25,-28,-37,28,-64,89,18,-116,-127,-61,-119,-45,-102,-72,-115,-120,-10,42,-36,-16,43,-65,13,-2,10,54,-101,36,47,115,25,69,8,-80,14,67,-105,-27,73,-2,46,-28,-7,38,-41,36,11,102,-19,21,63, 
  /* [21][0][][] */ -7,-39,4,20,-5,0,-36,48,74,-53,-14,-21,30,38,50,14,-66,29,-68,-30,52,-2,27,-30,-24,-57,61,-51,-10,22,49,8,-50,-7,-14,-31,-7,-103,-14,115,88,18,-25,3,-44,43,-10,2,55,127,-73, 
  /* [22][0][][] */ 28,-67,-15,-72,-77,5,49,6,-32,24,10,-31,-69,51,-89,-6,-47,-39,-27,-59,-4,19,49,70,88,-65,28,-18,95,-27,-44,116,-7,-77,-127,9,55,102,55,2,25,9,-41,5,-76,102,9,-14,12,23,-13, 
  /* [23][0][][] */ -41,-38,85,7,90,-1,-71,-53,-78,-35,-25,13,87,13,-106,-123,42,-9,-105,-18,41,3,83,42,-71,-58,19,62,-1,-82,-23,118,72,-8,-110,-115,2,15,-40,78,-44,-43,-36,-42,-99,110,83,-26,35,-51,-127, 
  /* [24][0][][] */ -60,-25,-127,-9,19,24,34,-48,-57,-46,62,-21,67,24,84,-7,-31,94,-17,25,-93,-34,-5,-46,-19,20,96,-30,19,-43,-36,76,-58,42,92,12,17,-90,-103,99,110,-79,-68,78,-80,-27,74,-74,-44,-26,-111, 
  /* [25][0][][] */ 11,-44,-79,20,82,-39,8,47,-127,20,-55,-5,-25,47,-3,47,23,-36,43,22,12,-20,-35,3,-15,-6,4,45,-39,-37,-36,17,12,-14,7,-1,30,72,65,17,27,-13,37,-5,-32,-1,-38,-3,-6,-43,25, 
  /* [26][0][][] */ -63,-127,32,-17,16,-30,19,27,-45,96,-38,-31,14,45,6,-1,56,57,-94,29,10,-8,18,-3,51,-90,43,86,10,7,-11,-77,-89,-20,50,71,35,-47,4,2,59,8,55,43,61,37,70,-44,72,-104,-29, 
  /* [27][0][][] */ 58,-121,-37,40,-3,-35,-84,-20,60,-55,-25,-7,3,41,58,-34,-121,30,5,30,28,-2,24,-76,-25,-29,121,17,117,-28,-69,50,-105,-19,54,31,22,-116,-88,38,-11,-9,-112,-10,-77,-13,-25,10,-127,-26,-56, 
  /* [28][0][][] */ -51,20,-48,-107,11,28,-6,15,-40,127,-68,-73,-23,8,69,-11,57,-67,39,-46,-23,42,8,0,43,-107,81,9,45,-40,-90,-43,13,5,34,85,-14,93,-28,-8,-54,-7,-117,5,-7,-4,-14,4,27,20,2, 
  /* [29][0][][] */ 28,28,-1,23,14,59,-127,-73,114,-46,58,-12,-18,-19,4,4,-75,12,12,18,86,-36,10,19,4,-2,-52,8,9,68,-99,-36,66,40,23,20,-16,-36,-2,35,-54,5,49,38,39,16,10,22,24,-37,-68, 
  /* [30][0][][] */ 29,-37,-30,3,-53,-11,-17,-80,44,11,-10,64,93,26,53,-21,7,34,127,82,13,-22,-59,-31,43,-3,-1,84,46,-52,-26,-57,-5,111,-24,14,-27,-12,-80,-18,75,-5,7,-34,61,7,25,-3,-37,58,58, 
  /* [31][0][][] */ -63,48,-3,127,2,78,-77,-90,-29,-92,-22,-55,41,-74,-35,-30,-102,-16,-34,4,19,-42,-10,86,15,-79,6,-27,-40,-3,12,-77,70,43,107,25,57,-19,3,93,-54,-65,26,-40,18,30,104,107,9,-63,-72, 
  /* [32][0][][] */ -33,57,50,-27,-9,43,-19,-42,-29,-109,62,-127,-17,-5,-22,-29,-71,-62,-54,-53,-36,-52,-40,46,-30,82,-43,96,48,-54,-28,-23,18,31,46,-26,-68,-15,21,39,78,18,3,-37,39,0,41,9,-18,19,15, 
  /* [33][0][][] */ 49,59,-10,-23,1,27,-2,-15,1,33,-17,-56,-1,-42,-11,24,31,-58,-89,-24,49,54,-32,-10,13,20,-23,-42,60,-54,-9,-28,-96,90,-36,50,-47,23,-11,48,-35,-21,20,-127,24,-21,34,15,17,-9,85, 
  /* [34][0][][] */ -55,9,-17,-26,-22,127,51,-9,-38,-35,31,7,6,35,-45,33,5,-14,-36,57,15,-18,-13,-10,-35,35,-47,33,26,-31,-38,66,32,3,2,-42,-16,-18,-12,-75,-46,-17,-14,47,10,4,28,-6,-67,-12,63, 
  /* [35][0][][] */ 77,3,20,-7,-10,50,28,12,-29,-11,-28,-5,54,26,-41,103,-32,21,-60,-53,-38,-25,-16,26,-36,-12,80,65,32,-64,0,66,11,23,-41,2,-14,14,-26,46,-30,-104,13,-34,23,34,127,-44,25,57,4, 
  /* [36][0][][] */ 27,13,76,-56,68,2,-21,-30,27,-3,-60,-48,45,89,-52,-31,20,45,85,34,35,50,30,-49,-39,21,-21,-6,55,-61,5,89,-7,-62,-87,-31,-51,76,-12,106,41,-51,27,-26,83,0,-81,26,-29,-127,50, 
  /* [37][0][][] */ 35,-2,-22,-44,80,37,29,7,-56,-55,35,99,-60,127,-25,67,-2,-21,-76,-126,-101,-66,40,-51,-75,-52,26,-22,64,19,1,-8,-73,-21,91,109,-50,-43,-112,66,26,-93,21,98,-67,-25,66,62,31,78,-25, 
  /* [38][0][][] */ -25,1,33,15,-64,-16,28,-33,-57,-26,36,-41,-49,38,-41,69,-2,-38,-46,-36,36,-20,-18,32,-17,64,5,-4,5,-127,-69,1,19,-27,-37,-15,-35,12,46,-62,14,47,34,28,-28,-19,-43,3,-63,44,41, 
  /* [39][0][][] */ 71,-81,41,45,-55,56,29,51,11,92,17,-46,-33,-30,-19,-8,84,16,-17,-14,44,70,-94,-4,91,-114,31,57,127,-16,-33,19,-25,18,37,-38,9,25,-45,25,-21,-36,19,72,96,-20,30,-18,31,-45,46, 
  /* [40][0][][] */ -15,13,118,-15,-43,37,-21,-69,-9,12,-31,-39,-12,59,-32,127,-1,-51,-37,-14,29,-52,74,18,-126,-59,121,28,-61,-61,22,-17,82,-22,-14,7,89,-41,-15,19,4,45,22,28,-19,-55,-65,47,15,-61,28, 
  /* [41][0][][] */ -25,-29,-49,-11,-27,-34,12,4,-50,22,-15,-17,-1,-2,2,19,76,-51,11,-80,64,-56,52,10,-91,127,-29,-24,-27,17,-39,32,-30,7,-4,-31,-29,-57,104,-22,-15,50,-30,12,-3,69,34,-27,-27,-4,1, 
  /* [42][0][][] */ -30,20,-6,2,-58,-46,105,-8,47,-26,-39,-92,-5,-29,23,21,-21,-4,24,45,30,4,-47,24,-28,1,34,-8,21,-32,94,-21,27,10,32,47,-15,21,127,-22,-35,33,-31,-66,-39,46,-14,5,-24,7,-17, 
  /* [43][0][][] */ 39,-42,-57,40,34,-62,44,11,-7,38,14,-127,-19,9,63,30,-72,-43,-9,-65,-74,122,35,36,61,17,13,6,-29,7,-19,-61,7,58,-87,-11,-68,22,-54,-30,-19,-27,7,44,-43,35,-28,19,-66,27,93, 
  /* [44][0][][] */ -22,127,-8,11,-23,67,27,-40,-25,25,51,-39,110,-35,-88,61,45,-20,37,49,-72,-74,55,11,-77,-31,22,44,-26,91,-38,19,-3,32,-6,65,-71,-81,-18,-66,-23,82,37,-70,-31,-37,36,23,27,35,13, 
  /* [45][0][][] */ -30,13,75,-32,-46,68,-16,-12,-2,-25,17,36,33,-27,5,-13,-17,7,-10,42,24,9,35,-7,64,-70,77,-52,84,51,57,-63,-64,-72,-50,2,9,-8,-127,-50,0,-17,-15,-40,104,-24,-16,-45,50,-38,-11, 
  /* [46][0][][] */ -125,6,100,-50,46,-46,118,12,-34,-12,-34,-8,10,59,15,127,66,59,-5,-65,-117,52,-119,-118,-87,-58,-89,58,-16,122,-65,2,39,6,12,-45,32,-28,87,32,-41,65,94,-56,11,-7,40,-47,-6,-101,-53, 
  /* [47][0][][] */ -23,-4,26,12,-9,-38,90,-49,26,-24,-24,-48,-51,61,127,-46,-10,-32,52,69,21,-9,72,-34,-15,31,-13,53,-38,38,8,-71,26,61,-13,-15,-19,-41,-25,-14,36,52,-28,-19,6,10,-15,-27,51,28,-19, 
  /* [48][0][][] */ -54,-89,90,67,46,33,65,-2,27,-43,4,12,2,12,-77,-70,-50,56,-69,-22,39,-89,-72,-30,44,-12,-69,-25,-120,-80,-31,7,84,47,23,-11,57,1,-97,120,-67,32,13,-28,127,32,-40,94,-62,54,39, 
  /* [49][0][][] */ -15,71,-16,-82,33,49,-56,26,-44,-96,10,12,-43,18,-60,13,-26,-49,-14,8,9,-41,52,64,23,-19,-27,53,22,-12,40,-9,95,-2,79,43,-13,69,47,-67,20,127,-43,16,-9,40,18,-87,-7,-58,-18, 
  /* [50][0][][] */ 54,33,30,-1,56,-69,111,-11,-62,23,-70,0,25,-58,-40,-35,44,61,-47,-49,88,7,-44,-86,26,-105,-8,35,47,45,-3,-17,8,-54,-71,50,19,3,75,54,35,-127,54,45,40,-49,69,123,-5,-47,-17, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant40_scale = { 51, { 0.0023389596026390791, 0.0021035310346633196, 0.0028268604073673487, 0.0044502210803329945, 0.0032782531343400478, 0.0036199877504259348, 0.0021884231828153133, 0.0013262358261272311, 0.0041645294986665249, 0.0024181106127798557, 0.0023317518644034863, 0.0027893653605133295, 0.0024277314078062773, 0.002578862477093935, 0.0023256337735801935, 0.0033253191504627466, 0.0021389501634985209, 0.0021904711611568928, 0.0021394174546003342, 0.0020099503453820944, 0.0015511879464611411, 0.0021567882504314184, 0.0036248359829187393, 0.0013890496920794249, 0.0017556275706738234, 0.0041256658732891083, 0.0038286594208329916, 0.0019608906004577875, 0.0030911772046238184, 0.0023827864788472652, 0.0019442394841462374, 0.0021241814829409122, 0.0021412952337414026, 0.0032604525331407785, 0.0038464048411697149, 0.0032997301314026117, 0.0028231823816895485, 0.0021535954438149929, 0.0025792112573981285, 0.0035835925955325365, 0.0038321679458022118, 0.0038521967362612486, 0.0029156939126551151, 0.0025244983844459057, 0.0016113894525915384, 0.0018617341993376613, 0.0017881159437820315, 0.002975712064653635, 0.0031013877596706152, 0.0030730902217328548, 0.0020248701330274343, } };
const TfArray<51, int> quant40_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[51] = { 11802, 16813, 10263, 9637, 10976, -1310, 9495, -3167, -11369, 2024, 8707, 10307, 6000, 694, 5350, -4416, 4943, -2852, -1979, 9367, 14856, 5957, 1660, 26883, 13922, -402, -6826, 17837, 1994, 2439, -1404, 10364, 14870, 7450, 3958, -899, -2317, 3122, 13078, -12855, -1778, 6487, 743, 9000, 9410, 11831, 5611, -2949, -2443, -2727, 1194, };
const TfArray<1, int> tensor_dimension41 = { 1, { 51 } };
const TfArray<51, float> quant41_scale = { 51, { 5.5034342949511483e-05, 4.9494847189635038e-05, 6.6514367063064128e-05, 0.0001047110854415223, 7.7135366154834628e-05, 8.5176186985336244e-05, 5.1492312195478007e-05, 3.12055490212515e-05, 9.7988930065184832e-05, 5.6896722526289523e-05, 5.4864751291461289e-05, 6.5632128098513931e-05, 5.7123092119581997e-05, 6.0679118178086355e-05, 5.472079647006467e-05, 7.8242803283501416e-05, 5.0328239012742415e-05, 5.1540497224777937e-05, 5.0339236622676253e-05, 4.7292949602706358e-05, 3.6498538975138217e-05, 5.07479599036742e-05, 8.5290259448811412e-05, 3.2683521567378193e-05, 4.1308885556645691e-05, 9.7074494988191873e-05, 9.0086105046793818e-05, 4.6138604375300929e-05, 7.2733579145278782e-05, 5.60655644221697e-05, 4.5746812247671187e-05, 4.9980742915067822e-05, 5.0383419875288382e-05, 7.6716532930731773e-05, 9.0503643150441349e-05, 7.7640710514970124e-05, 6.6427819547243416e-05, 5.0672835641307756e-05, 6.0687325458275154e-05, 8.4319828602019697e-05, 9.0168658061884344e-05, 9.0639921836555004e-05, 6.8604560510721058e-05, 5.9399964811746031e-05, 3.7915047869319096e-05, 4.38055103586521e-05, 4.2073315853485838e-05, 7.0016758400015533e-05, 7.2973831265699118e-05, 7.2308008384425193e-05, 4.7644003643654287e-05, } };
const TfArray<51, int> quant41_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*51] = { 
  /* [0][0][][] */ 27,-45,127,127,7,-95,48,25,-33,-127,0,-61,-12,-74,127,127,46,127,75,35,16,60,-54,-16,-73,125,-38,-40,127,48,53,-6,94,68,41,55,-3,29,-12,-47,127,-77,-13,-52,-35,-25,-64,-74,5,50,49, -10,-23,46,-38,16,-35,6,-52,24,-122,127,-25,-34,-29,-55,-40,40,64,-49,-54,-84,27,-44,-15,-72,4,-3,14,81,51,-79,6,23,37,16,-15,123,-7,7,127,40,34,11,112,-20,-127,78,111,-9,39,-33, -50,-26,8,-33,48,1,-37,-28,-52,-125,35,118,40,-30,-61,16,37,64,-127,-51,-38,50,-59,-34,39,-127,-50,-4,-49,-20,6,127,-62,-29,-20,-97,-92,-15,0,10,-18,23,-4,-83,1,-125,127,127,-31,-55,-127, 
  /* [0][1][][] */ 127,-7,39,38,118,-13,72,89,127,-116,-55,28,127,127,-31,34,42,30,110,127,-127,-91,-28,-17,127,109,127,2,83,-94,16,-26,28,127,127,-33,-127,111,106,-20,109,-41,-109,-72,17,79,-73,-54,54,7,-107, 102,127,-37,68,-9,-14,-21,-83,-20,22,99,75,20,-55,-80,-37,45,6,-36,-51,3,-102,-35,-116,-34,-78,-15,3,-73,81,-77,19,78,15,-38,100,-95,-3,-68,4,-31,127,95,127,59,56,-76,-19,8,127,-83, -111,-28,-63,-27,94,-19,3,92,53,-122,97,100,1,33,-77,32,6,-101,-20,-58,-99,-125,127,-86,-112,-83,-26,-1,41,-12,-47,-1,-127,-23,-42,-29,-118,-29,-50,-17,-58,-59,48,13,7,81,116,-64,108,-20,-12, 
  /* [0][2][][] */ 45,91,-8,55,127,127,-43,-127,-1,-93,-25,-8,-6,94,-95,-85,46,-102,-59,39,-50,-4,-37,15,84,-29,58,-17,39,13,-127,-40,-83,-29,-8,10,-112,-39,-127,45,13,-21,127,-44,-76,-80,-82,-8,-88,11,22, -11,-108,57,-23,18,26,-43,105,-53,-99,-62,127,-18,-62,12,-44,127,-76,30,25,-96,127,48,97,43,-8,-52,127,-24,127,74,-40,-72,65,-31,-59,-68,127,29,-20,75,95,-82,84,-127,-59,-32,-27,-40,-20,-77, 40,-30,15,-78,-78,98,127,-91,47,-79,24,82,-92,75,-29,-24,-36,-117,-54,-46,21,-35,9,127,6,-74,-44,-14,-12,-23,-5,10,51,-17,-30,127,55,-17,98,88,2,17,85,-102,-120,-39,20,-2,127,-29,-6, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant42_scale = { 51, { 0.0070694442838430405, 0.0094027463346719742, 0.0097335716709494591, 0.0071790255606174469, 0.0063484697602689266, 0.007116410881280899, 0.012831571511924267, 0.010839907452464104, 0.0089381085708737373, 0.0051349010318517685, 0.0065785371698439121, 0.00621049664914608, 0.010991280898451805, 0.0069025028496980667, 0.0084554078057408333, 0.00884217768907547, 0.014584101736545563, 0.0068125794641673565, 0.0082081686705350876, 0.007870909757912159, 0.011195500381290913, 0.010222337208688259, 0.0084066158160567284, 0.01142792496830225, 0.0095129441469907761, 0.0058515295386314392, 0.0090855704620480537, 0.014844154939055443, 0.0057190009392797947, 0.0087157506495714188, 0.009993353858590126, 0.013582585379481316, 0.0094658471643924713, 0.0093480274081230164, 0.0088371355086565018, 0.0081999292597174644, 0.0049035507254302502, 0.01115794200450182, 0.014293639920651913, 0.0075303572230041027, 0.0061889374628663063, 0.0054330844432115555, 0.01078452356159687, 0.0050467117689549923, 0.012262727133929729, 0.010078007355332375, 0.0080410884693264961, 0.0080540189519524574, 0.0082421842962503433, 0.0091730989515781403, 0.0091912988573312759, } };
const TfArray<51, int> quant42_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[51] = { -4352, 168, 231, -548, -3585, -22, -1104, -781, -729, 12509, -419, -4548, -1401, 991, 4574, 2346, -3527, 2191, 585, -195, 5340, 4250, 2726, 903, 2686, -721, -473, -1500, -2902, -4391, 4108, -1267, 1390, -4569, 760, -355, 6760, -1566, 2024, -2248, -3553, -573, 498, -2387, 5208, 4525, 6590, 257, -801, -827, 5569, };
const TfArray<1, int> tensor_dimension43 = { 1, { 51 } };
const TfArray<51, float> quant43_scale = { 51, { 0.0001663398725213483, 0.00022124109091237187, 0.0002290252159582451, 0.00016891825362108648, 0.00014937575906515121, 0.0001674449595157057, 0.00030191932455636561, 0.00025505665689706802, 0.00021030844072811306, 0.00012082120520062745, 0.00015478911518584937, 0.00014612932864110917, 0.00025861838366836309, 0.00016241183038800955, 0.00019895077275577933, 0.00020805124950129539, 0.00034315534867346287, 0.00016029599646572024, 0.00019313338270876557, 0.00018519787408877164, 0.00026342354249209166, 0.00024052558001130819, 0.00019780272850766778, 0.00026889235596172512, 0.00022383398027159274, 0.00013768304779659957, 0.00021377812663558871, 0.00034927425440400839, 0.00013456473243422806, 0.00020507648878265172, 0.00023513774794992059, 0.0003195902390871197, 0.00022272582282312214, 0.00021995359566062689, 0.00020793260773643851, 0.00019293952209409326, 0.00011537766840774566, 0.00026253980468027294, 0.00033632095437496901, 0.00017718487652018666, 0.00014562206342816353, 0.00012783728016074747, 0.00025375350378453732, 0.00011874616029672325, 0.00028853476396761835, 0.00023712958500254899, 0.00018920208094641566, 0.00018950633239001036, 0.00019393375259824097, 0.00021583763009402901, 0.00021626586385536939, } };
const TfArray<51, int> quant43_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[51*1*1*51] = { 
  /* [0][0][][] */ -44,56,64,-22,8,40,-36,4,47,-33,-127,45,53,-6,8,85,-6,70,4,53,27,-15,74,-88,-1,-20,-16,102,13,44,-53,-59,-14,22,32,23,32,40,12,-19,-12,-57,32,-70,-18,-12,-13,25,-58,-48,-37, 
  /* [1][0][][] */ -78,-2,-45,-66,-44,81,-7,-77,47,-13,127,0,-35,-72,-8,-49,45,-127,-20,-32,-53,-21,-65,45,0,-1,5,-51,-57,-14,8,15,-103,-56,-7,23,15,-7,-43,1,-122,28,47,45,62,-26,-6,67,-17,-26,-23, 
  /* [2][0][][] */ -12,69,-87,-83,-127,-80,-78,6,32,17,-80,-65,21,0,43,-47,-16,-25,-49,-82,-54,44,-70,-41,-84,-119,-67,-52,-117,-10,-27,56,-40,-102,-43,20,62,-81,-53,29,-30,6,16,31,30,-23,106,10,-30,-4,0, 
  /* [3][0][][] */ -43,69,-42,-50,29,-43,32,68,-6,-31,-95,-45,-4,-14,-29,-64,7,-17,-6,3,18,-29,77,-80,2,27,-56,-2,32,33,-59,6,-3,-30,69,-2,-125,8,22,-81,47,-58,11,-21,59,32,-60,42,-43,-12,127, 
  /* [4][0][][] */ -88,48,-3,21,29,-127,-31,54,20,22,-12,30,-43,68,59,52,-69,42,-52,95,7,-81,11,36,91,-47,-42,19,7,35,66,3,88,99,14,6,58,-59,59,-53,-7,8,-114,-32,7,22,51,49,44,-40,-79, 
  /* [5][0][][] */ 74,47,13,52,43,-13,-94,-48,-25,-75,52,-112,20,32,-114,-43,51,21,53,68,16,25,2,103,6,51,-1,39,88,64,61,125,-38,-95,103,-79,-9,111,-21,-46,-2,10,-31,-31,11,-88,-79,127,-75,-6,4, 
  /* [6][0][][] */ 104,-4,-46,29,3,27,-9,-77,-23,-45,-87,53,-112,-105,-112,-62,-22,35,-120,-75,-50,-91,-11,4,-17,-70,-80,-32,-6,-57,73,50,92,39,-113,25,28,-103,-74,72,34,114,15,73,-127,14,63,-61,-2,-117,-25, 
  /* [7][0][][] */ -16,41,64,24,96,-11,31,-24,-74,-26,-35,127,-31,-93,25,62,-67,-115,-13,31,0,38,-113,-39,32,117,9,30,3,-81,-5,-14,-50,-8,-107,-14,-33,63,71,-64,20,35,-53,-61,-16,25,-95,-12,-4,-21,9, 
  /* [8][0][][] */ 31,-10,13,90,27,-25,-13,76,-31,-11,-39,49,58,11,-17,-81,18,-127,61,-20,-1,9,8,30,41,28,-94,-18,-89,-3,-31,84,90,-97,-16,87,94,-71,-21,-25,-65,-7,49,-80,-37,48,-2,-17,63,36,-24, 
  /* [9][0][][] */ 6,-37,-12,-13,44,12,-4,-2,17,-45,-18,52,127,8,-87,-1,42,-55,-41,46,40,-30,77,23,35,-82,33,64,28,55,-15,-23,-11,-29,-28,-34,-56,73,-10,-66,-26,90,-9,-18,-31,-21,-30,-120,-59,-65,-36, 
  /* [10][0][][] */ 6,4,-20,-41,23,19,33,-49,-57,53,2,-6,-11,65,27,-10,-82,45,-37,28,-47,16,11,-89,-50,-38,-127,34,2,-28,-39,46,-68,-84,-3,23,36,-26,-67,79,44,-16,26,-63,102,-34,27,-26,-74,-20,30, 
  /* [11][0][][] */ 53,-7,3,99,45,55,56,45,123,20,-2,65,-25,-24,-73,38,-62,-67,2,41,-53,70,-39,17,-60,-48,-31,-3,40,-38,39,-64,19,31,-24,-46,41,-127,-21,8,51,-15,39,-66,7,-1,5,-22,-35,20,52, 
  /* [12][0][][] */ -108,2,127,30,59,-5,67,65,-39,19,94,13,48,-55,50,-101,30,-36,-26,68,-17,49,124,95,41,-40,-22,-15,-35,9,20,-65,-5,49,-82,-77,10,-116,7,51,99,-9,-25,52,39,-86,79,63,68,-87,-20, 
  /* [13][0][][] */ -34,-50,7,-2,119,-14,-95,26,49,-39,12,-27,46,-69,-12,67,-77,7,-66,28,0,-63,36,-79,-36,-65,-57,42,39,-59,57,-81,1,-11,31,-39,-33,-23,-8,-32,64,14,-11,-127,-12,19,-42,-41,-49,-66,3, 
  /* [14][0][][] */ 17,-26,65,-101,-109,-121,-44,-66,53,19,86,-28,56,67,-20,18,-18,-108,-26,75,-26,-75,127,52,124,-70,118,-31,-47,123,48,-101,66,-5,6,23,80,-31,15,-86,-13,37,0,-28,73,-42,-77,-109,22,-46,-18, 
  /* [15][0][][] */ -28,2,-4,-36,-50,-48,-12,-1,51,-45,-79,-29,-47,-50,-9,-38,52,42,-33,-47,63,-16,1,15,-19,-40,-127,-11,-23,19,33,19,-30,-41,-31,35,-19,-79,-7,5,-3,-10,9,45,-46,57,102,2,-25,36,46, 
  /* [16][0][][] */ -50,46,-76,-23,53,31,-53,-1,-17,-7,14,9,-37,32,-57,-3,69,-31,74,-58,-122,0,57,30,-58,30,-20,18,47,-20,-8,-76,-28,-60,-28,-125,4,81,-4,-9,127,19,-32,-8,-3,2,-96,-26,-124,61,-15, 
  /* [17][0][][] */ 70,72,8,-53,-72,63,-6,-5,18,-64,-32,-35,15,66,43,6,14,50,27,58,12,-54,-65,-55,12,7,-68,8,58,31,-16,-47,-54,-51,57,-64,-28,52,36,-47,41,-127,35,-83,-9,29,-22,-53,-45,52,-3, 
  /* [18][0][][] */ 51,14,34,-21,49,-27,64,4,-1,2,-87,-98,-13,-38,-4,64,64,30,-17,34,45,83,-78,-32,3,-6,-17,32,-41,29,-127,-42,-22,-40,48,-60,-13,-9,80,-119,-39,-81,24,-6,-58,21,81,-34,20,-49,-19, 
  /* [19][0][][] */ 70,-38,17,47,-68,103,29,-22,47,28,-5,-9,10,-38,68,84,10,6,19,-8,-51,-15,0,68,36,24,78,26,11,-62,0,-127,0,27,66,69,-26,59,-8,-40,-64,-86,-15,-87,41,-27,-62,-78,-55,-25,-40, 
  /* [20][0][][] */ -39,-9,-13,-20,4,53,-46,12,4,28,28,2,-15,-127,-35,113,-11,40,11,-51,49,-88,-24,-69,-49,25,62,71,43,26,17,31,-11,74,28,85,4,39,-46,-75,6,-20,59,90,1,-54,20,5,-70,-90,-94, 
  /* [21][0][][] */ -16,21,-6,58,-43,-118,-88,87,3,-6,44,-22,-56,-63,-84,-127,23,-30,-108,23,7,78,29,-40,-27,-20,-34,10,-36,30,-65,33,21,-83,32,9,112,-38,25,59,28,-18,-68,70,-77,45,60,102,-74,25,30, 
  /* [22][0][][] */ 52,-28,-4,-10,14,27,-50,126,72,-16,76,69,-53,19,15,64,-63,25,-15,77,9,14,-15,-75,45,85,-75,-39,77,4,83,35,54,9,-89,-38,-101,63,-6,-38,-5,-43,-39,-46,46,-45,48,9,38,24,127, 
  /* [23][0][][] */ 43,-46,56,-24,48,-9,-127,55,23,31,62,3,-31,17,-35,-17,-15,-9,10,4,-33,22,59,-72,-75,0,-27,-65,5,-55,12,83,-59,-42,45,-28,6,-52,-83,-3,-20,-13,24,17,56,80,-18,30,-29,38,97, 
  /* [24][0][][] */ 15,36,26,77,80,75,-68,31,27,-20,-38,54,8,-50,-34,-3,-21,43,-41,7,26,80,80,-7,-14,21,32,71,-19,56,-1,-113,-9,-2,-77,86,64,-70,127,59,-11,-71,-36,30,-60,-34,-51,5,32,-11,-31, 
  /* [25][0][][] */ -7,-78,90,6,-72,30,35,-33,-26,-24,53,-52,31,-39,25,42,-41,31,-108,59,32,-11,-65,-36,-93,87,-48,6,-57,51,-34,-1,-72,38,82,-17,2,-17,-19,5,-27,-127,84,-53,-26,80,-32,-25,-34,-39,-26, 
  /* [26][0][][] */ -3,-14,-48,-12,28,-62,13,-8,-127,-13,67,59,9,102,28,-4,-53,34,-22,9,-37,-57,5,-11,-15,-30,-27,-14,81,10,95,115,28,-55,-63,-8,-49,19,-36,-20,2,14,30,-53,69,11,-2,-32,-35,16,-20, 
  /* [27][0][][] */ -14,-56,-25,-113,-8,98,11,-84,30,-15,-86,27,18,-46,0,-22,-42,22,-10,-18,-12,66,33,42,82,3,-66,96,16,66,-45,-6,-33,30,-35,-8,82,-13,127,-76,-42,-32,-83,-26,-93,-8,-73,44,-44,-47,-82, 
  /* [28][0][][] */ -36,-33,32,85,33,32,-16,-22,-71,-54,-26,28,-127,37,25,-13,-83,6,35,-68,27,53,-75,-7,-77,35,-12,104,55,47,34,10,6,-3,23,14,34,25,-62,5,-6,-12,17,-12,-47,52,19,20,7,47,7, 
  /* [29][0][][] */ -48,-24,127,6,4,34,-85,21,-33,-32,-58,114,14,-57,25,-47,75,2,-55,48,-59,51,20,12,32,47,-40,51,-76,44,-50,14,-47,-37,-9,1,-22,35,36,92,80,-4,-96,-11,-31,10,-48,-58,-100,37,-10, 
  /* [30][0][][] */ -23,-47,7,-28,-18,-39,14,21,35,70,-89,-4,22,41,-1,27,127,-11,25,18,27,-3,73,4,-17,41,-35,-85,-63,2,57,-36,32,-33,32,-62,69,-14,70,-31,-66,19,-83,-10,-25,-27,45,-63,-5,46,-49, 
  /* [31][0][][] */ 25,-52,-19,-22,-30,53,-39,-48,2,35,-66,27,47,-30,-45,-102,-3,17,127,-28,-69,-26,-18,-20,-79,71,75,65,-22,56,-12,-30,-73,-7,52,96,6,-16,-63,-31,79,-34,-14,22,-63,44,-74,16,31,-70,-15, 
  /* [32][0][][] */ -91,78,60,14,-57,10,-42,31,-41,22,19,27,-32,5,-64,65,-24,-63,20,-99,-70,26,16,-13,127,-59,40,-90,-96,-39,11,-114,-2,-78,34,-25,34,10,33,11,-83,59,123,-60,-17,10,-63,-93,102,36,-11, 
  /* [33][0][][] */ -56,46,-21,13,64,75,-77,-38,11,8,-8,-22,-17,-57,-15,-8,5,2,-26,-28,34,94,-57,36,127,-41,-98,52,48,22,37,-57,-13,31,-54,18,-87,39,36,2,63,-61,9,71,-61,-61,-20,-9,51,-20,-15, 
  /* [34][0][][] */ -3,45,-9,13,4,31,-2,20,11,10,94,70,-9,4,5,25,-67,43,-14,22,54,25,-7,-2,59,-26,-66,-43,-51,-12,-4,27,32,49,74,-58,-38,-17,34,-6,89,-127,-30,-29,-14,-36,-37,-63,-101,5,2, 
  /* [35][0][][] */ -57,66,-65,51,33,-12,-65,0,-21,40,20,-30,-62,43,9,28,-70,54,60,-2,0,-14,84,31,11,-10,-7,-46,101,9,-23,-78,55,2,12,-29,15,97,38,-29,4,-26,-34,38,51,-47,-112,-25,-127,-26,-30, 
  /* [36][0][][] */ 40,11,-45,65,-29,13,-127,-74,4,17,-47,8,-4,34,14,-40,-12,13,-50,107,-54,85,15,37,-5,-59,63,-74,23,-17,-12,-61,75,-103,99,56,24,68,79,-102,4,59,37,-65,-34,92,-9,-76,-36,76,-34, 
  /* [37][0][][] */ 58,-21,-52,-13,-46,-1,42,24,10,12,18,28,-30,-5,8,-81,-24,-8,10,-28,-39,-60,-12,25,-40,-91,-79,-9,-5,-39,-59,53,-61,-75,-84,-17,29,4,38,-7,62,-24,19,-44,22,-36,127,-64,15,-29,28, 
  /* [38][0][][] */ -19,-65,127,21,-14,3,-27,-99,43,-65,12,8,-18,36,-1,24,-40,-27,22,-7,84,31,-38,-60,21,43,65,-107,14,-95,70,-42,-54,21,-108,2,-9,13,-32,-75,52,71,-34,-28,-53,84,12,16,56,-25,51, 
  /* [39][0][][] */ 52,11,-43,-87,-56,20,-12,37,-63,127,20,-27,12,-98,13,-41,57,-45,-3,26,-8,28,31,-29,-47,-19,-53,39,63,-3,12,-43,-30,22,-68,54,-16,-51,-1,-71,6,-2,4,-15,-69,-41,-26,-10,12,-25,-83, 
  /* [40][0][][] */ 25,-48,-30,-46,35,-34,-2,13,15,-29,25,-20,27,17,-59,3,3,-79,24,36,-69,-70,9,24,18,53,9,20,2,6,7,-1,-61,-22,74,-23,-46,-46,-49,-40,-54,81,-44,-8,-127,56,-7,-3,3,19,-1, 
  /* [41][0][][] */ 40,-49,-18,-35,-92,-51,-11,-90,-65,-38,-45,-39,-11,-34,77,-117,127,-75,-91,18,28,50,-47,12,10,-47,67,-34,-65,73,11,65,-25,-35,11,-1,5,-7,-62,0,-36,-29,66,12,-15,-25,38,-50,-92,-3,1, 
  /* [42][0][][] */ 16,50,-31,31,30,-10,-33,27,-10,13,41,27,13,22,65,9,-45,6,127,-22,60,-39,33,18,2,4,-7,-25,-28,-53,17,-9,24,24,79,-27,19,1,94,-21,16,-73,-22,-54,43,-1,-7,-56,-65,-50,39, 
  /* [43][0][][] */ -127,-57,-66,-34,-9,71,-93,51,26,-61,-27,4,25,-35,-4,18,12,25,0,-94,22,-13,-33,-46,6,-75,32,-61,-15,59,87,52,28,-24,-76,28,-76,8,-68,19,11,-91,89,-5,28,58,-76,-76,11,-79,42, 
  /* [44][0][][] */ 50,-114,-36,-60,-2,-10,-40,-38,9,80,-35,-78,-69,-11,124,-72,-48,-26,35,-58,-49,-34,10,88,-39,51,-79,-4,-124,-32,-83,-32,-37,4,70,-61,50,-127,-13,38,43,3,95,14,-60,-41,-30,13,44,69,-67, 
  /* [45][0][][] */ -13,11,-36,-12,-69,-104,22,-50,54,71,20,14,87,78,10,-16,58,7,-18,-98,102,32,-15,-87,9,-37,-41,-3,29,-10,-80,-14,31,-11,14,-92,54,42,35,127,-38,9,-54,-114,28,-3,63,-37,-37,-24,20, 
  /* [46][0][][] */ -23,-86,-12,-11,-4,3,32,-33,1,-43,30,18,-39,24,23,127,21,70,-80,-82,57,122,76,-9,-31,-69,36,67,-3,-114,39,37,-3,92,-15,-41,89,-34,-22,-34,-70,88,97,-23,50,98,-14,-77,-114,-101,-86, 
  /* [47][0][][] */ -22,-112,6,-23,4,-24,-99,16,-6,-63,-12,53,-62,3,-15,73,-36,54,-3,39,40,15,-71,47,-24,83,-7,80,-52,-38,65,32,-11,-54,-35,0,-56,12,-8,44,29,-4,-54,31,-45,3,27,80,-127,40,38, 
  /* [48][0][][] */ -7,43,-2,-11,10,98,-38,-58,-19,-4,17,100,17,-44,5,70,-15,-37,11,99,46,24,-75,-19,12,22,16,54,127,-40,58,78,-62,-4,-44,-44,-57,-15,-52,15,-62,-79,78,36,50,-41,-43,-8,-11,-80,44, 
  /* [49][0][][] */ 56,-9,59,-5,-127,-66,-87,118,51,-12,-18,73,35,3,-15,-31,-94,-46,-105,-90,27,-33,10,-13,69,-43,32,-70,-8,-87,2,0,-33,19,37,26,13,61,24,-45,-78,-23,-17,49,-41,44,28,-14,50,-11,-13, 
  /* [50][0][][] */ 21,41,31,21,35,12,-25,9,31,31,-32,63,44,6,127,-35,42,-42,5,62,-2,-47,-17,1,28,-8,66,-1,6,-92,5,-3,16,53,5,40,44,-25,-28,3,2,-75,14,-8,-14,5,3,29,-48,-19,44, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant44_scale = { 51, { 0.0018988146912306547, 0.0028046593070030212, 0.0017468906007707119, 0.0026804788503795862, 0.0038717649877071381, 0.0016279739793390036, 0.0016149324364960194, 0.0028933123685419559, 0.0029284583870321512, 0.0026993998326361179, 0.0056776157580316067, 0.0042405091226100922, 0.0036123939789831638, 0.0038613639771938324, 0.002328796312212944, 0.0022216145880520344, 0.0030711267609149218, 0.0027345274575054646, 0.0031199259683489799, 0.0017707353690639138, 0.003527503227815032, 0.0017792450962588191, 0.0030395928770303726, 0.0036239440087229013, 0.0026270439848303795, 0.0060565765015780926, 0.0044550183229148388, 0.0040865475311875343, 0.0031277074012905359, 0.0027587423101067543, 0.0039075030945241451, 0.0030382161494344473, 0.0029069958254694939, 0.0035585074219852686, 0.0038285292685031891, 0.0028035517316311598, 0.0036847088485956192, 0.0026937774382531643, 0.0039558466523885727, 0.0034877464640885592, 0.0046965279616415501, 0.002260642359033227, 0.0029528879094868898, 0.0020764046348631382, 0.0024403075221925974, 0.0036776680499315262, 0.00278828339651227, 0.003071025712415576, 0.0025186308193951845, 0.0032327254302799702, 0.004559970460832119, } };
const TfArray<51, int> quant44_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int32_t tensor_data45[51] = { 3875, 11834, 29039, 10983, -6439, -347, 29047, 7557, 5979, 10084, 5672, -2252, -8637, 15973, 625, 15412, 9912, 7071, 6331, 8767, -1040, 13892, -9527, 3010, -120, 8480, -2407, 11353, -3219, 6317, -3698, 6074, 8496, 3102, -861, -14, -4371, 14085, -63, 4596, 10480, 21043, -5660, 23346, 17181, 1507, -2089, 4128, -1163, 10779, -4511, };
const TfArray<1, int> tensor_dimension45 = { 1, { 51 } };
const TfArray<51, float> quant45_scale = { 51, { 4.4677992264041677e-05, 6.5991982410196215e-05, 4.1103310650214553e-05, 6.3070088799577206e-05, 9.1100351710338145e-05, 3.8305272028082982e-05, 3.7998412153683603e-05, 6.807794125052169e-05, 6.8904904765076935e-05, 6.3515290094073862e-05, 0.00013359096192289144, 9.9776683782692999e-05, 8.4997504018247128e-05, 9.0855624875985086e-05, 5.4795207688584924e-05, 5.2273284381953999e-05, 7.2261806053575128e-05, 6.4341824327129871e-05, 7.3410024924669415e-05, 4.1664363379823044e-05, 8.3000079030171037e-05, 4.1864590457407758e-05, 7.1519832999911159e-05, 8.5269275587052107e-05, 6.181280332384631e-05, 0.00014250769163481891, 0.00010482396464794874, 9.6154064522124827e-05, 7.3593117122072726e-05, 6.4911582740023732e-05, 9.1941248683724552e-05, 7.1487440436612815e-05, 6.8399902374949306e-05, 8.372958836844191e-05, 9.0083041868638247e-05, 6.5965927205979824e-05, 8.6699030362069607e-05, 6.3382998632732779e-05, 9.3078750069253147e-05, 8.2064623711630702e-05, 0.00011050654575228691, 5.3191586630418897e-05, 6.9479719968512654e-05, 4.8856581997824833e-05, 5.741900167777203e-05, 8.6533364083152264e-05, 6.5606669522821903e-05, 7.225942681543529e-05, 5.9261903516016901e-05, 7.6064126915298402e-05, 0.0001072934246622026, } };
const TfArray<51, int> quant45_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(16) int8_t tensor_data46[1*3*3*51] = { 
  /* [0][0][][] */ 37,33,72,64,-100,36,101,-40,125,54,-11,-114,20,14,81,-57,-21,-68,-21,-10,2,-25,-45,-7,28,-62,98,27,-40,-23,-20,127,-73,-2,10,-62,-115,-70,127,53,-76,-16,59,22,-48,-14,55,-60,12,-65,-127, -63,-14,-6,63,11,-8,10,127,-78,127,-6,-9,109,30,127,66,127,-14,30,-25,68,36,50,-57,41,98,10,55,-79,-66,11,112,-71,-94,100,-49,88,-127,-1,101,-20,-75,118,24,17,28,-54,-68,5,127,26, 57,-19,-38,-57,78,-127,-37,108,-56,74,-50,127,99,-8,-82,-37,-69,104,-5,-51,-26,127,127,4,47,-56,-117,-76,-41,125,-52,-45,3,116,33,47,-79,-92,-96,127,127,-16,-89,127,-47,53,-69,-97,127,5,4, 
  /* [0][1][][] */ 61,127,122,127,-89,13,127,-109,116,14,-17,-46,-2,60,7,4,1,-113,-60,127,-39,-110,22,18,-8,38,127,127,127,97,96,-43,-38,-122,-48,-127,-5,28,51,26,-6,41,11,2,127,-41,127,7,-27,-39,-74, -108,2,-58,-72,44,-49,-21,9,-59,-20,-4,-17,127,127,96,34,-53,-4,80,-39,71,105,-56,-97,-87,127,-13,12,-41,15,56,109,65,-24,-2,-62,81,45,-31,79,13,23,116,-48,-54,13,-64,29,74,94,64, -127,-21,-26,-19,80,4,-43,90,-127,-123,-33,112,74,-29,-56,-2,-5,48,-66,45,-32,15,63,-127,-103,-65,-46,51,53,-77,-13,-46,127,-109,116,75,-51,122,32,24,-24,-34,72,48,52,127,-34,-127,42,85,-20, 
  /* [0][2][][] */ -10,39,-127,7,-16,18,13,46,93,-20,127,-49,-67,80,53,49,-6,-90,52,-24,50,54,-65,121,-126,33,-71,69,-79,54,127,88,-50,6,42,-17,89,-90,94,60,82,127,91,-10,12,-35,116,39,-59,54,-24, -18,10,-11,17,127,-26,23,-69,-68,6,20,-126,-54,55,34,-127,-53,-29,-1,64,-51,116,-22,-30,-27,-39,-21,117,-102,-107,-35,-124,13,29,-16,48,69,-1,-29,103,26,59,127,61,-37,16,-74,-91,71,-44,81, -4,-99,124,14,-44,40,-49,-44,-92,35,32,-64,25,-30,29,65,-47,127,127,-23,127,-29,-72,-99,127,-50,-80,-53,-108,-127,-25,-65,97,-127,127,-104,127,14,85,29,73,12,-52,-15,-45,41,-57,-97,22,51,-39, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant46_scale = { 51, { 0.015004068613052368, 0.0094106299802660942, 0.010496040806174278, 0.0079006953164935112, 0.0070146042853593826, 0.014544527046382427, 0.0088970353826880455, 0.0066213631071150303, 0.0046235928311944008, 0.0079973079264163971, 0.0093121137470006943, 0.0052003669552505016, 0.0050477040931582451, 0.0062039806507527828, 0.0067215231247246265, 0.018046559765934944, 0.0084932679310441017, 0.0060151205398142338, 0.010391290299594402, 0.019414020702242851, 0.0077856793068349361, 0.0075504160486161709, 0.007684007752686739, 0.0058679687790572643, 0.0085861440747976303, 0.0036660891491919756, 0.0059387418441474438, 0.0054246010258793831, 0.0081655150279402733, 0.0064984885975718498, 0.018101843073964119, 0.0061056795530021191, 0.008392837829887867, 0.0046074101701378822, 0.0066677271388471127, 0.011549944989383221, 0.0050009670667350292, 0.015470815822482109, 0.0085605550557374954, 0.011952797882258892, 0.0084616942331194878, 0.0092592239379882812, 0.0054649277590215206, 0.011957176029682159, 0.01231660507619381, 0.010572109371423721, 0.0070981583558022976, 0.0067559676244854927, 0.0077344737946987152, 0.0085201039910316467, 0.0088144717738032341, } };
const TfArray<51, int> quant46_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 3 };
const ALIGN(16) int32_t tensor_data47[51] = { 5099, -3521, 853, 127, -2701, 4175, -2763, -3446, 3939, -102, -1436, 1096, -3522, -993, 1281, 825, 1553, -2954, -1311, 829, 561, -2535, -567, 3034, 2948, -889, 650, -3795, 6172, 5786, -1019, 1805, 630, 7072, -4014, 1450, -695, 4108, -889, -2362, -359, -109, -2629, -3080, 745, -1802, 2028, 8987, -3200, -3074, -2637, };
const TfArray<1, int> tensor_dimension47 = { 1, { 51 } };
const TfArray<51, float> quant47_scale = { 51, { 0.00035303691402077675, 0.00022142659872770309, 0.00024696567561477423, 0.00018589872343000025, 0.00016504951054230332, 0.00034222417161799967, 0.00020934201893396676, 0.00015579677710775286, 0.00010879042383749038, 0.00018817195086739957, 0.00021910856594331563, 0.00012236158363521099, 0.00011876950884470716, 0.00014597602421417832, 0.00015815348888281733, 0.00042462494457140565, 0.00019984159735031426, 0.00014153224765323102, 0.00024450095952488482, 0.00045680050970986485, 0.00018319246009923518, 0.00017765685333870351, 0.00018080018344335258, 0.00013806985225528479, 0.00020202691666781902, 8.626092312624678e-05, 0.00013973510067444295, 0.00012763767153955996, 0.00019212976621929556, 0.00015290561714209616, 0.00042592574027366936, 0.00014366305549629033, 0.00019747854094021022, 0.00010840965114766732, 0.00015688770508859307, 0.00027176341973245144, 0.00011766981333494186, 0.00036401921533979475, 0.00020142483117524534, 0.00028124230448156595, 0.00019909869297407568, 0.00021786410070490092, 0.00012858654372394085, 0.00028134533204138279, 0.00028980246861465275, 0.00024875553208403289, 0.00016701548884157091, 0.00015896394324954599, 0.00018198761972598732, 0.00020047303405590355, 0.00020739933825097978, } };
const TfArray<51, int> quant47_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int8_t tensor_data48[51*1*1*51] = { 
  /* [0][0][][] */ 100,-18,-24,26,-3,-23,24,-15,121,-36,74,-38,85,-43,39,44,56,-10,-88,39,12,-17,-57,127,-14,53,79,24,-50,-50,-93,20,44,50,22,-38,-27,53,-34,-52,-52,-93,42,42,-32,-62,-36,31,15,-26,-7, 
  /* [1][0][][] */ 16,61,-47,26,127,-17,0,-26,-68,50,55,-8,-12,13,44,-21,43,-14,-26,-13,70,44,14,12,26,27,-22,54,6,45,-64,9,-51,-7,44,-82,71,-29,-13,95,-12,-18,2,-14,-26,4,54,58,-14,-75,50, 
  /* [2][0][][] */ -88,-55,-13,46,-31,-55,88,73,-45,-20,64,-13,-45,127,21,-36,22,7,8,-20,10,-39,-17,31,-56,-38,39,43,14,-43,-17,-16,-68,7,41,-90,-20,-65,-19,-17,-34,66,19,-30,-14,-99,-50,-37,-12,-67,39, 
  /* [3][0][][] */ 18,-64,-4,-31,35,-9,79,-28,-41,0,-20,21,-41,-16,-7,-15,11,22,-28,8,48,6,11,2,11,11,0,-30,18,5,9,127,-39,32,-14,-46,-31,-24,28,-3,33,-6,16,24,-39,52,15,-102,3,9,17, 
  /* [4][0][][] */ 3,69,1,-109,16,-12,-81,4,-41,-24,-23,-59,-78,56,-21,-110,23,105,29,20,-52,-61,-56,-103,-40,-55,59,3,17,70,127,40,32,63,-89,53,-41,50,13,96,-32,-27,74,-1,-68,50,44,54,31,-15,28, 
  /* [5][0][][] */ -54,6,27,5,-25,-18,25,-21,-37,27,25,-29,12,24,-35,7,-34,33,-12,-24,13,-27,22,-13,-6,-6,20,-1,-16,22,-37,31,-44,7,29,-13,30,-2,-3,19,-32,-1,127,-2,30,-61,-8,13,-60,66,3, 
  /* [6][0][][] */ 57,5,-12,-1,-61,-23,-18,-63,13,83,44,-56,84,65,127,-25,-34,-42,-4,71,-35,32,14,21,-80,2,5,-3,-7,29,-75,48,53,-1,25,40,24,-49,11,64,22,3,24,-24,-44,67,50,48,52,54,25, 
  /* [7][0][][] */ 14,13,33,-17,2,15,-25,100,17,11,-12,-16,-2,-38,-59,-22,127,-34,30,65,-22,-16,-16,19,85,-119,-8,-38,-31,-2,-16,-33,-65,-65,41,-52,42,-33,-37,18,27,33,-11,52,-15,-55,2,28,-7,13,18, 
  /* [8][0][][] */ -30,28,-53,54,27,41,-5,-10,11,36,-2,-60,-29,9,49,81,-14,-35,-1,-11,-12,-3,-23,18,44,-22,-7,9,44,27,10,127,-45,-29,33,-14,-11,-35,15,44,-48,-48,50,34,12,4,35,-6,29,78,-64, 
  /* [9][0][][] */ -58,-61,-34,6,-31,16,-10,127,-23,-7,26,17,-19,57,-1,78,38,5,-3,-23,-15,-8,-7,-70,37,31,-35,-47,-21,1,-60,-18,33,23,69,-22,8,40,-76,23,11,55,-97,19,32,-48,-32,-26,125,-40,15, 
  /* [10][0][][] */ 3,28,-29,-6,-64,44,19,19,22,-66,5,94,11,-3,-54,-4,22,-46,32,-18,-25,-127,-108,17,39,-42,9,56,-32,-84,92,-16,-57,-33,-28,25,-46,-118,-13,82,-18,80,9,34,6,-19,54,6,-31,-7,22, 
  /* [11][0][][] */ 39,-41,25,-35,-22,82,-44,-18,-20,-5,-39,127,46,49,1,2,37,-21,-43,42,-62,58,9,-73,10,32,28,39,23,56,22,16,32,-6,45,-35,47,-8,-50,83,-17,-44,-99,2,76,50,91,10,-56,48,94, 
  /* [12][0][][] */ -48,96,19,-4,1,49,58,48,-114,11,-22,-11,-98,-44,-80,26,-3,49,-70,-55,16,67,-51,98,-61,41,127,14,-105,-17,-5,-32,21,22,-48,-30,13,28,-28,5,96,5,-25,-22,-37,-45,16,-47,-68,21,-82, 
  /* [13][0][][] */ 11,-6,27,-8,14,28,4,34,-13,55,-12,41,30,-2,-22,1,57,-6,10,-31,-13,-49,-36,-4,-1,-60,17,13,4,-2,19,-38,-11,-28,-61,-23,-4,-55,-72,127,-67,72,-49,-45,-43,-8,16,-37,-10,-9,-47, 
  /* [14][0][][] */ 5,18,-38,9,64,39,74,54,-12,17,47,-18,-38,-16,-19,90,-20,-17,103,24,-21,44,-66,-124,-31,-104,-60,-52,0,44,-17,-28,63,-32,69,30,-33,3,-127,-45,-27,-11,-43,-13,24,32,-101,19,-52,71,-95, 
  /* [15][0][][] */ 38,-87,-4,11,32,4,-127,53,-69,26,-1,62,-67,32,-49,-37,-122,-54,-41,-9,17,-45,-44,47,17,-72,-65,-13,57,-37,-72,3,25,-98,62,-36,-22,18,60,107,34,-76,25,1,-11,-40,-38,-93,99,21,-83, 
  /* [16][0][][] */ -1,-45,-13,-1,96,-30,28,-14,51,12,23,20,-21,13,9,41,21,-4,110,-42,0,-61,31,0,39,30,49,26,60,-7,43,-47,13,16,12,-50,127,-2,-69,2,7,27,54,-2,0,-71,55,-3,1,64,-82, 
  /* [17][0][][] */ 90,-45,0,27,29,58,-13,-16,-23,-24,27,48,47,4,-56,-16,-91,45,-63,38,-127,-10,22,-34,35,13,-65,56,13,-59,-64,-33,-18,-44,-1,-11,-55,34,-86,23,2,33,11,31,26,49,-77,-37,13,-91,-32, 
  /* [18][0][][] */ -9,-47,2,35,-21,-56,-62,-54,-14,-41,50,43,-24,33,49,38,80,-127,45,78,22,-14,-58,41,-10,25,8,4,36,-10,12,34,-13,21,-103,-17,-56,-15,1,6,66,84,-2,60,44,-109,28,-74,71,28,-73, 
  /* [19][0][][] */ 62,9,-12,10,-56,45,5,-3,20,-29,88,-17,-57,33,-14,-27,70,13,0,-24,-20,0,91,14,115,50,30,-36,-15,-49,-78,101,-64,58,-6,1,67,-38,4,59,-127,-69,52,-70,33,-13,73,10,-24,-39,-89, 
  /* [20][0][][] */ -68,55,78,-24,-27,49,-30,29,-49,-47,-85,32,26,-5,-47,-15,71,127,-23,-1,17,-17,-53,53,-68,52,28,59,58,-42,48,-13,57,-13,23,-41,33,-11,71,3,9,-2,-24,95,-3,-17,35,-59,10,13,2, 
  /* [21][0][][] */ 84,-69,-1,45,3,10,21,-10,13,-30,64,-77,-70,-16,63,-19,47,14,18,60,104,62,-72,34,-64,53,-26,1,-90,-93,3,20,32,46,-127,26,67,-29,11,10,12,-63,-75,-37,-9,43,-36,3,2,-4,11, 
  /* [22][0][][] */ 15,13,127,-7,33,-11,60,74,102,-99,-33,5,-31,90,-56,65,45,-41,24,1,69,9,-89,1,115,-19,32,107,2,-78,15,63,50,66,-10,-37,70,-94,-18,-78,-18,-41,-51,39,-69,-101,51,-30,30,51,27, 
  /* [23][0][][] */ 127,62,-48,16,-51,34,-2,-51,-12,-14,-23,14,-71,32,2,-72,-72,-16,-8,-49,0,-18,2,-70,45,-34,47,37,33,-49,101,73,41,-36,25,-3,55,-30,-17,110,33,-22,-33,-51,-6,-80,30,-80,-72,50,40, 
  /* [24][0][][] */ 22,29,-30,8,30,6,-41,-36,-32,-3,-5,-58,-12,52,-8,-14,-41,-19,0,27,-46,4,-51,26,-46,-28,-72,70,-10,25,35,6,2,-42,-4,24,-30,-28,-11,66,6,7,-14,25,-21,-21,20,127,80,-17,71, 
  /* [25][0][][] */ 48,26,-124,-21,65,-66,70,-62,0,64,-10,-25,25,-16,-50,-7,-19,-48,64,91,48,-66,-53,36,14,-13,-117,52,-5,102,-66,-53,-104,97,-26,41,41,-76,32,64,13,127,25,39,-19,-1,-14,104,-42,70,-56, 
  /* [26][0][][] */ -5,20,-50,60,39,56,41,-65,-18,127,34,22,56,40,-4,-14,32,-9,9,7,82,-114,-6,4,-19,55,-28,12,-38,-10,-30,-20,-84,-42,-48,-61,-46,19,45,10,43,-6,29,-35,-11,27,-65,26,21,-57,7, 
  /* [27][0][][] */ 13,-63,65,-38,-40,-27,52,13,-9,33,60,13,20,-3,47,-55,37,-46,-21,50,24,-89,-38,-23,-23,-48,-19,51,-21,18,11,-15,53,34,37,6,-74,-15,-29,127,-63,-81,-36,-23,-18,69,58,27,-12,-24,6, 
  /* [28][0][][] */ -45,-71,18,28,49,-54,86,-15,20,-102,8,6,-9,-41,20,-33,-5,-110,65,-40,54,35,-22,24,26,-26,-40,-49,-37,31,-32,86,-109,-40,-80,-3,-3,-90,-49,3,-25,30,77,-69,58,-63,-17,7,-42,-127,27, 
  /* [29][0][][] */ -86,-19,-5,41,-29,-10,61,-50,30,82,9,60,81,36,127,17,22,-39,-43,-60,-15,13,13,1,-32,-1,-27,-16,33,-76,-18,19,-15,-110,-18,-16,5,-47,7,-6,62,-51,-12,10,-31,-43,-58,12,-8,-20,18, 
  /* [30][0][][] */ -57,13,90,-52,6,97,127,-20,-19,3,7,-3,9,-35,-8,-20,-11,-38,0,9,-79,-64,38,-5,1,56,2,-17,62,54,57,10,-29,47,-70,-25,-48,23,28,23,-81,30,51,-18,47,-16,84,17,8,-15,30, 
  /* [31][0][][] */ 127,-15,86,36,26,-51,-40,-40,86,5,10,-37,-93,-87,-42,-6,-44,-10,-84,32,14,-65,19,-4,63,-55,-87,0,-90,18,-7,-59,-51,40,-35,-53,78,-60,34,19,-25,-49,-20,-53,115,46,19,-104,-4,52,-4, 
  /* [32][0][][] */ -53,105,-32,-109,50,-75,19,6,-71,27,-18,55,4,-18,-57,-56,6,-29,-27,-29,74,32,-12,54,82,54,8,-12,0,-32,112,69,-95,-106,42,37,65,-9,-54,101,22,127,-41,25,-104,-24,55,-21,66,-95,55, 
  /* [33][0][][] */ -108,-50,-13,14,127,-4,90,17,111,-47,75,59,-28,35,73,-101,50,-58,18,5,24,13,1,45,-37,33,105,-20,62,-45,-46,-46,-118,56,-3,-5,20,-70,-43,-9,3,30,-55,-57,54,-18,43,17,-105,-71,-16, 
  /* [34][0][][] */ -20,-96,-41,-9,-25,-9,-93,15,-127,-2,-12,-47,-39,-80,40,32,0,-40,-2,-27,-43,-4,-12,-35,-13,-5,-21,11,33,-32,21,-50,23,-30,-81,-44,22,114,38,44,15,-65,-15,-12,42,59,-58,-31,-23,-3,-15, 
  /* [35][0][][] */ 9,-53,-56,-26,6,-77,-3,-44,-58,31,4,44,6,-40,3,-45,-95,112,-13,12,-65,35,-11,-11,27,-58,-127,76,32,-22,-22,-93,-2,-38,29,-50,-13,-39,-10,48,-43,-56,-88,-104,-6,-28,8,-70,37,4,-31, 
  /* [36][0][][] */ -90,13,101,-2,-6,44,32,-23,19,23,28,-26,-39,-48,-14,-127,98,-31,42,29,-53,50,-112,38,64,37,48,74,-36,-84,1,32,-56,-63,-92,-42,5,6,-20,13,47,43,13,5,-20,-36,-95,58,-13,-63,10, 
  /* [37][0][][] */ -4,-97,110,19,110,59,-1,-40,70,-21,44,-16,-56,-80,-7,-8,0,-7,-11,72,60,-10,-26,92,-39,13,-26,16,-34,-28,31,32,67,-11,-127,-106,-5,-20,-13,-92,-27,5,33,-91,-62,-90,-74,-28,22,-76,-31, 
  /* [38][0][][] */ -62,-83,-22,12,-54,48,-56,-2,18,-16,-127,22,-34,-50,-44,19,11,17,33,45,-89,49,50,-13,37,-24,-76,4,-20,-100,-45,42,-6,-48,-32,-4,-27,78,2,51,88,24,-24,-16,-99,-2,1,9,-63,31,43, 
  /* [39][0][][] */ -52,-47,-68,-15,11,-61,30,97,-14,88,-15,-21,26,35,8,-46,-40,47,34,-127,1,-98,15,-23,5,-3,-31,-64,38,66,-104,9,-32,-18,4,-33,6,-56,-91,57,-4,12,11,4,-33,8,-58,-43,-23,28,-99, 
  /* [40][0][][] */ -53,4,24,7,-125,96,24,-61,16,1,-37,-21,64,3,10,44,-50,1,-5,-6,0,38,54,36,36,-39,-41,54,74,-1,107,-51,5,-63,-46,30,24,68,-53,107,30,67,-127,80,-13,-7,25,30,12,21,-18, 
  /* [41][0][][] */ -67,23,-27,-14,-25,41,-34,2,46,-10,16,-81,5,92,127,100,39,-31,-33,-39,0,54,-25,-27,-5,13,-52,-84,63,-5,31,9,-38,-53,-60,-107,107,57,54,-23,20,76,-72,-89,64,20,75,-21,8,10,27, 
  /* [42][0][][] */ -53,-54,57,-127,-47,-5,32,32,31,43,1,-38,-27,36,-41,33,-56,-26,-8,2,-74,36,3,-58,-8,22,34,1,-28,-3,69,7,63,27,15,26,37,23,45,33,-92,-5,48,-11,11,34,3,7,-61,-40,20, 
  /* [43][0][][] */ 35,80,2,-51,-38,-2,41,-38,88,13,127,-97,-39,12,27,4,43,48,-80,84,70,-43,-10,66,-30,2,107,-8,-19,-47,-44,11,-30,60,52,-19,85,-45,113,-70,11,-32,56,-19,-57,-77,-9,19,6,19,31, 
  /* [44][0][][] */ 43,86,2,37,19,-87,89,-57,21,40,23,-32,-89,-61,84,-7,-29,-40,36,-15,-43,-31,-13,-30,55,60,6,88,-79,-16,48,33,-87,67,-28,-12,53,-73,-82,-69,5,21,-12,-127,49,24,24,20,-61,45,27, 
  /* [45][0][][] */ -23,-17,-6,-50,-105,83,-6,-22,55,66,-27,-91,-51,-38,-108,66,-127,-88,-113,125,-18,54,-58,1,-4,-96,-1,-8,54,80,77,28,8,28,41,44,-17,-11,-72,116,-14,49,-46,-29,86,-14,-64,41,61,-24,5, 
  /* [46][0][][] */ 15,24,80,-6,-12,127,-26,74,-110,-37,-85,-23,-71,97,-90,-92,-6,-47,61,-61,46,35,46,95,-45,17,-34,74,27,89,70,-53,-10,-39,81,-41,38,40,18,-25,86,-21,-26,-33,-36,23,-19,-100,-35,31,55, 
  /* [47][0][][] */ -4,-101,-71,60,-3,-37,-126,-18,37,2,-89,-40,-27,-93,-48,-78,-29,127,73,-60,84,18,-8,-6,-67,-7,-25,-64,36,3,-64,-61,35,-23,74,-114,15,34,41,41,19,-16,-38,85,50,29,-105,4,5,89,-66, 
  /* [48][0][][] */ 8,40,50,83,-66,14,-59,83,34,-2,13,-16,20,-34,27,27,-22,20,23,-35,-30,10,90,-53,-3,-44,29,13,21,-35,8,64,18,39,-38,51,11,-51,5,23,4,-36,-20,-38,-34,8,30,25,127,25,7, 
  /* [49][0][][] */ -12,23,-113,-120,69,64,-15,80,2,60,86,-21,-49,-10,-79,51,-30,61,2,50,-83,-109,55,17,-21,-37,-43,-71,91,50,-59,-20,-10,35,-2,59,-109,-56,13,-19,-31,-5,127,34,-13,-46,-7,2,-14,7,97, 
  /* [50][0][][] */ -49,18,5,12,-71,19,-20,31,-4,-16,-67,-52,-57,-56,34,95,-62,11,52,-30,37,-92,40,60,75,70,67,-27,71,-36,12,-26,-48,10,-12,40,-45,127,30,-57,5,-74,88,-5,79,-62,5,-50,-6,-45,-12, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant48_scale = { 51, { 0.0025514792650938034, 0.0034234689082950354, 0.002408238360658288, 0.0032932853791862726, 0.0025771125219762325, 0.0047650430351495743, 0.0041363276541233063, 0.0057746544480323792, 0.0054263672791421413, 0.0029421288054436445, 0.0029443188104778528, 0.0038093267939984798, 0.0036839102394878864, 0.0062425155192613602, 0.0020858515053987503, 0.0013260369887575507, 0.0043183616362512112, 0.0015535562997683883, 0.0021993080154061317, 0.0026173584628850222, 0.0049166791141033173, 0.0035671847872436047, 0.0021750808227807283, 0.007034781388938427, 0.0043394481763243675, 0.0017275307327508926, 0.0028269805479794741, 0.0068635432980954647, 0.0023384068626910448, 0.0035135769285261631, 0.0029400659259408712, 0.0028332746587693691, 0.0031322694849222898, 0.0014471512986347079, 0.0019598661456257105, 0.0011739667970687151, 0.0020386406686156988, 0.0016192087205126882, 0.0024448719341307878, 0.0028551218565553427, 0.002520678099244833, 0.0015566996298730373, 0.0038607190363109112, 0.001583948265761137, 0.001602130476385355, 0.0040915412828326225, 0.0025505782105028629, 0.0014597830595448613, 0.0032044858671724796, 0.0019350086804479361, 0.003210616996511817, } };
const TfArray<51, int> quant48_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int32_t tensor_data49[51] = { 808, -7150, 10793, 5701, 4338, 722, -13292, 647, -8304, 42, 9983, -7744, 6773, 4833, 6263, 30498, -10807, 10357, 7707, -992, -4938, 1321, -7489, 1422, -1870, 4048, 1745, 3708, 15020, 5227, -3307, 7319, -2883, 11540, 26509, 36014, 5486, 20236, 15949, 14417, -12636, 4434, -697, -4696, 1601, 461, 3447, 19335, -4730, 13496, 2089, };
const TfArray<1, int> tensor_dimension49 = { 1, { 51 } };
const TfArray<51, float> quant49_scale = { 51, { 6.0034806665498763e-05, 8.0552214058116078e-05, 5.666443394147791e-05, 7.7489072282332927e-05, 6.0637943533947691e-05, 0.0001121186651289463, 9.7325355454813689e-05, 0.00013587423018179834, 0.00012767923180945218, 6.9226560299284756e-05, 6.9278088631108403e-05, 8.9631219452712685e-05, 8.6680243839509785e-05, 0.00014688272494822741, 4.9078858864959329e-05, 3.120087058050558e-05, 0.00010160850797547027, 3.6554265534505248e-05, 5.1748425903497264e-05, 6.1584905779454857e-05, 0.00011568656918825582, 8.3933759015053511e-05, 5.1178372814320028e-05, 0.00016552426677662879, 0.00010210466280113906, 4.0647781133884564e-05, 6.6517190134618431e-05, 0.00016149513248819858, 5.5021340813254938e-05, 8.2672399003058672e-05, 6.9178022386040539e-05, 6.6665284975897521e-05, 7.3700459324754775e-05, 3.4050619433401152e-05, 4.6114499127725139e-05, 2.762274925771635e-05, 4.7968016588129103e-05, 3.8099027733551338e-05, 5.7526398450136185e-05, 6.7179338657297194e-05, 5.9310073993401602e-05, 3.6628225643653423e-05, 9.0840447228401899e-05, 3.7269372114678845e-05, 3.7697187508456409e-05, 9.6271563961636275e-05, 6.0013604525011033e-05, 3.4347838663961738e-05, 7.5399671914055943e-05, 4.5529617636930197e-05, 7.5543932325672358e-05, } };
const TfArray<51, int> quant49_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(16) int8_t tensor_data50[1*3*3*51] = { 
  /* [0][0][][] */ 52,26,-3,8,-127,-44,6,-10,63,-104,39,-91,-63,54,-123,54,125,88,85,12,9,-9,-100,42,26,-66,58,127,14,-111,36,46,31,-34,-127,127,-15,74,87,127,9,-113,-75,94,-25,-18,-127,-47,127,54,74, 58,127,63,127,-51,86,90,-127,-29,1,5,-127,127,104,-109,-60,123,-38,-127,16,-87,-44,-127,81,71,-98,-103,84,43,-56,31,127,61,28,-34,36,-127,49,5,-33,-16,-127,127,-91,51,127,100,-98,50,30,-43, -9,11,30,42,11,22,-32,-24,29,-11,17,29,-20,-10,-47,-17,29,-39,-21,-25,-46,42,12,-33,-16,-35,-14,41,-28,49,0,-11,-27,-18,46,36,-15,-37,15,19,-8,-10,-1,36,29,-35,-18,-35,-37,18,-16, 
  /* [0][1][][] */ -8,-9,-81,-106,-61,-12,-93,-40,127,-67,61,-66,-80,-52,-127,115,-127,-37,59,69,96,120,73,75,-62,-127,119,82,14,78,-82,-19,64,-10,-125,105,13,0,127,63,14,70,-3,-25,-39,12,-109,-127,114,127,127, 127,42,127,111,-97,55,-104,-112,-70,7,66,-126,79,127,-89,-70,73,-127,-107,30,-70,64,8,127,127,-90,-45,64,77,127,72,78,63,109,-28,-13,-110,-127,86,-60,-2,-62,74,-49,127,22,52,-100,-64,36,-96, 25,25,-19,12,-43,45,41,26,-31,-41,-35,33,-34,54,-33,-14,40,-14,-32,30,-12,-23,6,-13,12,-32,-49,-33,29,-45,-17,-25,-28,-26,-25,-14,11,25,6,10,10,-25,-20,-28,-26,-15,-5,20,23,-25,27, 
  /* [0][2][][] */ 40,-90,-71,-81,-47,-127,59,-63,60,-62,53,-24,53,120,-61,127,-65,-19,16,84,127,127,126,71,-22,-52,127,47,38,71,-127,-4,8,11,-49,65,82,-30,89,-60,3,-18,56,-127,-77,92,6,-51,70,12,113, -111,-10,100,47,-101,-114,-127,-76,-127,-127,127,-61,-93,78,-20,18,-116,-88,-7,127,-36,74,118,108,107,-44,-74,34,127,93,-68,-19,127,127,4,-68,-63,-115,57,-61,127,-112,72,-127,-2,88,11,48,-72,-113,-40, 37,24,-33,-48,40,-20,-27,34,1,-12,35,44,-1,-27,-30,9,2,1,1,5,14,13,17,42,52,32,17,8,46,-36,-13,35,11,43,42,-3,37,-25,33,41,1,-47,-30,-30,8,0,37,33,-29,31,9, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant50_scale = { 51, { 0.0068008457310497761, 0.0058293184265494347, 0.0063239820301532745, 0.0046420907601714134, 0.0047421790659427643, 0.0068311598151922226, 0.0036344095133244991, 0.0032194056548178196, 0.0036718274932354689, 0.0047915023751556873, 0.0055697401985526085, 0.0048106489703059196, 0.0049244053661823273, 0.0025858227163553238, 0.006186699029058218, 0.0086678033694624901, 0.0039369836449623108, 0.01537197083234787, 0.0085403108969330788, 0.0081822099164128304, 0.0043416637927293777, 0.0058420891873538494, 0.0053686080500483513, 0.0025926169473677874, 0.0061199511401355267, 0.0094208773225545883, 0.0072955358773469925, 0.0026755603030323982, 0.0068918904289603233, 0.0060150069184601307, 0.0098981643095612526, 0.0080768084153532982, 0.0039816289208829403, 0.01044162642210722, 0.0080575449392199516, 0.01189005933701992, 0.0085046486929059029, 0.011903121136128902, 0.005952552892267704, 0.0067717884667217731, 0.027650818228721619, 0.0072895558550953865, 0.0057210694067180157, 0.0078434571623802185, 0.01273120753467083, 0.0038302922621369362, 0.0060371519066393375, 0.013717036694288254, 0.0048093725927174091, 0.0072392839938402176, 0.0055368542671203613, } };
const TfArray<51, int> quant50_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 3 };
const ALIGN(16) int32_t tensor_data51[51] = { -2510, -4714, -7239, 2069, 10886, -813, 4319, 11645, 11612, 8646, -2982, 10328, -2290, -544, 13340, -7294, -4485, -439, 9161, -6422, -824, -3824, -873, -9698, -2314, 11017, 8718, -5824, -6110, -5837, -2412, -721, -8144, -9653, 13292, -8236, 12959, 4579, -8064, -2163, -3, 9803, -888, 13066, -4308, -6724, 6043, 10660, -1328, -3109, 4786, };
const TfArray<1, int> tensor_dimension51 = { 1, { 51 } };
const TfArray<51, float> quant51_scale = { 51, { 0.00016001990297809243, 0.000137160430313088, 0.00014879957598168403, 0.00010922566434601322, 0.0001115806880989112, 0.00016073317965492606, 8.5515523096546531e-05, 7.5750722317025065e-05, 8.6395943071693182e-05, 0.00011274123244220391, 0.00013105271500535309, 0.00011319174518575892, 0.0001158683662652038, 6.0842889070045203e-05, 0.00014556938549503684, 0.00020394832245074213, 9.2634909378830343e-05, 0.00036169344093650579, 0.00020094848878215998, 0.00019252259517088532, 0.00010215679503744468, 0.00013746092736255378, 0.00012632018479052931, 6.1002752772765234e-05, 0.00014399885549210012, 0.0002216677094111219, 0.00017165967437904328, 6.2954364693723619e-05, 0.000162162134074606, 0.00014152957010082901, 0.00023289798991754651, 0.00019004255591426045, 9.3685390311293304e-05, 0.0002456853399053216, 0.00018958929285872728, 0.00027976609999313951, 0.00020010938169434667, 0.00028007343644276261, 0.00014006007404532284, 0.00015933619579300284, 0.00065060751512646675, 0.0001715189719107002, 0.00013461339403875172, 0.00018455194367561489, 0.00029955783975310624, 9.0124522102996707e-05, 0.00014205063052941114, 0.0003227537963539362, 0.00011316171003272757, 0.00017033609037753195, 0.00013027893146499991, } };
const TfArray<51, int> quant51_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int8_t tensor_data52[102*1*1*51] = { 
  /* [0][0][][] */ -26,-79,-9,61,8,-106,-14,-100,71,-71,-30,74,-21,26,54,68,-111,4,-20,74,-7,54,73,47,63,37,-39,2,11,-12,-26,30,-22,-11,-98,4,-53,-32,-27,13,-115,51,-19,-55,-48,34,26,37,30,-22,127, 
  /* [1][0][][] */ 18,2,-2,29,-29,-49,-24,14,-96,5,14,-55,-15,59,66,97,-43,20,24,86,-56,19,4,118,40,-17,41,65,10,13,-22,25,37,-46,-24,35,-28,-13,22,5,127,-11,54,0,13,-9,-10,-23,-34,-19,-18, 
  /* [2][0][][] */ -34,44,-2,11,4,51,-46,52,-64,69,-37,9,24,1,-28,4,-12,-59,70,-19,-43,-43,29,52,95,47,18,8,6,67,16,37,-80,-127,7,-33,0,-21,8,-65,-84,28,25,87,75,-30,-44,28,12,-28,50, 
  /* [3][0][][] */ -96,75,47,0,-64,65,-98,-9,-22,66,-127,-33,-14,-18,27,54,91,-38,-33,-94,20,-33,-32,27,-24,8,115,-63,-83,27,-19,2,3,-15,55,18,36,-14,-51,5,0,66,-10,-1,98,-49,-50,14,-15,8,42, 
  /* [4][0][][] */ 54,-37,-121,48,-60,43,37,-25,-4,63,11,24,-41,45,34,15,-59,8,-23,4,-19,-21,-2,125,54,-69,14,38,-35,-6,63,-9,-22,-17,88,-15,23,1,22,20,127,29,91,5,5,107,59,18,10,86,-30, 
  /* [5][0][][] */ 70,79,-17,-25,127,95,-9,57,48,2,15,4,27,-78,-33,-88,-15,5,-28,-21,-61,-94,-91,37,-121,19,43,2,-56,8,-127,-31,46,-74,112,75,42,84,-12,-47,-85,-25,28,-50,-38,-96,71,15,-17,-74,-7, 
  /* [6][0][][] */ 69,-35,-20,58,-53,-10,25,21,9,28,-23,19,22,98,73,-73,-41,77,11,-108,-85,-33,-96,6,-50,22,-40,87,-23,-64,127,-31,-58,-57,1,9,27,-90,-43,35,-1,45,-20,-11,-39,-55,42,3,-32,93,18, 
  /* [7][0][][] */ -53,41,-82,-37,45,-31,52,5,-46,-6,-35,26,-23,36,-127,52,-117,-35,75,-24,-15,-18,72,25,17,64,2,104,33,-82,-40,55,18,53,-103,-7,-122,-72,-5,43,-18,20,-42,-16,3,-33,-20,-42,87,-57,43, 
  /* [8][0][][] */ -1,-49,38,70,37,31,-48,-63,11,-75,-85,90,73,-101,-48,10,-61,-25,18,76,-43,-50,77,-33,-53,8,71,-38,41,-22,-89,2,24,-15,-121,31,-17,-16,20,37,-127,-64,118,-19,-25,-15,-38,-29,46,86,32, 
  /* [9][0][][] */ 35,22,2,1,93,-13,21,-5,-56,11,28,2,-39,18,-39,-30,11,-18,18,-38,-8,100,-9,70,-11,49,1,1,37,19,1,43,66,5,21,-47,2,71,8,-43,127,53,28,-69,24,-9,22,51,37,27,-32, 
  /* [10][0][][] */ 2,-63,72,-40,28,10,25,-46,25,33,-8,21,-31,36,-49,-5,1,-13,4,-20,12,39,-57,127,13,8,26,29,24,-91,-4,0,29,54,-53,-13,-37,-10,-13,8,124,26,86,-12,-19,71,-81,-5,11,-49,-58, 
  /* [11][0][][] */ -55,30,127,45,35,38,52,-4,-5,-111,-4,22,14,-45,-6,74,-44,3,84,59,-31,28,36,-23,42,-27,-36,59,60,-94,-36,13,-3,-65,-24,-20,4,-11,-50,-36,-81,47,-60,-55,-9,16,-58,6,126,-25,-52, 
  /* [12][0][][] */ -16,62,-68,-17,11,47,21,86,33,27,-79,-28,127,19,8,-67,24,-54,115,-3,-43,-31,-92,24,-63,28,39,26,-24,-12,47,1,-16,-29,3,-22,38,-11,23,-17,-98,-20,79,2,29,0,-11,10,-5,-48,-48, 
  /* [13][0][][] */ -31,-50,3,-51,-115,-70,-74,13,-34,-19,94,-41,-16,59,56,62,-61,31,-5,27,3,-55,-54,44,48,-60,-46,36,11,-31,-44,-9,14,7,-6,20,64,23,24,-87,127,-22,35,15,-18,105,-15,-5,-35,-14,22, 
  /* [14][0][][] */ 62,-84,-12,17,79,34,-16,43,3,-24,-10,-47,4,62,-36,17,31,-61,9,16,-19,8,15,127,103,-12,20,34,-11,10,-20,25,20,-7,-21,3,-2,-1,51,12,-2,29,28,-3,-22,116,3,11,-6,19,-34, 
  /* [15][0][][] */ -18,54,7,29,-71,45,-10,-33,-25,-10,-39,33,55,36,127,3,63,-16,-10,-47,-4,-28,10,-42,9,-10,-54,-54,6,6,44,-33,10,-35,-8,-53,-14,6,6,5,33,77,47,18,4,12,-97,92,31,67,-37, 
  /* [16][0][][] */ -7,-65,-10,-11,23,-6,-8,19,-13,-9,-10,12,8,110,20,28,33,14,3,-32,-36,-82,-21,89,94,16,22,96,69,-18,-43,-14,6,-71,-71,45,-25,-23,81,7,41,12,19,33,45,127,-30,-43,63,-60,37, 
  /* [17][0][][] */ 83,-73,112,88,21,-74,61,-36,15,-60,-40,64,-63,-92,-22,41,-40,30,-27,-3,1,58,99,14,16,44,-50,-5,22,-5,-14,-12,-48,112,-64,-57,-16,39,-124,-54,127,52,-39,-48,-14,2,-12,-27,15,-38,-51, 
  /* [18][0][][] */ -34,-29,-59,-69,-28,-32,-52,56,-11,28,5,-81,12,29,-25,19,-8,-28,20,-117,-21,-41,-40,11,-6,8,83,-24,-7,127,7,29,17,10,21,38,-12,36,26,-69,94,-53,10,-27,111,-23,-60,-9,-16,-31,-11, 
  /* [19][0][][] */ 0,4,-115,41,90,-39,-78,-21,-17,-96,80,14,-17,29,-14,-51,-10,9,-32,-82,18,15,-33,35,30,16,0,15,105,8,-63,53,37,2,-6,-8,98,61,48,-47,127,94,-16,55,-19,37,-33,-19,31,-63,-1, 
  /* [20][0][][] */ 127,39,-16,-14,37,-4,61,-54,92,-28,8,-54,8,-41,37,-35,-18,32,-40,-9,-29,-7,19,-54,-40,18,-39,-53,-21,-125,-40,-21,9,43,65,30,-4,37,34,3,91,7,4,-21,-18,-60,-16,31,34,31,81, 
  /* [21][0][][] */ -34,-30,-2,-35,-57,-19,2,-43,127,-1,58,8,-28,40,31,-4,-36,-30,29,-11,-19,2,5,66,41,-12,-54,4,-26,-29,-26,10,44,13,-12,-7,113,68,16,-23,92,-30,-2,13,-54,113,-15,32,50,-4,-6, 
  /* [22][0][][] */ 61,-4,-104,34,111,-86,-11,59,64,-9,-67,-91,-23,7,-19,-12,-105,63,64,-93,17,-50,-82,-26,-101,60,13,49,-55,-74,127,9,-37,-116,0,4,-35,44,-39,99,24,-71,13,69,-30,-56,25,-56,38,124,-2, 
  /* [23][0][][] */ -53,-47,-34,13,27,8,-62,1,-14,-29,127,10,-19,30,-31,1,-45,-64,0,-58,50,-5,-62,54,23,66,13,-18,-54,-49,-5,-14,-29,-24,8,49,4,-46,17,-81,104,-36,-21,-61,8,-5,-2,95,-61,-2,106, 
  /* [24][0][][] */ -29,51,-41,-46,-41,50,-19,7,-44,15,65,8,-31,-15,49,127,4,2,97,35,43,-46,11,112,-28,16,9,5,12,29,-52,38,-39,44,-18,71,-37,19,28,0,61,-51,81,-20,48,-11,-36,-66,-47,-6,0, 
  /* [25][0][][] */ 1,-66,-35,1,-98,-107,-34,28,15,-1,-36,47,-30,-80,-15,-7,-55,-5,-104,-36,-39,-11,7,14,-127,15,88,0,114,-47,-77,101,-17,9,-27,-66,-14,-27,85,-56,48,-48,-84,-41,1,56,2,-76,-86,-85,-48, 
  /* [26][0][][] */ -16,-13,-2,-60,41,124,31,-12,-18,46,-53,27,12,-50,-16,21,63,-66,127,11,1,-74,-30,4,-48,-16,72,0,-2,-45,35,-49,76,-81,-37,-37,33,-9,-33,10,-35,-8,91,38,7,7,16,35,51,74,-25, 
  /* [27][0][][] */ 20,-39,-45,11,-17,-64,-20,15,33,-101,27,-26,-28,-25,10,78,-33,32,-20,-31,41,3,33,27,44,34,-6,-12,-75,26,-57,-10,24,-52,-17,-21,12,61,0,-52,127,-39,-27,-45,-19,99,-61,10,-13,64,37, 
  /* [28][0][][] */ 97,-74,-8,-81,88,-12,-44,-104,61,106,24,-127,83,26,24,101,35,-1,-48,3,-12,82,-30,36,45,-40,29,57,26,-28,-13,49,33,-35,-30,-17,42,104,-90,-52,-88,-5,35,-66,-24,62,2,47,-22,61,61, 
  /* [29][0][][] */ 33,36,16,-57,-35,-42,62,-27,14,-26,-11,-63,-49,-59,-4,7,-46,69,-22,-28,23,20,86,-30,-6,114,-42,-72,-63,127,18,-69,-36,-25,55,27,78,60,39,-4,-33,-105,-16,-29,2,-1,-82,23,-17,26,-6, 
  /* [30][0][][] */ 20,0,33,12,38,-17,126,-6,14,-109,-64,64,15,-109,5,105,-65,-58,70,4,43,-48,-45,69,-13,-49,-127,76,38,-65,-64,-4,-12,-25,-57,43,-34,-3,69,-79,-61,52,-100,-41,-43,78,76,5,54,-55,29, 
  /* [31][0][][] */ 47,-44,-2,-29,85,3,-50,105,-57,0,-18,-99,-18,70,-26,-23,-8,15,43,41,6,63,64,72,65,-12,-2,93,-22,29,-11,-12,-1,-23,85,70,86,-42,25,-28,-123,39,35,19,42,127,18,12,30,28,5, 
  /* [32][0][][] */ -3,-14,-18,-56,-38,2,-10,-14,-39,-24,74,46,-28,-6,45,14,-9,22,-48,7,31,-13,-10,-14,4,7,109,-12,9,27,10,-77,25,-44,28,3,-36,28,-3,15,98,77,63,-16,-57,-6,-127,47,-4,111,30, 
  /* [33][0][][] */ -6,0,30,24,19,-78,-4,2,17,-39,24,-127,26,-33,70,29,56,-3,-39,50,-70,23,-1,62,7,-12,52,-31,-56,25,-37,62,-40,-47,-38,26,34,22,74,-51,-38,-104,-46,-58,77,-28,-47,32,14,-70,-12, 
  /* [34][0][][] */ -82,-118,-54,112,-25,67,-2,-98,-111,-48,-16,-62,-91,-28,73,101,-28,46,49,-40,-30,26,-80,-51,-127,125,-55,46,43,-11,48,60,27,-118,-117,43,26,32,-82,-58,71,2,-34,-21,-54,-36,-113,-119,58,76,-21, 
  /* [35][0][][] */ 35,-5,0,-60,90,-51,-21,54,53,8,98,-38,-2,24,66,79,28,-26,17,72,-3,31,-16,93,56,24,28,85,-25,68,1,-33,-107,-6,5,-23,3,44,-13,-10,-2,-30,97,-13,18,127,-28,26,-19,-43,-41, 
  /* [36][0][][] */ -10,-1,11,47,32,5,71,10,-43,-11,58,42,13,-2,23,-44,34,13,13,15,37,-8,-38,-81,-17,-24,5,-62,127,-63,64,-5,3,-8,10,-29,-13,30,37,58,59,71,35,-14,13,-100,-2,-40,53,21,-53, 
  /* [37][0][][] */ 8,-78,-30,37,-29,127,74,29,-62,14,55,31,15,26,-5,-16,42,-64,-59,-81,38,-62,-31,69,-54,14,18,58,-47,-94,-80,-25,-92,1,-10,7,-7,31,-84,21,-11,57,27,-44,-43,-91,-70,29,-4,45,17, 
  /* [38][0][][] */ 1,-7,-101,68,56,-33,50,57,-12,1,-70,62,8,-113,18,-43,-12,-33,10,52,-110,-54,-89,9,-2,108,-17,56,-52,-78,-25,60,-66,-21,-62,-78,73,78,102,7,20,-55,77,-57,-101,-32,-30,36,127,-6,0, 
  /* [39][0][][] */ 54,34,-17,5,-10,2,-8,8,-15,44,-56,-58,-29,106,48,8,44,-28,-16,-7,20,29,-20,49,61,-29,36,72,-30,43,-11,21,17,-22,-72,65,-9,-19,-18,-16,-127,-12,1,1,75,74,-8,-23,-27,15,-57, 
  /* [40][0][][] */ -75,85,-11,80,-35,12,33,18,16,46,-113,-18,34,82,12,-103,-76,12,-127,-93,-27,-49,-102,106,-34,74,-41,-1,-75,-44,103,47,-24,-100,-25,0,-16,14,-97,-45,-35,1,3,17,71,-113,26,78,11,-114,-11, 
  /* [41][0][][] */ -31,35,25,-48,-12,-93,12,19,18,-12,58,42,46,-85,12,-25,-71,21,106,-7,69,44,-30,-127,1,52,6,-10,9,-15,12,22,-108,-82,-48,25,-4,-53,29,-60,-19,4,-76,-12,-46,-44,34,-18,44,-68,-26, 
  /* [42][0][][] */ -37,-23,-22,-45,-2,-45,-35,38,-4,2,-24,33,19,89,-8,65,-13,-38,3,16,-79,41,14,72,41,3,11,72,-14,11,-62,-3,29,30,23,0,59,70,4,21,-127,8,76,87,-50,76,-57,-39,-49,-20,-19, 
  /* [43][0][][] */ -50,-33,8,73,48,11,8,-18,-32,68,-102,-105,105,22,-60,-93,53,74,32,63,-48,66,-127,-48,13,90,-11,-39,103,-45,0,3,-24,-4,-55,-35,-61,-96,9,59,-81,-109,116,-5,48,-4,-5,-59,67,9,112, 
  /* [44][0][][] */ 69,4,-22,89,20,52,11,13,27,2,39,12,16,-127,-1,18,-20,43,13,14,0,-82,-80,-7,-38,-7,-57,-69,32,-44,61,20,29,-7,58,-27,10,31,-16,46,-39,58,27,13,61,-26,-49,25,77,74,-17, 
  /* [45][0][][] */ -114,-31,9,12,-30,-4,28,-3,-45,7,55,39,66,-31,32,-23,-6,2,-54,3,-20,-77,-6,10,-43,80,7,-5,34,-17,-48,-32,127,57,-26,44,-17,1,-31,-36,17,-12,5,-80,-34,-31,60,17,-64,-43,-51, 
  /* [46][0][][] */ -38,46,7,-4,-54,-35,15,-119,2,-47,27,-23,-37,15,-13,1,-1,16,11,-25,-31,-27,-17,-81,-68,13,2,45,50,-9,-25,15,-127,-15,8,16,-39,-13,11,-26,-3,-61,-12,19,-51,-80,25,28,-5,48,6, 
  /* [47][0][][] */ -12,-10,-109,3,17,32,44,10,-92,43,-22,33,-55,-121,-22,35,-11,19,-89,83,99,-46,-15,-57,45,59,-44,-127,-33,15,-30,-72,-35,-25,100,-78,-77,11,-10,-3,-80,38,-90,-36,26,49,-69,-101,55,-23,-13, 
  /* [48][0][][] */ -17,76,-23,13,28,127,65,4,28,-13,-19,-25,17,-10,41,-9,-8,-33,47,-42,38,8,-41,-41,-58,45,59,-2,-9,74,85,8,19,33,-20,-27,32,-6,41,5,3,11,-1,-15,13,-55,-2,51,-15,50,-1, 
  /* [49][0][][] */ -9,17,-62,-23,38,17,-20,20,60,9,-127,-13,97,112,31,-1,-80,68,43,-89,42,47,12,12,-79,33,-65,49,13,62,61,4,-58,-28,-98,1,28,-32,32,58,62,-10,10,18,-26,-4,17,5,-2,-13,-27, 
  /* [50][0][][] */ 54,-37,4,59,59,4,7,21,1,-2,35,-35,54,120,-55,93,-27,-59,28,61,-29,-17,-7,97,54,73,-28,127,-49,-44,-25,-14,-4,-30,-62,7,-63,33,-44,16,-7,11,19,21,-33,78,39,-19,13,5,-43, 
  /* [51][0][][] */ 4,-43,-50,27,-28,27,-35,-36,96,3,61,-35,1,68,-2,-39,-76,58,56,-127,-82,-9,-45,31,47,-35,-29,-4,-76,-62,-63,-44,30,-66,-17,21,-14,60,-60,20,68,65,-3,115,-112,-18,20,110,3,-1,-65, 
  /* [52][0][][] */ -37,34,-7,32,-20,37,29,-34,17,9,37,40,9,6,-20,33,-14,6,11,-98,7,-48,-59,-13,-17,-72,-127,32,28,-77,-41,-23,90,49,34,-15,-18,-11,-87,-9,-27,29,23,-13,-14,-30,62,110,6,-4,-1, 
  /* [53][0][][] */ -64,47,1,23,-68,48,28,7,25,-1,-66,-38,-88,15,97,-79,-6,42,27,-100,-59,-53,-65,-12,-66,11,-10,84,-52,-36,67,0,-40,-65,28,56,7,-4,-19,27,69,-67,69,0,-33,-37,6,127,-62,35,8, 
  /* [54][0][][] */ -9,62,-74,-37,-56,3,16,-19,-31,26,5,0,-60,0,-7,-52,64,-54,-41,-1,-15,-91,-47,1,-75,13,-6,37,-77,-44,-10,-15,-34,-71,11,-26,48,4,-18,11,-61,-24,-71,52,-25,-9,2,127,-6,-23,28, 
  /* [55][0][][] */ 37,-12,51,-49,-60,68,19,-48,-23,-5,31,-20,22,-25,62,-3,109,1,-72,15,6,4,11,25,-27,29,48,0,0,-50,47,62,37,-23,26,-41,38,14,-127,48,-66,-73,-19,-90,-29,6,-48,97,-56,10,29, 
  /* [56][0][][] */ 38,-70,47,127,7,3,34,-48,-58,-53,17,-13,22,23,-94,32,-3,-22,-37,-36,-71,-68,83,16,-60,84,28,68,-36,-31,-77,-27,24,86,7,5,-38,-21,-50,-4,-47,-40,-49,-68,-46,-84,42,31,-2,-8,47, 
  /* [57][0][][] */ -82,23,-50,-30,16,4,-42,-35,55,65,45,-62,-18,29,14,42,49,-45,-60,-127,-36,-47,-42,8,1,43,78,40,-31,-64,-24,59,-23,-117,-42,-90,104,99,20,109,68,14,-24,113,-7,72,-62,17,19,-18,81, 
  /* [58][0][][] */ -71,-50,41,-61,-21,43,-44,-12,40,-66,34,-41,-39,48,-127,57,34,50,25,-60,115,-79,0,39,-2,-107,12,-48,30,-19,-45,7,79,45,121,64,46,26,28,-22,97,21,-20,48,-20,87,-47,-10,-36,65,-65, 
  /* [59][0][][] */ -14,-118,74,26,-11,-48,-26,3,-28,-23,82,105,-35,53,50,123,-57,9,52,-112,-34,-15,81,-8,51,9,64,35,48,44,-65,5,45,107,-112,-38,21,-15,-127,32,55,-24,47,-19,-40,21,-18,-4,54,-107,-21, 
  /* [60][0][][] */ 3,1,-24,6,43,-32,77,34,9,56,10,-70,6,63,27,21,-33,-6,3,58,-18,5,-21,70,57,12,43,127,-39,1,50,-9,57,-28,-9,5,41,-11,-4,51,58,-19,11,76,-9,61,39,63,-53,-17,-35, 
  /* [61][0][][] */ -10,68,10,27,-31,51,27,-6,27,-31,-98,-24,41,35,-25,-17,9,59,30,42,-13,-1,89,8,-15,4,43,42,-23,-10,2,-45,-24,-7,-40,29,26,29,4,-19,-61,-70,0,27,-39,-4,43,127,-44,37,51, 
  /* [62][0][][] */ 38,-13,11,16,42,16,7,13,-8,11,-21,9,-3,36,-13,17,18,-6,-18,21,17,16,-16,62,-4,-3,6,48,-10,3,1,33,-2,-23,26,-4,34,-2,11,-10,-127,10,6,0,21,45,9,-24,12,9,-36, 
  /* [63][0][][] */ 59,68,26,9,-32,63,-48,23,-79,-31,76,-39,104,33,-22,31,40,-84,16,-48,58,-30,-20,-96,-77,43,-68,89,-60,-42,-1,4,-26,-38,-39,-31,-86,-9,-5,-55,-127,47,12,25,-17,-32,91,45,13,-21,81, 
  /* [64][0][][] */ -21,-26,-34,-51,-43,20,-66,-11,12,-35,65,-37,-37,60,30,-33,76,-9,7,-7,-127,-107,41,25,37,47,29,111,-9,-15,-45,7,-38,-55,-44,-4,64,7,-6,105,26,33,13,28,-71,44,-24,111,-15,17,60, 
  /* [65][0][][] */ -17,-42,24,33,-13,40,-12,-24,-10,-63,63,9,-11,42,-57,28,-44,5,23,-50,-45,-4,5,74,45,24,-1,-18,23,-21,-26,-7,8,-6,-28,-6,19,36,-29,-9,127,39,-16,19,-57,68,-41,1,-99,5,26, 
  /* [66][0][][] */ -8,-13,3,-96,-51,-8,4,-37,-27,-15,48,42,53,63,-2,72,-2,1,-39,38,41,-50,2,24,-24,91,-15,12,35,-10,-127,-34,-53,16,-5,96,-125,13,9,-26,-15,19,2,32,54,35,-2,58,-31,-17,-43, 
  /* [67][0][][] */ -78,-44,-9,-110,-4,-86,15,-58,26,0,46,32,5,44,18,-31,-49,30,-38,29,17,-37,-7,27,30,-16,-37,-18,-38,-31,-93,8,-55,127,21,7,22,-17,-22,68,82,-45,-16,-18,-37,-78,38,12,118,-49,-24, 
  /* [68][0][][] */ 112,-68,-1,6,-18,2,23,48,25,31,-50,-41,-45,-79,66,-38,-19,105,-10,-66,-67,-31,5,-1,-96,-47,-41,40,-72,-96,-11,-76,2,-124,59,8,39,3,-23,87,66,-13,3,-32,-54,-39,7,89,0,127,78, 
  /* [69][0][][] */ -42,-43,29,-73,-14,-41,-71,-30,-55,-44,54,-14,-75,11,10,-24,-69,11,-13,-20,7,-30,-14,22,-5,62,11,-30,-9,127,38,-25,8,23,-32,-39,124,60,81,-79,51,-37,16,90,-23,-13,-109,-25,-46,18,-19, 
  /* [70][0][][] */ 53,10,109,-2,71,-71,84,-59,30,-1,-36,-48,-12,-19,37,-45,-59,-17,-54,27,-24,65,-22,-2,-3,7,-17,32,9,6,-49,25,-80,1,67,29,74,66,-30,-14,58,-12,27,-31,1,-21,22,-86,127,-124,-51, 
  /* [71][0][][] */ 22,8,19,18,-6,8,-21,13,16,-28,-39,30,52,3,44,0,-22,19,-37,-41,30,-41,-28,-34,5,-24,-6,16,-2,70,70,-127,-46,-63,17,19,6,-36,37,59,-2,70,-59,28,25,16,41,-24,9,51,-38, 
  /* [72][0][][] */ -71,-40,14,-5,34,-79,61,85,-34,0,-12,34,-75,60,46,11,-115,28,69,-57,11,20,-15,-43,10,-89,-127,28,47,60,-104,-91,-43,-53,4,112,-44,-70,87,-46,-106,-18,76,36,-15,-30,102,-34,72,-30,49, 
  /* [73][0][][] */ 79,28,8,7,1,23,-3,9,26,74,-29,-29,-81,40,-5,39,-18,23,-58,49,32,127,27,-27,-93,-3,-34,7,-37,37,46,55,-78,28,-64,-54,40,35,55,-38,0,-114,81,-96,-37,16,-92,38,-49,-39,-33, 
  /* [74][0][][] */ 15,23,-5,7,-14,-7,28,-1,-11,2,24,25,-23,26,-21,1,7,-13,2,-20,9,4,1,34,9,-1,0,-5,12,-12,4,3,28,-25,14,-21,6,20,9,-16,127,28,5,42,12,27,-6,-12,15,17,16, 
  /* [75][0][][] */ -24,-16,47,18,60,-10,18,-2,-42,25,-44,43,16,-10,15,30,-86,-32,-31,-7,-5,-33,15,-34,20,-17,12,-14,28,25,-62,19,16,-74,13,127,-74,-15,-45,-47,-49,28,-43,-24,25,-17,70,29,65,-7,18, 
  /* [76][0][][] */ -9,-44,1,24,-36,-5,16,-34,-18,19,-6,-9,5,17,43,28,-26,13,-26,25,7,19,37,44,26,11,-1,49,-18,-46,-8,-50,127,27,-8,40,-32,-13,-13,41,-31,15,15,20,-11,20,45,21,-8,59,-27, 
  /* [77][0][][] */ 44,68,-6,-105,-30,-73,55,-15,60,54,-23,38,73,-25,5,22,86,15,41,-75,-22,-93,-7,-75,-35,25,-20,-8,-127,-118,-56,15,45,83,32,34,-40,40,-16,33,30,-11,33,-3,-5,-95,50,-7,36,21,-105, 
  /* [78][0][][] */ -44,-2,-23,44,36,7,-2,-3,-17,-51,9,-16,-21,-9,-26,-6,18,12,8,64,66,-19,2,1,30,42,42,6,33,-2,1,-70,22,22,-20,-11,27,58,23,22,-30,-58,34,-4,-1,19,31,57,49,2,127, 
  /* [79][0][][] */ 7,-8,21,26,33,-18,32,-17,-5,-44,30,-8,3,6,-11,1,14,-19,13,-25,5,4,-2,79,-12,21,-23,-23,-4,-35,23,-4,28,3,26,-39,-8,51,14,-24,127,29,17,1,-6,52,-18,-5,6,-9,-33, 
  /* [80][0][][] */ -39,-107,-115,-44,-13,35,88,33,43,28,16,-57,-29,121,29,-70,-1,38,-107,127,-52,41,15,103,24,76,-2,3,-96,37,50,-57,73,-16,-51,-27,-24,-22,66,85,9,35,54,65,-26,37,31,-57,54,14,-65, 
  /* [81][0][][] */ -32,-44,19,29,-37,-55,-28,-42,72,-31,55,95,-24,127,41,14,-32,-2,-31,-26,57,56,9,-45,21,-10,13,110,3,24,-53,-44,8,28,-94,53,-10,59,0,26,49,4,30,82,-7,80,-3,-29,28,25,18, 
  /* [82][0][][] */ 20,-28,23,-57,2,-42,-54,0,41,-13,24,52,-25,20,-2,28,-12,15,-25,-9,-1,9,43,38,42,1,-30,-42,-41,-21,-2,-18,22,-42,-22,-12,29,-1,-1,-17,127,-47,-28,42,-34,6,-84,-9,6,-22,6, 
  /* [83][0][][] */ -3,-15,-3,-13,37,20,36,0,60,-31,9,-36,14,52,14,3,1,26,-17,-26,24,-28,49,82,27,-42,27,30,54,-33,-6,-24,2,38,-5,13,23,23,6,3,127,17,16,37,40,41,-33,-4,15,-12,-30, 
  /* [84][0][][] */ -48,-3,-7,-21,-33,35,-51,62,53,-18,-46,3,-42,11,18,31,62,-43,20,14,58,-28,-13,-13,65,26,22,11,-25,-31,55,39,-41,-39,-26,9,-31,-29,-7,-35,5,29,27,127,19,-35,-14,-11,35,29,-2, 
  /* [85][0][][] */ 4,11,-22,-10,-11,-39,-5,91,10,60,61,-23,-31,127,53,23,-30,-23,27,-82,-2,54,-8,59,-37,-14,27,63,5,2,-59,-5,44,-19,-6,-4,17,27,29,-42,126,44,3,-13,32,-25,12,19,-44,-83,59, 
  /* [86][0][][] */ 2,27,-1,19,43,5,32,2,-24,-41,16,-53,-2,16,18,15,10,-16,22,-7,-27,29,-9,86,2,25,2,2,18,-22,30,24,33,22,-4,12,-40,40,1,-12,127,53,2,20,-35,20,8,22,23,4,-36, 
  /* [87][0][][] */ 46,127,-27,2,-26,-39,-19,-58,-48,-4,77,45,16,28,-8,7,40,-20,28,-121,84,-61,-57,-80,-57,-106,-9,70,35,19,11,-44,-42,22,68,-14,-58,77,-12,34,-74,17,-79,67,109,-25,71,80,-27,23,27, 
  /* [88][0][][] */ -17,34,-27,6,13,-33,32,42,2,12,-58,-38,11,31,-13,3,-6,-2,8,60,-42,-24,21,85,63,7,-38,57,24,-52,-16,-20,45,-10,-61,27,-45,-49,-4,-16,127,16,-4,11,-7,29,43,-15,16,-13,-1, 
  /* [89][0][][] */ -24,38,2,72,97,37,49,-27,-16,-75,-66,-89,-57,-22,-7,-25,-95,49,109,-2,8,-64,-21,-45,75,14,-84,-61,-29,4,36,18,-119,-65,-20,35,127,91,74,-67,-34,9,-32,40,-49,30,15,37,31,-46,-10, 
  /* [90][0][][] */ 67,-52,41,-11,-63,-39,-24,-64,45,-57,-3,-24,-61,41,-10,87,-17,-19,2,-42,-11,25,54,-22,18,6,-49,36,45,-31,-30,17,3,36,-43,127,-3,-39,25,-10,-52,-35,60,41,44,15,5,-4,13,-2,18, 
  /* [91][0][][] */ 74,-46,-70,-57,46,28,56,26,-52,24,95,-53,-47,60,-32,-33,5,-14,127,-6,123,-10,-83,92,33,-9,-24,37,54,-60,-63,-17,40,-48,61,59,25,-27,48,-5,113,-13,-48,103,8,62,-14,-46,22,8,-72, 
  /* [92][0][][] */ 105,15,0,30,-17,64,-23,38,61,12,-69,73,68,81,-17,36,10,18,18,3,-40,127,103,-106,33,3,-62,20,2,43,-16,55,-29,-80,32,-59,50,-35,51,-127,13,80,-34,24,-51,49,-68,36,-5,-46,-68, 
  /* [93][0][][] */ -45,-42,-74,35,-24,-43,-58,47,-26,77,22,33,-81,43,106,-62,-48,24,-84,66,36,3,-43,15,-40,-8,43,-72,69,33,-41,117,70,97,56,64,82,-16,18,127,101,-113,35,12,-15,90,-40,-92,73,-54,74, 
  /* [94][0][][] */ 78,115,-94,-113,-18,-75,61,91,-53,90,-66,63,28,-65,-37,74,-87,-19,-55,-99,19,-103,-89,-23,57,-13,34,-109,62,14,40,-103,8,-24,-59,97,-34,5,-1,-14,-127,-11,-49,-55,-36,-73,-45,-103,18,76,37, 
  /* [95][0][][] */ -44,8,-6,-1,3,-34,23,-18,22,-43,-33,-1,-32,54,-30,-19,-35,19,-1,4,4,-28,15,12,27,25,-19,-7,32,-40,9,-23,-13,51,-14,-65,-30,3,-14,-2,127,3,12,18,-4,-21,0,-35,-5,-28,4, 
  /* [96][0][][] */ 30,19,74,0,-48,-17,-19,-77,41,-18,-45,-37,-4,69,-1,84,-25,24,13,17,5,-24,18,127,58,-6,22,43,-1,7,-76,34,5,34,22,64,10,22,-7,22,34,-25,21,8,-7,30,-6,-90,60,-37,-24, 
  /* [97][0][][] */ -9,34,-50,-33,58,-86,37,-38,13,-7,24,-70,41,37,-92,-19,15,-13,-53,-14,16,-97,-53,88,-4,-20,-30,55,-102,-25,-103,-58,42,-65,86,35,0,34,44,-127,94,-3,5,54,23,-16,5,-61,-49,-46,20, 
  /* [98][0][][] */ 75,51,-12,21,56,-12,-34,39,90,-14,44,-8,-35,69,9,17,27,64,68,-13,-25,54,21,17,35,9,-73,58,17,9,11,-120,-38,24,20,127,-26,-21,91,23,85,2,117,76,94,52,-19,-68,-11,-25,18, 
  /* [99][0][][] */ -5,3,-33,29,81,31,44,8,30,35,5,25,0,39,-24,-4,9,-19,13,11,25,16,6,64,-1,3,4,30,-1,9,9,7,58,-14,46,2,20,23,-25,5,127,5,-2,66,-40,31,10,-1,6,22,-23, 
  /* [100][0][][] */ 46,-11,-52,-13,44,-26,16,-29,44,-65,93,-11,-11,40,27,58,1,52,2,-23,-35,-40,55,47,102,4,-20,12,-42,18,-15,-30,3,-18,47,4,3,22,-65,23,127,1,-23,-31,61,29,-26,11,-50,40,29, 
  /* [101][0][][] */ -23,20,27,-3,52,-14,19,18,-46,27,-5,-15,-32,32,29,-8,-56,59,15,-83,-7,-6,33,-83,54,45,-22,11,-55,73,15,-17,15,-97,63,-17,22,8,-27,-10,-71,-127,-46,24,-5,6,-15,18,5,-31,65, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant52_scale = { 102, { 0.0018556453287601471, 0.0017705000936985016, 0.0023327970411628485, 0.00177853147033602, 0.0019685793668031693, 0.0016838383162394166, 0.0031160637736320496, 0.0031087598763406277, 0.0016347382916137576, 0.0060662501491606236, 0.0025501756463199854, 0.0019334529060870409, 0.0016126905102282763, 0.0014361982466652989, 0.0050645181909203529, 0.0020225206390023232, 0.0030109065119177103, 0.002390723442658782, 0.0023864603135734797, 0.0022482362110167742, 0.0020691247191280127, 0.0020766647066920996, 0.0022152089513838291, 0.0024491606745868921, 0.0021076712291687727, 0.0013686270685866475, 0.0024657181929796934, 0.0027644962538033724, 0.0027818188536912203, 0.002267282921820879, 0.0015778881497681141, 0.0050442647188901901, 0.0040769972838461399, 0.0023643858730792999, 0.003690430661663413, 0.0045385174453258514, 0.0019957537297159433, 0.0031566370744258165, 0.003394208149984479, 0.0026846269611269236, 0.0019127246923744678, 0.0013484038645401597, 0.0038414543960243464, 0.0017940896796062589, 0.0015463978052139282, 0.0017812515143305063, 0.0024385936558246613, 0.0013649598695337772, 0.0025335215032100677, 0.0042008552700281143, 0.0020141699351370335, 0.0021961836609989405, 0.0019216863438487053, 0.0026730366516858339, 0.0022049411199986935, 0.0020898643415421247, 0.0019880486652255058, 0.0019056650344282389, 0.001793492236174643, 0.0015111005632206798, 0.0038175899535417557, 0.0025999937206506729, 0.010797224007546902, 0.0019098268821835518, 0.0019138982752338052, 0.0028593447059392929, 0.0022708571050316095, 0.0017031398601830006, 0.0019993844907730818, 0.0025984137319028378, 0.0024856289383023977, 0.0024137154687196016, 0.00097531150095164776, 0.0029122659470885992, 0.0052747414447367191, 0.0025228643789887428, 0.0032282101456075907, 0.0014919249806553125, 0.0030449072364717722, 0.004842796828597784, 0.0014135022647678852, 0.002202474744990468, 0.0033104424364864826, 0.0026772087439894676, 0.0040893880650401115, 0.0021033568773418665, 0.0045281993225216866, 0.002178501570597291, 0.0029835451859980822, 0.003045195247977972, 0.0018441631691530347, 0.0019503973890095949, 0.0019842537585645914, 0.0009216172038577497, 0.0030510989017784595, 0.0057054688222706318, 0.0024820596445351839, 0.002574738347902894, 0.0026560535188764334, 0.0056096389889717102, 0.0024345158599317074, 0.0032778799068182707, } };
const TfArray<102, int> quant52_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int32_t tensor_data53[102] = { 6398, 1745, 688, 7063, -14091, 5395, 4228, 9852, 16071, -17580, -2348, 776, 7645, 8658, -13963, -8239, -6122, 6199, 2449, -3300, -117, -6962, 8305, 9334, -4174, 32198, -5729, 5160, -8770, 4076, 3522, -21167, -3809, -494, 15947, -15112, -1689, 12575, 9762, -9921, 12253, 13413, -4786, -193, -12103, 10399, 13772, 23308, -12053, -2985, -2164, 6110, 803, 2696, 18107, 5301, 14928, 6130, -2083, 3936, -14951, -7716, -7883, 4185, 6459, 4528, 4418, 5873, 8474, 3648, -3765, -4182, 13230, 6356, -9924, 1516, -4048, 18696, -9518, -7755, 10851, -9331, 3886, -10808, -4553, -2454, -14351, 414, -798, 1355, 202, -8272, -1402, -7171, 15109, 5517, -7487, 17199, -21037, -16429, -4837, 416, };
const TfArray<1, int> tensor_dimension53 = { 1, { 102 } };
const TfArray<102, float> quant53_scale = { 102, { 4.3662243115250021e-05, 4.165882637607865e-05, 5.4889344028197229e-05, 4.1847801185213029e-05, 4.6319513785419986e-05, 3.9619724702788517e-05, 7.3319148214068264e-05, 7.3147290095221251e-05, 3.8464429962914437e-05, 0.0001427352981409058, 6.0004134866176173e-05, 4.5493008656194434e-05, 3.7945661460980773e-05, 3.3792901376727968e-05, 0.00011916513903997838, 4.7588720917701721e-05, 7.0844856963958591e-05, 5.6252316426252946e-05, 5.6152010074583814e-05, 5.2899675210937858e-05, 4.8685287765692919e-05, 4.8862701078178361e-05, 5.212256291997619e-05, 5.7627312344266102e-05, 4.959226498613134e-05, 3.220299186068587e-05, 5.8016899856738746e-05, 6.5046973759308457e-05, 6.5454565628897399e-05, 5.3347834182204679e-05, 3.7126781535334885e-05, 0.00011868858564412221, 9.5929346571210772e-05, 5.5632608564337716e-05, 8.6833664681762457e-05, 0.00010678864782676101, 4.6958910388639197e-05, 7.4273812060710043e-05, 7.9863719292916358e-05, 6.3167695770971477e-05, 4.500528666540049e-05, 3.1727151508675888e-05, 9.0387162344995886e-05, 4.221387644065544e-05, 3.6385830753715709e-05, 4.1911800508387387e-05, 5.7378674682695419e-05, 3.2116702641360462e-05, 5.9612273616949096e-05, 9.8843658633995801e-05, 4.7392233682330698e-05, 5.1674909627763554e-05, 4.521615119301714e-05, 6.2894978327676654e-05, 5.1880968385376036e-05, 4.9173278966918588e-05, 4.6777615352766588e-05, 4.4839176553068683e-05, 4.2199819290544838e-05, 3.5555309295887128e-05, 8.9825647592078894e-05, 6.1176324379630387e-05, 0.00025405234191566706, 4.4937103666597977e-05, 4.5032902562525123e-05, 6.7278699134476483e-05, 5.3431933338288218e-05, 4.0073879063129425e-05, 4.7044341044966131e-05, 6.113914423622191e-05, 5.8485387853579596e-05, 5.6793305702740327e-05, 2.2948506739339791e-05, 6.8523906520567834e-05, 0.00012411156785674393, 5.9361515013733879e-05, 7.595789065817371e-05, 3.5104116250295192e-05, 7.1644877607468516e-05, 0.00011394816101528704, 3.3258878829656169e-05, 5.1822935347445309e-05, 7.7892764238640666e-05, 6.2993145547807217e-05, 9.6220894192811102e-05, 4.9490750825498253e-05, 0.00010654587094904855, 5.1258863095426932e-05, 7.0201065682340413e-05, 7.165165152400732e-05, 4.3392075895098969e-05, 4.5891705667600036e-05, 4.6688324800925329e-05, 2.1685111278202385e-05, 7.179056410677731e-05, 0.00013424632197711617, 5.8401405112817883e-05, 6.0582078731385991e-05, 6.2495375459548086e-05, 0.00013199150271248072, 5.7282726629637182e-05, 7.7126584073994309e-05, } };
const TfArray<102, int> quant53_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(16) int8_t tensor_data54[1*3*3*102] = { 
  /* [0][0][][] */ 16,-25,-18,25,-7,-56,-14,-35,-20,-12,29,-28,17,-6,8,-72,-12,-11,8,-31,34,-24,13,-36,20,24,-40,-10,39,34,-23,16,-4,-23,-127,-2,23,-10,28,5,7,12,-4,7,-53,6,35,77,-6,29,-17,-36,-16,-14,-33,-12,-26,1,-44,-16,8,-20,5,-36,16,-52,-19,8,5,-5,36,-42,4,18,6,5,-19,-3,-5,-20,-26,-1,38,35,-30,-32,13,-8,-5,10,3,-28,18,-2,-77,-7,-17,17,8,-15,-11,-21, -120,-42,-127,121,-28,39,-21,69,127,-51,-97,12,42,-15,-13,127,-23,-94,127,127,-38,-44,-57,127,-127,-127,-70,127,102,-73,-127,-7,127,127,-22,0,-50,-127,69,3,-38,31,-13,-126,99,-127,-86,-126,-127,-61,-73,127,-127,-7,-84,-127,127,127,-91,96,-8,89,8,-64,38,124,-101,-104,-21,127,57,29,-127,127,-75,-127,39,-57,75,-64,-35,62,-28,-57,45,-29,-97,-40,-42,-127,8,-64,-127,-107,-14,78,-26,37,-76,10,-78,-49, -16,-14,29,-23,13,-53,3,13,26,20,-15,-29,-38,-18,2,64,8,19,1,-37,17,0,-8,39,11,-29,-31,10,10,-20,-31,16,10,9,39,18,-33,9,-30,11,8,-8,-21,-30,-54,31,21,20,33,-29,6,34,-14,-3,18,14,4,-8,-32,-3,5,-33,-8,-119,15,-32,7,-26,-28,-12,35,-22,1,-13,4,47,29,-41,-39,4,-11,-3,-22,4,10,38,41,51,-2,-30,-12,-27,49,10,-127,-42,11,27,34,17,-13,31, 
  /* [0][1][][] */ -48,-13,8,44,7,-7,16,37,-6,-13,-12,41,15,-18,-4,74,-11,-31,23,39,7,30,-8,15,37,-23,-53,8,-28,-47,31,-8,-9,-48,93,1,-21,15,-50,-15,9,16,9,48,26,27,-24,-64,21,-5,17,15,-43,-15,-41,-36,-45,-24,-28,3,-1,28,-14,74,-10,-43,22,9,-8,15,-6,34,21,6,-9,-32,-21,-4,37,-22,22,-2,-40,-12,36,15,-26,11,24,17,9,-6,-22,-24,-32,36,7,19,-14,14,-31,-3, -127,18,45,-127,127,106,9,94,-16,127,127,127,45,36,11,-110,36,127,-102,93,10,66,10,54,-126,-64,108,2,-127,127,-120,-13,-46,113,-1,-26,-52,-9,127,-52,-14,-127,-18,78,102,-72,-88,-127,-84,-70,18,-51,53,29,-127,-105,107,-30,-127,32,15,76,-37,-119,39,127,-127,-127,127,2,78,-78,-68,37,127,-106,-127,-66,127,127,45,60,127,50,-86,110,127,-127,127,53,127,78,-116,-127,-10,-127,18,102,-119,127,127,-127, 26,-20,24,22,-7,-29,0,-9,-23,18,41,45,-12,-2,17,-11,4,-1,-29,-41,10,8,-23,8,-10,-32,-26,-6,14,22,38,-14,-25,56,20,10,9,1,20,-19,55,-37,15,54,44,31,22,-20,-39,40,-17,-32,-16,14,-45,-17,30,16,-27,-10,6,12,-10,-94,17,-48,-13,43,21,-12,10,10,-7,-29,4,-6,-7,20,24,16,9,-26,0,-10,53,-6,2,7,24,12,-16,22,-39,-1,-40,6,-1,-9,-36,9,-10,-28, 
  /* [0][2][][] */ 24,-24,12,-6,-21,24,-14,-18,4,18,29,28,39,2,10,-68,-2,-23,-47,17,-27,-2,16,-16,-45,-10,-49,4,14,2,5,-15,-23,-25,93,-13,-19,18,44,-17,62,-32,11,-1,44,16,14,80,-32,26,0,-10,34,6,42,-9,43,-12,-38,23,-12,-25,17,72,-27,9,46,-10,-41,16,6,13,31,15,2,-22,-5,30,7,17,-20,26,-23,1,47,-21,22,50,-32,-31,27,-16,47,-42,-94,19,7,5,7,-13,4,4, 68,127,20,-96,78,127,127,-127,-80,2,103,92,127,127,127,-123,127,65,-29,25,127,127,127,-2,-127,-58,-127,-6,-38,44,-31,127,-22,42,-14,127,-127,66,124,127,127,67,127,-127,127,-51,-127,-106,69,127,127,114,82,127,116,-60,-31,63,-100,-127,127,-127,127,-127,127,126,-112,-74,-69,-50,-127,-127,-94,29,-66,-88,-76,-127,35,-57,127,127,-116,127,127,127,66,-118,105,64,-60,127,-79,-102,2,101,127,127,-127,14,49,-14, 45,8,-22,32,-33,-51,-17,-18,-12,-2,49,-43,-35,17,17,-36,-18,-13,-27,-24,-1,-28,-18,15,32,-15,2,10,40,15,38,13,23,44,21,-3,-33,-5,16,3,-7,-6,-15,-36,8,-14,-32,-64,35,11,0,-26,37,17,30,-23,40,19,-3,21,-10,-9,-23,-69,10,50,-20,15,37,11,-9,-41,-35,-4,18,28,9,24,20,-21,-17,-23,-16,7,47,-38,4,-2,-11,36,-1,3,40,-34,-28,25,18,2,-31,-12,34,-28, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant54_scale = { 102, { 0.0069482275284826756, 0.011257634498178959, 0.0098283672705292702, 0.0091125462204217911, 0.0060106716118752956, 0.0083771077916026115, 0.0080828666687011719, 0.005985715426504612, 0.007481045089662075, 0.0076224803924560547, 0.0051092100329697132, 0.0074025345966219902, 0.0094159329310059547, 0.016781384125351906, 0.018719874322414398, 0.0088943270966410637, 0.0077525400556623936, 0.0047205318696796894, 0.0069084316492080688, 0.0065549770370125771, 0.0086248051375150681, 0.015894116833806038, 0.0090593723580241203, 0.0068443650379776955, 0.0049296882934868336, 0.0073509975336492062, 0.0061789588071405888, 0.011957746930420399, 0.0086853671818971634, 0.0074142683297395706, 0.01014263741672039, 0.020434556528925896, 0.01532441284507513, 0.011796979233622551, 0.0072646462358534336, 0.027887437492609024, 0.010704119689762592, 0.016099767759442329, 0.0029389234259724617, 0.040001034736633301, 0.008824152871966362, 0.0094969533383846283, 0.012305144220590591, 0.006830540020018816, 0.0089345928281545639, 0.013973583467304707, 0.012279704213142395, 0.0060770134441554546, 0.0096643641591072083, 0.010490135289728642, 0.00691574951633811, 0.0098192524164915085, 0.01255121361464262, 0.011260741390287876, 0.0053237802349030972, 0.0094578294083476067, 0.0062671303749084473, 0.010391941294074059, 0.0049214530736207962, 0.0076879202388226986, 0.011818420141935349, 0.0075773098506033421, 0.0073875533416867256, 0.0062712812796235085, 0.010649792850017548, 0.0046380870044231415, 0.0076915491372346878, 0.013396252878010273, 0.006939262617379427, 0.01027274876832962, 0.008307519368827343, 0.011427054181694984, 0.011852217838168144, 0.008866678923368454, 0.011881975457072258, 0.0088612623512744904, 0.0044715958647429943, 0.0083013847470283508, 0.0066979941911995411, 0.013390486128628254, 0.0091237714514136314, 0.008760528638958931, 0.010217197239398956, 0.011989959515631199, 0.0054845437407493591, 0.011841215193271637, 0.013540646992623806, 0.0081285387277603149, 0.0061362762935459614, 0.009413314051926136, 0.0084159364923834801, 0.0063319900073111057, 0.0083147482946515083, 0.010610186494886875, 0.009670051746070385, 0.0055125663056969643, 0.0082443924620747566, 0.0057206503115594387, 0.00347685138694942, 0.010455134324729443, 0.0065989340655505657, 0.011611479334533215, } };
const TfArray<102, int> quant54_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const ALIGN(16) int32_t tensor_data55[102] = { 2670, 49, -640, -29, -2912, -1197, -3731, 30, -1017, -2726, -1478, -4431, -3534, -1000, -2101, 2332, -723, -2329, -840, -2657, -2198, -1453, -3829, -2946, 13503, 5456, -1506, -2135, -423, -1630, 2363, -1229, -406, -1937, -65, -632, 5260, -1551, -2582, -491, -2351, 460, 395, -370, -3319, 2630, 3956, 4754, -1233, -1006, -331, -1225, -1660, -3499, -1204, 2360, -4057, -1424, 6093, -350, -2716, -1348, -2417, 2355, -2862, -2010, 3893, 3586, -2244, -1989, -12, 2039, 4896, -3659, -1834, 5616, 4997, 7175, -1350, -2281, -1341, -3009, -1472, -22, -2454, -1580, -2819, 6795, -423, -1821, -2041, -234, 4301, 9516, -237, -100, -1373, -2149, 8496, -3491, -566, 1473, };
const TfArray<1, int> tensor_dimension55 = { 1, { 102 } };
const TfArray<102, float> quant55_scale = { 102, { 0.00016348771168850362, 0.00026488551520742476, 0.00023125570442061871, 0.00021441285207401961, 0.00014142757572699338, 0.00019710842752829194, 0.00019018510647583753, 0.00014084036229178309, 0.00017602459411136806, 0.0001793524861568585, 0.00012021671136608347, 0.0001741772866807878, 0.00022155136684887111, 0.00039485609158873558, 0.0004404676437843591, 0.00020927828154526651, 0.00018241271027363837, 0.0001110713419620879, 0.0001625513395993039, 0.00015423475997522473, 0.00020293660054448992, 0.00037397921551018953, 0.00021316170750651509, 0.00016104389214888215, 0.00011599266872508451, 0.00017296464648097754, 0.00014538726827595383, 0.00028135874890722334, 0.00020436158229131252, 0.00017445338016841561, 0.00023865030379965901, 0.0004808130906894803, 0.00036057442775927484, 0.00027757597854360938, 0.00017093284986913204, 0.000656175019685179, 0.0002518616383895278, 0.00037881807656958699, 6.9151137722656131e-05, 0.00094120082212612033, 0.00020762713393196464, 0.00022345772595144808, 0.00028953282162547112, 0.00016071859863586724, 0.00021022571309003979, 0.00032879019272513688, 0.00028893421404063702, 0.00014298855967354029, 0.00022739681298844516, 0.00024682670482434332, 0.00016272351786028594, 0.00023104123829398304, 0.0002953226794488728, 0.00026495862402953207, 0.0001252654183190316, 0.0002225371717941016, 0.00014746189117431641, 0.00024451626813970506, 0.00011579889542190358, 0.00018089223885908723, 0.00027808049344457686, 0.00017828964337240905, 0.00017382478108629584, 0.0001475595636293292, 0.0002505833690520376, 0.00010913146252278239, 0.00018097762949764729, 0.00031520595075562596, 0.00016327676712535322, 0.00024171173572540283, 0.0001954710460267961, 0.00026887186686508358, 0.00027887572650797665, 0.00020862773817498237, 0.00027957590646110475, 0.00020850029250141233, 0.0001052140214596875, 0.00019532670557964593, 0.00015759986126795411, 0.00031507026869803667, 0.0002146769838873297, 0.00020613009110093117, 0.00024040463904384524, 0.00028211669996380806, 0.00012904808681923896, 0.000278616847936064, 0.00031860347371548414, 0.00019125973631162196, 0.00014438296784646809, 0.00022148973948787898, 0.0001980220404220745, 0.00014898800873197615, 0.00019564114336390048, 0.00024965146440081298, 0.00022753063240088522, 0.00012970744865015149, 0.00019398570293560624, 0.00013460354239214212, 8.1808269897010177e-05, 0.00024600315373390913, 0.00015526903735008091, 0.00027321127709001303, } };
const TfArray<102, int> quant55_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(16) int8_t tensor_data56[102*1*1*102] = { 
  /* [0][0][][] */ 8,-24,1,12,-34,-12,-44,-3,-6,-34,-17,-18,-51,8,-13,11,1,19,-32,-43,15,30,-18,-59,20,47,6,-127,10,4,10,7,-49,6,-9,12,6,2,22,-6,-23,-2,15,55,-3,15,6,-13,-22,-51,-12,-98,1,-77,-31,10,-15,-120,5,4,-34,0,-18,7,-41,-30,17,-47,9,-35,4,14,25,-1,-20,0,26,-67,-16,15,5,-25,18,-14,-12,-11,-17,3,-22,0,4,8,-5,-40,13,7,41,-22,-17,-41,-1,-7, 
  /* [1][0][][] */ -45,-76,13,32,-41,5,18,52,24,-95,-28,8,29,-81,-69,-41,-96,-9,69,21,30,-95,-25,-3,-58,0,1,2,21,0,12,-59,-1,40,-5,-75,-17,5,19,-70,-8,10,-80,-42,16,35,27,-45,-13,23,-72,-40,2,-20,-12,-82,-18,56,-2,-40,17,-21,-70,-16,3,-60,16,-3,-28,14,-66,-35,12,-50,-97,11,15,-4,27,-66,-19,15,-127,-84,0,-33,-91,-44,-46,-9,-36,-19,59,-36,-24,-17,-95,7,86,24,-49,-7, 
  /* [2][0][][] */ -33,-37,-6,28,-13,22,9,-3,9,-21,-34,-5,-7,-127,-34,33,-48,2,0,-29,15,-27,-6,0,-12,30,-45,14,-22,11,-14,-41,31,5,13,-42,3,24,12,-40,18,27,-40,26,22,-7,29,-25,-7,-16,-26,-10,-6,-1,15,-16,14,-24,16,-6,-22,-8,-25,-22,-40,-30,9,-33,0,27,16,14,-39,-6,-33,-33,-13,5,14,-22,-7,-46,-89,-47,-30,-39,-33,-1,9,-15,-38,-35,-7,-11,12,-34,-46,29,36,-45,-49,-47, 
  /* [3][0][][] */ -67,-69,-29,64,-18,-7,-24,40,34,-84,-87,2,-20,-127,-115,17,-90,3,-8,-80,11,-112,3,20,54,12,-74,8,40,-31,-6,-66,55,25,-3,-83,68,-8,50,-63,38,17,-36,-2,-25,-10,-32,-11,-7,-42,-16,-9,-52,-4,38,-59,79,-7,81,16,-48,65,-93,-53,23,-22,-14,-2,22,24,-38,-10,-14,16,-122,5,-31,37,79,-87,24,7,-100,-72,-20,-67,-81,-40,-70,11,-24,-126,-3,6,-36,-32,-120,-59,23,-68,-72,17, 
  /* [4][0][][] */ -31,-43,-29,-8,-67,-28,-17,25,46,-56,-27,8,31,-70,-49,-36,-36,32,-2,-6,-16,-14,7,5,-12,-12,32,-11,3,-34,3,-48,19,3,-22,-53,-53,-2,19,-26,-2,7,-35,15,25,-10,15,20,13,2,-60,-2,-11,7,3,-45,28,-4,20,53,-37,11,-44,-28,0,-24,20,-6,7,4,-32,-15,-10,8,-53,11,21,13,50,-50,-14,-72,-87,-30,13,-56,-32,-5,-52,-7,11,-39,18,-8,8,10,-127,-100,-14,-94,8,16, 
  /* [5][0][][] */ 8,22,-20,6,-15,13,-15,-14,15,-4,-26,9,-29,-13,13,-18,8,-28,-34,-36,13,-2,-24,-67,-26,13,6,-104,7,-17,7,25,-70,57,-1,-31,7,-9,15,-6,-43,30,-18,20,12,40,8,1,-22,-37,9,-108,11,-72,-23,5,-27,-127,-11,-22,-52,0,-32,5,-56,-32,-12,14,-3,-54,18,12,-30,-17,12,-45,4,7,-8,18,-6,-41,-12,1,-16,-1,5,13,7,11,23,23,-11,-25,-16,-70,29,-1,17,-40,-33,-18, 
  /* [6][0][][] */ 0,-20,24,0,8,-2,-28,24,6,0,-16,19,-38,-21,14,-11,13,12,-23,-20,21,-10,-37,-18,32,13,4,-90,33,1,17,3,-57,23,12,-15,-11,-11,14,35,-46,-6,3,-7,-7,20,21,4,-5,-4,-43,-71,-11,-62,-31,4,-7,-127,21,2,-10,-15,-17,5,-94,-53,22,-46,16,-31,53,10,-9,-4,22,-42,14,-33,-14,15,22,-41,29,-5,-35,-1,7,-5,-16,11,-38,-17,-18,-13,-5,-24,28,-36,7,-32,-4,-1, 
  /* [7][0][][] */ -54,-103,-25,11,-55,27,18,24,-29,-39,-53,12,-28,-127,-30,15,-83,-12,28,-27,24,-32,0,-30,14,-3,-12,28,24,-7,-4,-25,19,13,1,-51,4,45,44,-32,1,0,-82,-4,22,-33,-39,-19,-38,-48,16,9,-24,-18,17,9,0,-11,71,49,-39,37,-25,-38,-19,13,-32,44,-22,-15,16,1,-7,-4,-19,21,1,-5,-16,-55,-26,-45,-34,-72,-53,-93,-51,17,-22,24,-50,-34,-47,50,-18,-32,-25,26,44,-105,-34,-66, 
  /* [8][0][][] */ 16,-21,11,5,-65,-19,-42,-10,-22,9,-27,-31,-60,14,13,-7,-4,7,-48,-61,29,29,-21,-22,18,42,16,-83,10,38,12,9,-83,6,1,12,11,-33,21,5,-66,-4,24,30,-37,-6,5,1,-12,-26,1,-100,-13,-89,-26,23,1,-127,10,2,-40,-2,-18,14,-74,-29,8,-40,22,-47,33,11,11,-7,-11,5,32,-55,-7,30,14,-46,19,-10,-13,-12,14,-1,-15,3,-30,4,14,-35,-4,18,22,-21,-17,-31,2,-16, 
  /* [9][0][][] */ 33,-48,73,30,-28,13,16,3,-25,-89,-34,-13,11,-43,-112,-16,-29,-17,81,36,7,-117,-2,-10,-22,-22,-42,-37,-23,32,39,-76,-12,47,-22,-102,4,-13,23,-89,16,58,-127,-3,-16,-14,12,13,-18,-1,-47,-15,6,21,-34,-22,13,26,37,-64,-23,4,-86,-1,28,-40,27,-6,-20,49,-41,18,5,-16,-102,1,5,5,-17,-63,-31,6,-78,-8,-8,12,-106,-21,11,20,25,-38,34,-23,-8,-6,-116,10,-2,8,2,-43, 
  /* [10][0][][] */ -32,-77,-8,39,-46,9,-18,57,-5,-25,2,-3,36,-127,-39,8,-26,8,-13,-2,10,-63,19,-17,19,-53,5,-20,3,-15,-33,-38,-34,13,-15,-45,3,-27,42,-57,3,-9,-27,-2,-11,25,15,29,2,11,-46,8,-9,-9,26,-18,-8,38,2,-31,-74,-13,-11,-2,-23,-14,36,50,-21,-34,-15,-18,23,52,-50,27,19,26,-3,-37,-40,-81,-101,-4,11,-44,-42,-10,-39,17,21,-8,-55,7,21,-32,-122,11,-16,-79,-36,-10, 
  /* [11][0][][] */ -20,-41,-16,30,10,-1,48,-26,-31,-62,-78,-24,-25,-113,-47,-42,-77,-41,-17,-16,35,-43,50,20,-4,0,-38,-8,34,-10,-7,-76,13,19,-5,-78,-43,-15,-5,-73,17,-7,-38,-18,-28,15,-5,0,-1,38,4,-3,7,-1,0,8,10,8,-20,32,-13,-3,-52,-13,-23,1,-51,-4,31,-17,11,-21,38,10,-85,-33,-61,27,-9,-85,22,16,-127,-97,0,-35,-62,10,-1,23,-3,-55,12,11,-17,-8,-99,-30,-4,27,-16,21, 
  /* [12][0][][] */ -25,-69,-19,69,-39,-9,-18,28,69,-106,-68,24,-4,-71,-70,13,-66,58,-23,-64,-6,-75,26,-8,-3,9,-12,7,27,-22,-1,-60,43,11,21,-108,25,2,29,-69,23,-1,-47,11,-80,8,1,-10,5,-43,-64,7,-57,-9,76,-32,54,-18,75,42,-79,32,-60,-23,-4,-11,1,9,-16,3,-50,15,-29,8,-104,8,20,22,104,-89,29,10,-127,-48,-24,-72,-47,-10,-53,8,9,-97,35,-7,13,8,-84,-66,11,-59,-6,22, 
  /* [13][0][][] */ -68,-15,-11,106,33,15,-53,-91,-12,-91,-65,-23,16,52,-87,-15,-126,25,45,-84,-26,-36,-17,45,-89,0,-13,-74,-11,42,-16,4,-49,48,7,20,96,-22,2,-76,-38,42,31,12,5,-15,39,4,8,-63,11,-56,-24,-64,17,-32,44,-52,24,-42,-86,105,-58,2,-9,2,-11,-7,54,17,-64,4,-15,-22,-112,28,28,-1,18,-91,3,-112,-51,-127,7,-30,-95,22,-88,43,31,-47,24,69,8,-67,-18,-10,96,-95,-43,-21, 
  /* [14][0][][] */ 26,0,9,-20,-19,12,-76,-5,33,-57,18,33,5,14,0,-13,-31,22,-5,-76,-9,25,-64,-37,14,19,17,-103,20,-35,-17,-31,-44,9,-24,-20,12,-25,-27,1,-57,-63,18,4,-35,-3,-5,52,4,-5,11,-84,7,-73,-19,-15,26,-127,-4,15,-42,57,-51,-51,-72,-13,-27,15,-59,-86,-5,29,15,-29,53,-46,6,-18,-18,31,2,-34,-14,24,-62,-16,24,9,-9,-9,-41,-44,-24,52,5,-6,7,29,-3,-55,-41,16, 
  /* [15][0][][] */ 19,-7,16,-43,-4,-7,-74,-25,2,-17,5,-22,-81,1,-18,-4,-7,-10,-52,3,10,1,-72,-11,-2,7,2,-34,29,43,12,5,1,2,5,2,7,-127,12,-1,-38,-8,16,9,-46,-14,4,-1,-81,-4,-1,-36,1,-35,-35,22,6,-26,13,-8,14,-2,2,1,-45,0,1,-19,-7,-57,-13,-13,-1,-42,-20,4,14,-17,8,9,21,-20,2,-3,-36,-9,6,1,4,1,-46,2,14,-23,-7,16,8,1,1,0,-7,-2, 
  /* [16][0][][] */ -12,-48,-3,-21,-32,-79,-31,12,-3,-26,-53,8,-13,-71,-29,-23,-48,17,-21,13,30,-10,-22,-27,-36,-5,68,-50,39,-11,22,-57,-100,46,-6,-40,-63,3,54,-35,-27,-2,-43,20,36,-12,-44,49,29,-96,-21,-41,-21,-34,-22,8,21,-32,15,127,-84,5,-57,-8,-95,-18,-1,5,61,3,-14,-40,-11,-2,-31,16,-62,19,-4,-44,-60,-74,-41,-71,-38,-79,-31,5,-55,-11,8,-42,18,16,4,0,-62,-100,-10,-58,-32,-9, 
  /* [17][0][][] */ -8,-46,27,-45,-26,-2,-17,-44,12,-82,-33,6,11,-47,-79,-36,-58,-5,8,-20,-34,-88,-12,-20,-2,50,-28,-11,-6,-6,-29,-109,13,12,-4,-72,-8,13,-24,-73,23,-15,-78,48,-8,-33,12,-8,24,17,-29,17,-19,43,13,47,-25,-39,-6,-1,-33,5,-78,-47,34,-35,-56,16,10,83,20,46,-32,-9,-106,-17,-9,1,8,-73,-9,1,-108,-12,21,7,-94,41,18,40,33,-62,12,50,16,24,-127,-2,-68,18,-65,-37, 
  /* [18][0][][] */ -18,-38,4,-35,-114,-28,-28,8,-21,-35,-2,-10,28,-101,-58,-18,-62,-1,-13,1,49,-82,28,25,7,19,41,18,19,37,-2,-90,1,21,15,-35,23,-15,-11,-81,-36,8,-55,-51,-6,-11,29,33,-15,10,-97,1,32,11,-10,-3,14,-13,-51,60,-45,-8,-63,24,61,-105,74,-60,61,10,-17,-9,7,-30,-66,0,35,-77,-15,-57,-97,-3,-80,-21,3,-74,-33,-91,-100,17,17,-84,22,-6,-13,-21,-127,-72,-18,-19,9,-31, 
  /* [19][0][][] */ 4,-1,76,-16,-61,-4,-22,-2,-39,-36,-5,26,-60,-22,-72,40,19,-34,11,24,1,-19,19,-35,-1,26,-44,-19,31,36,54,-61,-42,16,5,-106,-20,17,19,-89,-11,42,-127,11,18,42,-19,-53,-35,-28,19,43,-5,-9,3,38,-38,11,44,-21,-95,-29,-47,-14,-31,-2,25,11,-35,61,-20,4,-44,-28,-28,6,80,-14,-32,-66,-7,-35,10,-7,-24,-11,-96,1,-28,33,-4,-22,-44,61,12,32,-21,-11,-30,-91,14,-90, 
  /* [20][0][][] */ 25,-127,20,29,-98,45,1,26,-31,-45,-58,21,-14,-94,-85,11,-32,11,72,6,32,-87,-3,13,-22,-18,13,-25,27,5,23,-63,9,40,-5,-91,7,-11,-80,-79,9,6,-59,-25,1,23,-82,35,18,23,-71,19,24,21,26,31,35,10,-4,0,14,-3,-79,-8,-32,-38,-38,33,0,13,10,-19,3,-26,-46,-101,-29,15,-18,-42,-44,-20,-83,-15,4,-31,-91,-63,-64,-2,54,2,8,2,16,17,-90,9,23,-39,-43,-27, 
  /* [21][0][][] */ -38,-107,32,-14,-49,-78,12,-20,25,-110,-61,37,23,-74,-108,-4,-28,9,-18,22,18,-44,-2,-6,16,22,18,-1,-3,-19,-35,-127,23,14,15,-89,-40,11,16,-67,15,22,-92,1,44,-5,4,37,46,-8,-52,17,16,10,-18,4,-2,16,19,62,-5,68,-80,-23,14,-57,8,-4,12,-17,25,9,-44,-13,-118,-104,-13,9,27,-101,-21,23,-86,17,31,-2,-63,-13,13,23,36,-32,8,-12,11,-57,-96,-26,-47,17,-67,-28, 
  /* [22][0][][] */ -24,-36,1,-55,-32,-8,-5,-58,3,-104,20,21,-5,-80,-114,-6,-63,31,5,-16,-35,-94,-66,-21,27,15,3,-28,-26,-20,-14,-110,0,-3,10,-39,23,18,14,-97,-7,0,-106,14,-24,15,-68,18,20,-3,-81,28,22,61,16,41,13,24,-36,-24,-10,-10,-83,-32,47,-8,20,2,2,43,47,41,-14,12,-98,10,54,10,3,-113,4,25,-127,-6,32,8,-75,-12,-41,8,43,-99,-39,13,-28,-17,-104,-16,-1,3,-60,0, 
  /* [23][0][][] */ -27,-19,-73,-39,-26,-4,-14,47,44,-127,-24,-1,28,-117,-111,9,-79,-43,-15,1,-49,-67,18,-26,-22,37,-27,66,15,-43,-30,-56,10,9,-24,-84,-33,-26,52,-41,-7,-46,-90,-33,31,37,-18,-31,11,6,-98,-43,30,7,17,19,-66,23,-15,-39,-42,5,-68,25,-11,-39,62,21,-38,-13,-68,-52,-50,-15,-102,63,9,-7,30,-112,6,8,-108,-79,15,-80,-72,-51,-35,10,-35,-2,2,53,25,-29,-107,53,-26,-33,-83,-20, 
  /* [24][0][][] */ 2,-38,-26,-10,-11,10,3,12,6,-42,-22,-13,20,-110,-20,8,-16,-23,4,-33,-25,-35,30,-5,-42,-17,-5,39,34,-10,-31,-29,4,2,8,-37,3,-11,20,-45,0,-12,-37,0,29,0,11,2,-5,-5,-26,-6,-8,19,4,1,-12,-30,14,-11,-59,-18,-30,58,-42,-46,16,11,-25,-25,-28,-29,-3,44,-13,20,-3,-22,9,-53,-14,-94,-104,-47,-13,-14,-38,-4,-5,23,-1,58,-5,38,3,-15,-127,13,-30,-76,-32,1, 
  /* [25][0][][] */ -3,-50,3,-11,-27,11,-14,-1,10,-27,0,16,33,-71,-35,-9,-20,19,-2,-22,-12,-30,-36,-10,4,-3,25,-9,22,-7,-28,-24,-7,25,-2,-29,12,-22,-22,-28,18,-20,-15,-17,-19,-10,11,31,37,17,-44,6,66,6,17,-17,3,-16,-8,10,-41,37,-19,-18,-5,13,3,10,-7,5,3,-36,10,-10,-37,-5,4,-15,9,-27,-67,0,-61,-22,-2,-18,-28,-47,-65,-26,11,-49,-23,20,-22,-10,-127,10,11,-16,-45,8, 
  /* [26][0][][] */ -3,2,-9,-44,-14,21,-68,20,21,-28,-44,-55,-66,3,2,19,3,-2,-27,-11,-30,-6,-74,7,2,-1,-7,-23,10,-14,3,5,-16,7,-15,26,43,-127,8,-7,-29,3,-1,3,-13,-8,-17,-3,-81,-2,-22,-16,-26,-56,-108,-6,18,-23,22,7,-5,19,-51,-9,-7,-6,-4,-1,7,-37,-14,34,-10,-7,21,-2,15,10,22,-3,-21,-9,13,-6,-22,17,14,-15,0,15,-27,-15,3,6,-10,-3,-4,-2,9,6,-23,7, 
  /* [27][0][][] */ 8,-48,18,-40,10,1,18,-15,10,-71,-15,-14,-23,-61,-110,-71,-43,-8,9,-8,-34,-57,12,-13,15,48,0,-10,-71,0,3,-85,11,1,-6,-95,7,15,13,-63,18,34,-86,38,9,-23,-7,-5,-29,-14,-2,-8,-15,24,15,1,-3,-16,4,-43,4,26,-94,-41,21,-27,-23,-53,22,98,16,26,-53,-14,-52,12,-2,-18,37,-95,-2,18,-109,-5,25,0,-83,-7,-29,25,16,-66,-5,35,15,-7,-127,-8,-57,-1,-69,-14, 
  /* [28][0][][] */ 24,7,78,25,-49,-13,27,6,-35,-27,-32,-23,-11,-36,-70,31,23,-22,13,29,47,-52,19,1,20,18,-42,-31,-26,10,31,-60,2,13,-20,-82,6,-22,23,-68,-15,-2,-102,-6,25,-3,-20,-3,-13,-28,-5,19,31,-41,16,42,-27,34,59,-12,-102,-36,-29,-9,-29,29,33,51,-22,12,-1,-12,-14,-34,-85,7,40,19,-17,-48,0,-51,5,-36,1,-1,-63,-7,-18,37,-19,-26,-37,15,15,16,-34,36,-5,-127,-2,-79, 
  /* [29][0][][] */ -1,4,-31,-10,-1,5,-32,-17,33,10,-36,10,-24,3,-12,32,-14,41,-36,-69,-17,-20,-44,-38,-39,8,23,-106,18,-12,7,-10,-45,-2,-4,37,19,-22,3,-6,-62,2,26,44,-1,3,15,-5,-39,-51,8,-85,29,-82,-23,4,14,-127,-11,1,-58,11,-28,6,-84,-36,-57,-26,2,-49,23,35,14,6,16,-12,26,-33,-36,1,-13,-8,-4,7,-38,4,25,31,-20,-13,8,0,4,8,12,-4,42,-36,26,-13,-5,14, 
  /* [30][0][][] */ 21,-50,-3,54,-12,40,47,-39,-53,-85,-53,-19,11,-70,-66,14,-111,-15,2,-15,17,-110,43,18,8,-6,-14,-19,-27,19,1,-73,5,12,17,-120,21,-33,-22,-66,8,7,-64,-9,9,-59,27,6,25,43,13,8,31,23,-8,4,32,-11,-17,1,-21,26,-73,8,-44,-2,7,22,2,17,-40,-28,-17,-19,-79,-12,-65,-9,27,-110,-10,19,-113,-24,-3,-19,-75,-9,13,32,-24,-46,48,39,-5,12,-127,33,-35,-2,-18,-62, 
  /* [31][0][][] */ -46,-94,-2,33,-19,-4,-4,78,-12,-26,-12,22,16,-127,-38,-12,-56,0,35,16,-11,-30,19,3,12,13,-34,-14,19,-7,-14,-43,-14,5,-15,-30,-18,-10,42,-40,19,5,-8,9,-12,-2,11,5,-22,33,-23,7,13,-34,-30,4,-20,-24,48,-1,-45,-22,-2,-8,-60,4,29,2,-25,3,-4,-61,-8,-19,-32,-2,25,-2,-15,-23,-49,-13,-80,-71,23,-35,-16,-5,-2,15,-29,-74,-11,61,-10,7,-30,-72,21,-67,22,14, 
  /* [32][0][][] */ -8,-19,11,27,5,3,-45,-15,23,-57,-73,4,64,-73,-79,-27,-64,16,-20,-36,-51,-66,-19,-16,5,-11,5,-15,30,-37,-45,-37,39,27,6,-43,53,-46,-10,-59,38,-50,-20,-17,-10,-6,-19,44,40,46,-62,14,11,0,32,-11,-23,21,2,22,-119,57,-20,-40,17,-33,-7,-3,-50,-15,-15,53,21,-5,-67,-8,11,-17,13,-52,36,22,-81,-72,16,-81,-54,8,-54,-29,9,-127,-2,28,20,-18,-71,27,28,-73,-29,26, 
  /* [33][0][][] */ -1,-85,20,12,-27,38,-56,41,16,-39,-25,29,68,-127,-52,-1,-43,25,-4,-30,-44,-50,-21,-31,-11,-10,16,-4,6,-28,-31,-25,4,26,-13,-69,18,12,-13,-66,17,-20,-4,-5,-27,-12,-2,24,25,28,-13,-21,-2,-16,14,1,5,2,-8,31,-52,7,-8,-33,-19,12,-3,6,-44,-15,-8,22,32,1,-50,-9,4,-29,2,-41,-11,-89,-97,-33,-27,-28,-33,0,-12,-19,16,-57,-24,21,-2,-22,-51,2,9,-98,-18,22, 
  /* [34][0][][] */ -19,-57,1,14,-18,-44,2,8,-10,-36,-9,11,32,-63,-68,-21,-34,31,-5,-4,0,-52,19,-9,4,6,34,-5,20,-4,-34,-81,9,33,26,-83,-11,-13,-32,-50,-44,25,-37,-20,14,-6,25,32,50,8,-74,-9,49,36,-53,-12,15,-6,2,47,-79,26,-17,-40,11,-5,30,17,50,-11,-15,-35,-10,-21,-36,1,4,-11,0,-28,-127,8,-66,-7,5,-50,-57,-80,-92,-11,18,-76,-6,5,22,-5,-86,-59,-2,-27,-13,-7, 
  /* [35][0][][] */ -8,-57,41,26,-18,-10,8,19,13,-17,-21,30,-6,-127,-35,-46,-47,-18,10,-4,-16,-36,-8,-16,9,12,13,10,13,-2,-15,-43,-5,23,14,-33,-1,7,23,-12,28,17,8,12,39,15,9,-28,-10,-23,-25,1,2,-18,-38,-1,-2,-10,9,-20,-58,-11,-18,8,-37,-25,-25,-3,4,-12,43,-35,-15,-25,-31,-35,10,0,-14,-13,12,-41,-66,-12,22,-59,-27,13,9,-16,-4,-5,-14,-27,16,-38,-23,-62,15,-66,-3,12, 
  /* [36][0][][] */ -8,-1,36,38,-50,-2,13,-10,-59,-108,-104,-17,27,33,-108,22,-19,-48,-55,5,34,13,6,5,-9,3,-41,-17,-1,-46,1,-67,-7,17,-16,-51,33,-15,35,-109,19,41,-17,-52,-4,-14,5,12,26,28,-15,21,28,1,-58,-11,-10,65,18,-45,-41,-18,-85,-9,39,12,2,28,-25,-1,-54,7,20,-59,-127,17,-39,6,2,-88,34,-21,35,-89,-8,15,-89,9,-18,4,-14,-30,18,-5,-11,-6,-48,14,8,-22,-5,-17, 
  /* [37][0][][] */ -12,-3,39,-11,-10,2,-3,13,-6,-14,5,22,-25,-17,1,8,19,-8,-23,-28,-3,-2,-18,-66,8,23,0,-127,14,11,17,0,-69,-3,6,-10,-16,1,6,-8,-37,28,-14,-13,8,38,-25,-34,-13,-31,-2,-97,-24,-62,-13,2,-9,-104,24,-10,-23,19,-32,-16,-64,-31,24,3,-10,-37,7,-1,-28,-1,13,6,40,-4,-28,2,12,-36,24,0,9,-8,-24,-5,-31,32,-3,-5,-17,33,-1,5,2,1,-3,-21,24,-34, 
  /* [38][0][][] */ 7,-80,-15,27,6,-52,-21,-19,-18,-17,-44,-68,46,-74,-65,-37,-6,-17,-14,-10,97,46,8,-10,25,25,-7,9,-4,53,14,-57,39,-11,3,-106,52,-95,42,-83,14,-22,-29,17,-19,0,12,27,-18,44,-8,-93,-29,-46,-74,-3,-5,-13,22,-12,-127,-4,-34,11,-39,-28,2,-53,7,-3,47,-8,1,-37,-83,13,17,-109,-19,-47,45,-64,21,-54,-4,-111,-109,-8,-33,9,-12,-52,20,-65,-11,34,36,-11,-25,-122,22,3, 
  /* [39][0][][] */ -35,-57,-31,6,-14,-34,-1,48,-16,-55,6,10,19,-102,-68,-14,-81,17,36,-1,-10,-38,24,21,-42,11,8,-2,-63,-10,44,-83,-14,0,-5,-69,-3,28,-1,-68,-30,7,-70,32,-10,-22,26,-9,-32,-1,45,-19,-19,-19,-14,-8,13,-11,11,-3,-84,9,-25,26,9,-49,-22,-59,27,52,-28,16,-11,-13,-55,34,-25,-59,-18,-73,24,-94,-127,13,8,-88,-69,31,-17,-9,7,-33,43,28,-17,-11,-76,-80,-33,-108,-38,9, 
  /* [40][0][][] */ -11,-74,-8,-50,-46,11,-6,-2,17,-37,-33,32,-6,-55,-43,44,-64,-41,-2,16,-10,-41,18,-21,-7,58,-22,36,23,0,-8,-37,2,-4,18,-49,-7,18,11,-63,-7,-8,-58,-23,14,55,-52,-19,-8,-2,-57,9,-15,-2,12,42,-41,29,-17,16,-70,2,-61,19,-1,-30,20,2,-2,-12,-9,-21,-49,-34,-26,0,-16,1,34,-46,-25,-49,-43,-34,-4,-52,-57,-10,-29,2,-26,42,-25,47,13,-18,-110,34,-6,-127,-3,-42, 
  /* [41][0][][] */ -31,-85,-52,6,-62,16,-9,-5,5,-46,-38,73,23,-113,-66,22,-57,-57,-31,-9,0,-58,9,-10,9,34,-17,18,43,-14,-18,-44,7,7,-20,-53,3,4,15,-42,9,-6,-80,17,19,18,7,-12,25,14,-23,17,-6,-1,-22,71,-16,0,-3,13,-88,-55,-15,3,-32,-48,-36,18,-27,-40,51,-4,-80,-40,-64,-66,-48,11,-13,-50,-19,-110,-59,-8,11,-39,-40,48,51,13,31,-5,0,-3,11,-54,-77,47,-33,-127,-62,-48, 
  /* [42][0][][] */ -12,-1,10,-9,-19,-5,27,-41,-5,-37,-29,-33,-8,-48,-21,-46,-68,-35,-17,-5,-31,-37,16,-16,4,33,-2,6,-10,-23,-38,-43,21,19,14,-40,-35,26,36,-47,28,21,-58,20,38,-15,28,-6,21,2,-30,-16,12,28,-24,29,-23,-22,4,-17,9,17,-36,14,-14,-15,-24,17,36,50,21,-20,-20,-9,-71,15,-1,2,7,-32,-1,-112,-84,-29,3,-72,-51,-10,13,-6,-6,0,0,32,-4,-10,-127,-86,-41,-61,-55,0, 
  /* [43][0][][] */ -44,-6,14,-30,-98,41,-41,21,54,-81,-24,13,-2,-127,-76,-23,-86,19,2,-12,-30,-60,-52,-76,-21,-37,32,12,0,-32,-17,-33,-12,-18,16,-54,-2,68,20,-31,-34,21,-65,12,1,52,-59,-58,21,-20,-58,-8,43,25,24,-2,-14,24,-34,-15,-48,57,-71,12,23,-2,26,-28,21,26,6,7,11,6,-64,23,64,-14,-6,-72,-56,-119,-126,-46,-41,-88,-34,-44,-62,-18,-4,-40,-60,-32,-20,0,-79,-7,62,-115,-48,3, 
  /* [44][0][][] */ 13,-45,5,23,-40,36,-32,32,-7,-54,-29,9,1,-85,-57,18,-49,52,6,-29,11,-66,-12,-6,-38,0,21,16,2,7,9,-53,2,31,-19,-75,10,-22,-34,-66,-27,-13,-30,-38,-6,-2,-22,20,13,24,-48,13,47,16,34,4,24,-19,-57,49,-49,19,-70,-25,9,-10,5,-3,18,-15,-36,-11,6,15,-82,-6,29,-55,2,-53,-95,5,-72,-7,-47,-67,-61,-48,-127,-32,36,-60,-8,65,-11,-23,-65,12,18,-57,0,8, 
  /* [45][0][][] */ -30,-72,-25,-13,8,23,26,-61,8,-87,-62,-14,-5,-123,-76,-40,-68,-49,-35,30,13,-72,-4,-31,28,13,-38,-3,71,-10,-21,-98,25,29,-30,-56,-12,-19,35,-80,65,36,-60,-20,1,-7,-35,8,44,14,-126,-1,24,34,22,13,-13,27,-31,-12,-20,-27,-44,-3,-27,-21,29,45,7,-41,55,-75,24,21,-54,-49,-6,11,-18,-59,-16,43,-109,-87,31,-9,-44,-17,-29,39,-14,-51,3,-11,0,-25,-127,25,-8,12,-65,3, 
  /* [46][0][][] */ -23,27,27,-24,10,35,-36,-17,-13,-1,-36,-2,-12,22,16,-5,-26,27,-45,-36,-16,-4,-16,-19,-34,19,11,-70,-3,0,2,34,-47,10,4,12,-1,-17,-36,2,-60,27,37,2,28,-8,23,-31,-36,-55,40,-91,-24,-91,-44,-48,31,-117,-13,18,-30,-1,-21,-11,-127,-12,-37,-8,28,-62,-9,10,24,0,20,-14,4,7,0,20,-20,-60,-18,-24,-26,9,-6,19,-16,11,19,-13,-9,-14,-24,-17,10,-29,42,-43,28,-19, 
  /* [47][0][][] */ 14,-58,3,19,-20,42,5,16,2,-18,-44,37,13,-127,-40,-6,-13,-18,-11,-20,19,-55,-18,0,36,4,16,1,17,-11,2,-42,5,12,4,-29,-4,-35,-11,-25,-5,19,-6,-18,14,8,30,14,27,-14,-47,9,68,19,-10,-31,3,5,31,-11,-51,6,-16,-36,-55,-21,34,22,17,-9,36,-3,-43,-41,-19,-45,23,8,12,-20,-55,-52,-67,-10,-21,-41,-49,-73,-21,43,5,-8,5,-16,-2,-36,-35,14,-18,-79,-9,-8, 
  /* [48][0][][] */ -13,5,-14,-13,-28,-44,29,-6,12,-30,-13,24,-11,-67,-42,-25,-41,15,-1,15,-6,-51,15,-39,-10,-32,33,-17,-33,1,7,-53,-4,5,-11,-55,-24,26,36,-32,-29,12,-36,31,16,-2,-34,45,11,-6,-1,3,2,21,-28,-28,14,3,-6,12,-10,13,-29,-7,20,7,-5,-10,36,4,10,4,-2,21,-43,16,26,-1,-17,-31,-16,-83,-75,-23,14,-71,-42,5,-63,-21,29,-42,-14,-5,5,-2,-127,-49,-2,-45,-35,14, 
  /* [49][0][][] */ 39,-108,-9,-11,-32,-10,17,3,-29,-21,-2,13,4,-127,-38,-22,-43,18,35,-25,5,-35,-8,-5,26,-12,-29,-1,3,32,28,-37,25,31,0,-71,-14,9,22,-22,14,-36,-64,-3,-23,-27,-7,13,-18,7,4,49,13,-7,39,25,0,-20,51,4,-54,-20,-19,-31,-26,-24,11,19,-38,-12,36,12,19,27,-56,17,70,22,-40,-46,-17,-12,-57,-48,17,-28,-53,31,-11,23,-15,-84,-65,46,20,17,39,-37,35,-91,-14,-38, 
  /* [50][0][][] */ -39,-67,-24,6,-12,5,19,12,-37,-34,-14,29,-42,-86,-33,21,-68,7,5,-73,24,-60,-14,20,-26,-36,4,-16,-43,-18,8,-60,-10,18,14,-63,25,53,21,-77,-36,-8,-83,27,30,35,-70,-21,-15,-34,7,54,-13,-1,23,33,15,-20,-9,10,-67,47,-64,-15,15,-7,-82,-40,39,23,50,22,13,31,-46,14,71,2,-2,-40,-32,-38,-119,-31,-3,-71,-41,-23,-73,-30,4,-31,-10,63,13,10,-127,6,59,-53,-18,-50, 
  /* [51][0][][] */ -34,-68,-8,-14,-74,47,-9,28,-2,-92,-18,9,67,-102,-63,-48,-54,59,31,-33,2,-57,-48,-7,-26,-17,10,1,41,-13,-20,-58,5,33,-13,-56,-24,24,-40,-69,14,-8,-91,-26,-37,-43,17,-34,37,53,18,6,22,-22,0,-13,33,-14,-30,81,-54,17,-27,1,11,5,-40,23,-16,15,-25,-16,51,-22,-102,-12,-4,-17,-24,-109,-3,3,-107,6,-37,-17,-83,-12,-19,14,-18,-47,-7,36,25,-22,-127,-11,54,-27,-82,-15, 
  /* [52][0][][] */ -30,-101,53,24,-59,13,-44,26,22,-80,-86,2,6,-93,-75,49,-108,-63,13,-39,-11,-87,25,4,-18,69,-41,48,33,-18,-34,-72,18,35,-15,-87,42,-63,14,-102,-4,-22,-60,-6,8,48,-10,1,11,50,-96,21,-19,-13,-10,17,-16,-26,-36,2,-127,14,-57,-27,-30,-69,-24,-34,-10,-15,1,-39,-116,-70,-67,-73,32,-53,24,-40,29,34,-119,-70,21,-121,-56,23,-54,-37,79,-37,51,19,-3,-86,-51,25,-23,-57,-29,2, 
  /* [53][0][][] */ -26,-67,-5,28,-27,12,27,31,-11,-17,19,22,-3,-127,-42,-37,-29,1,16,-4,6,-17,11,1,15,0,-11,-1,30,-7,-7,-36,-13,-3,-17,-45,-22,-8,10,-15,9,-14,-22,-8,-13,-27,-24,1,-10,20,10,21,5,-32,3,18,-1,-11,16,16,-40,-1,-25,9,-19,-22,-30,14,-11,-7,6,-40,3,0,-31,-20,4,8,-33,-32,10,-37,-81,-10,29,-27,-17,17,-13,9,7,-8,-32,43,-13,-6,-78,-53,10,-27,-20,3, 
  /* [54][0][][] */ 20,-56,-1,-1,-52,-50,-66,-13,-10,-59,-76,-52,-32,-32,-70,-42,-26,18,-30,-22,22,47,-27,-26,-2,79,32,-101,35,25,33,-92,32,22,-6,-117,27,-53,16,-126,-78,35,-36,16,-41,42,9,3,-11,-59,-10,-29,36,-89,-47,14,6,-88,-22,42,-118,-30,-48,-12,-50,-72,12,-72,36,-67,54,16,42,11,-102,-6,31,-127,-25,-78,-17,15,31,-41,-28,-69,-78,1,-95,11,-38,-69,13,-92,-35,6,69,-56,-12,-114,26,-33, 
  /* [55][0][][] */ -41,-61,-11,19,-6,-5,17,-9,-13,-82,-54,-19,20,-96,-49,-11,-86,-46,-44,19,22,-89,11,20,19,-1,-12,-5,-7,-30,7,-86,1,30,16,-53,14,-14,36,-44,-1,37,-14,-24,-13,-3,2,3,23,30,-48,-2,2,9,-69,-31,-10,48,20,-14,-23,25,-41,20,40,-16,-18,18,3,-5,-64,-29,12,-42,-55,7,-33,6,8,-90,12,-7,-127,-61,-25,-22,-55,2,-27,-6,-29,-54,35,-6,18,-35,-93,-13,21,0,-8,-16, 
  /* [56][0][][] */ 32,5,23,-17,-19,-5,-127,8,-4,10,-7,-9,-78,-5,14,5,-8,-25,-65,-21,-2,-6,-75,-26,-40,-5,-14,-12,47,0,21,13,-33,61,15,-1,11,-55,7,-1,-68,29,-9,-2,-11,25,5,21,-64,-17,9,-43,10,-54,-58,9,-13,-60,0,-15,-41,27,-17,15,4,-21,-6,4,2,-95,-20,6,-7,-30,19,-27,15,0,-15,3,-13,11,-14,-3,-19,7,7,6,-9,9,-47,9,14,-23,11,-41,9,1,19,-4,-11,-10, 
  /* [57][0][][] */ -1,-7,23,8,-63,-25,35,0,-23,-46,-69,-13,-5,-33,-44,-85,-42,-18,-11,4,-18,-64,49,12,1,-22,9,6,27,-5,1,-62,11,17,-3,-27,-33,-13,31,-28,-3,5,-54,-12,52,-17,31,11,39,28,-24,-5,2,0,-37,8,0,8,11,29,-7,-23,-60,25,-23,-36,-12,-6,2,-16,-21,-13,16,10,-51,22,-23,-7,13,-66,-4,-12,-87,-35,-7,-42,-50,5,-11,2,7,-8,10,-6,15,16,-127,-37,-47,-48,-69,6, 
  /* [58][0][][] */ -49,-19,0,17,-56,41,-5,46,16,-53,-24,6,-10,-104,-46,1,-64,34,10,4,50,-74,-15,-47,-38,-48,25,2,-10,9,-19,-92,-7,-2,-11,-39,14,66,17,-39,-45,46,-87,-22,25,20,-23,-51,27,14,-67,-4,36,-2,-25,-39,18,39,-19,20,-35,27,-41,3,26,-7,13,13,57,13,-49,-6,27,-18,-102,9,15,-25,6,-83,-104,-127,-99,-50,-45,-79,-49,-58,-58,-5,-21,-43,-32,-34,-25,-34,-68,-21,89,-82,-20,0, 
  /* [59][0][][] */ -21,27,0,14,-47,17,15,-41,-8,-59,-15,-16,11,7,-56,-17,-84,-18,10,-34,-2,-63,-10,1,-23,38,-14,34,-2,48,-18,-41,32,21,-12,-37,8,31,-19,-19,22,3,-5,5,18,-33,25,-38,-4,-1,-12,-22,-11,15,-6,-7,0,-34,-6,34,-35,-9,-15,2,-15,-15,-3,-17,-26,34,5,16,-32,-12,-66,11,-39,-1,7,-68,8,-127,-36,-19,-42,-73,-50,26,-3,23,-32,-21,25,43,7,-25,-62,7,21,-81,-51,-46, 
  /* [60][0][][] */ -16,-123,62,32,-42,14,10,49,-42,-42,16,29,-47,-127,-44,48,-13,33,38,-24,34,-102,1,-20,57,5,2,-20,-2,71,60,-74,-5,9,-20,-70,-10,16,-6,-37,-32,34,-115,-5,17,59,-118,13,-15,-6,10,65,35,-25,21,-5,0,-3,43,17,-99,-34,-53,2,-12,-37,16,24,-19,20,12,14,34,-14,-44,-18,53,17,9,-30,-99,-72,-3,-1,6,-77,-69,-91,-66,22,7,-22,-49,89,-8,-46,58,5,53,-84,-37,-49, 
  /* [61][0][][] */ 4,20,-17,-11,23,34,-47,24,0,26,-18,22,-32,-32,-5,-2,14,0,-29,-45,13,-11,-11,-97,9,22,-14,-78,-26,-4,23,14,-91,55,5,-10,9,-16,-2,26,-8,-9,-10,32,32,-10,0,9,2,-77,30,-127,13,-79,-12,22,-5,-106,17,-21,-66,-7,19,-9,-65,-43,-22,10,8,-64,34,18,-52,-21,26,-71,3,1,-60,24,0,-16,-10,-1,11,17,9,28,26,-30,-25,25,-39,-16,-23,-101,27,-13,-26,-36,-19,-31, 
  /* [62][0][][] */ -8,-70,8,-2,-60,5,-26,13,41,-40,-29,13,35,-127,-36,-33,-33,-47,16,-12,-46,-44,-24,-45,14,9,2,14,38,-14,-29,-43,18,15,-4,-73,-1,-29,26,-25,36,-22,-56,-18,-15,9,-5,33,30,26,-58,-11,11,3,35,0,-25,10,12,-26,-67,3,-11,-35,-14,-27,23,12,-93,-9,9,4,-15,-11,-52,-14,15,-20,19,-59,-2,-113,-78,-20,43,-32,-27,-32,-27,-4,17,-61,-10,25,-18,-16,-59,38,0,-101,-82,-4, 
  /* [63][0][][] */ 5,-121,-29,20,-104,-25,20,48,-19,-26,-10,37,-6,-124,-93,-17,-24,53,20,18,8,-42,3,21,13,-16,34,-26,11,10,6,-86,-2,12,-24,-67,21,20,18,-62,-19,27,-99,-25,-14,12,-109,-15,-45,19,50,47,-18,-72,12,11,0,29,-5,50,-62,-21,-69,5,37,-33,-12,-101,2,-1,2,-43,30,-28,-70,-14,-26,-47,-33,-79,4,-27,-127,-26,14,-104,-53,22,-35,-44,10,-72,-32,44,21,-12,-103,-86,3,-106,-11,-6, 
  /* [64][0][][] */ -77,-123,-7,-7,-46,-38,13,-28,-4,-90,-67,32,-2,-33,-19,-66,-48,-1,25,-10,12,-28,-18,28,12,57,20,8,29,-60,-79,-41,21,17,9,-49,-33,32,-6,-38,47,0,-22,17,12,-5,12,-50,11,1,-20,-9,16,6,35,53,-11,-14,-1,54,2,-24,-59,-22,-2,-56,-11,2,11,61,37,9,-14,-53,-34,-95,-33,-5,36,-56,-18,11,-65,-26,17,30,-47,-11,20,12,2,-34,29,58,10,4,-127,-59,-5,12,-96,-28, 
  /* [65][0][][] */ -16,-8,22,-18,19,15,-87,16,-13,-7,-22,25,-65,18,12,19,19,-19,-17,-44,5,22,-39,-29,20,68,15,-82,39,-7,4,39,-51,-12,13,-42,-4,-31,8,-10,-64,34,-22,15,-3,61,-4,-12,-14,-20,1,-71,-36,-127,-38,20,-16,-126,-10,2,-81,9,-15,-1,-54,-45,-5,19,14,-50,6,23,-57,1,22,-25,10,3,6,19,4,-38,21,-16,-13,-14,4,10,-21,55,10,1,10,16,14,-31,17,9,-10,-18,15,-50, 
  /* [66][0][][] */ 3,-59,-11,34,-56,7,43,-9,-19,-57,-63,-3,-7,-127,-36,-44,-50,-22,11,-15,16,-57,69,22,-8,-22,-10,4,30,2,14,-49,-5,5,12,-75,-7,-26,0,-66,6,-4,-69,-8,12,-21,37,10,-1,36,13,4,-20,-4,-20,-7,10,-5,14,32,-37,3,-51,37,-46,-28,-17,8,-3,-23,-32,-12,35,13,-40,-3,-40,-7,-6,-40,1,-78,-116,-34,-18,-60,-64,17,12,43,1,0,12,9,6,2,-101,-3,-37,-101,-13,15, 
  /* [67][0][][] */ -15,-44,-10,35,-127,18,-4,48,17,-84,-76,3,-29,-127,-107,3,-36,16,17,8,61,-98,21,-29,-25,2,-19,9,27,34,14,-68,-3,11,26,-91,15,23,-10,-32,-33,42,-79,-68,-1,51,-44,-18,-20,14,-48,1,31,-15,26,-17,-11,50,-22,31,-9,4,-58,-23,38,-62,66,-68,68,1,-63,-6,19,-40,-100,0,-2,-31,26,-49,-111,33,-78,-64,-8,-66,-89,-67,-71,-26,-16,-57,3,-35,17,-75,-46,1,64,-71,3,-22, 
  /* [68][0][][] */ 42,24,19,-31,-15,2,-115,-44,-25,14,-15,-14,-68,-12,21,2,-13,-16,-94,-73,1,-7,-64,-74,-46,-6,4,-99,-41,-7,23,13,-91,89,13,-6,16,-29,10,-13,-88,38,4,-1,-14,52,6,25,-31,-24,36,-91,24,-127,-56,12,3,-105,-10,-25,-29,4,-15,19,-14,-36,-21,5,-21,-74,4,11,-8,-10,45,-64,28,1,-28,36,-10,-29,-34,3,-24,15,16,15,-8,4,-9,15,9,-34,-9,-74,24,-15,26,-52,-21,-5, 
  /* [69][0][][] */ 73,15,46,-3,-25,28,0,7,-6,-23,16,-38,-5,-37,-68,8,-43,10,49,20,-9,-96,29,-12,13,-33,-18,-28,-14,88,26,-91,-3,4,16,-100,4,-10,38,-41,8,-24,-90,28,10,-45,12,-3,17,-1,-43,1,11,38,0,-1,38,-12,52,-65,-89,1,-34,41,-2,-25,21,0,-19,64,-40,42,-42,1,-48,15,7,-7,-9,-69,-48,-127,-69,-3,8,-24,-75,-6,30,30,13,-40,-14,-23,33,-18,-98,25,-37,-117,-19,-19, 
  /* [70][0][][] */ -35,9,-14,-12,-1,19,-123,-14,-8,-11,-3,20,-72,24,-1,4,-31,21,-48,-40,-48,7,-127,-9,-41,17,8,-46,2,40,-15,27,-44,-2,-2,29,27,-91,10,-24,-74,28,-9,8,-20,-7,15,-11,-102,-10,4,-24,-23,-60,-36,18,4,-41,-2,-6,-22,12,-21,-3,-12,-16,-3,8,-2,-80,-10,11,-6,-8,5,20,5,-20,-10,18,-9,-47,-9,-18,-4,1,-4,21,10,-1,26,10,-1,32,3,-16,-4,4,-4,-26,18,-19, 
  /* [71][0][][] */ 15,-86,8,25,-15,58,7,31,-57,-69,-78,-23,14,-97,-89,11,-95,5,4,-64,31,-58,25,12,-62,14,15,21,1,5,41,-76,2,-3,-2,-85,-1,6,-61,-76,-28,-1,-76,1,30,-12,28,-5,38,2,-63,3,28,14,16,8,37,-24,-46,0,-100,47,-30,-30,-29,18,-21,21,41,0,-58,13,-10,4,-54,12,-9,-21,15,-78,-108,-33,-122,-24,-26,-81,-47,-83,-16,20,1,18,-2,36,19,-18,-127,6,-6,-74,-16,-4, 
  /* [72][0][][] */ 7,-122,-41,30,-33,28,-27,14,-15,-49,-48,8,-34,-108,-36,16,-68,16,18,-5,50,-59,10,17,-32,6,-2,-30,18,19,41,-18,-81,15,12,-71,-11,13,-70,-25,-35,-27,-74,-15,2,49,-88,13,2,-24,-64,37,25,21,18,45,43,12,-54,29,-82,46,-44,-5,-47,30,-75,24,62,8,-15,3,17,0,-35,-2,-5,6,-22,-63,-110,-73,-127,-27,3,-78,-41,-52,-62,-2,46,-6,8,40,31,-22,-108,-3,28,-108,2,29, 
  /* [73][0][][] */ -32,-59,21,-9,-36,-16,32,-86,-35,-93,-24,13,77,-62,-87,-44,-85,14,4,-32,-26,-65,-62,-6,39,-17,-13,-12,40,-20,5,-84,9,43,-12,-86,-12,8,-13,-61,29,12,-86,-64,-49,-18,4,14,57,48,-13,7,27,1,-10,-35,33,37,12,68,-52,7,-39,-11,37,0,38,-2,-25,5,32,-32,48,-28,-113,17,-17,-15,-10,-110,-8,-13,-103,-38,-41,-44,-67,8,-49,27,-47,-75,7,27,20,26,-127,3,23,-31,-69,-20, 
  /* [74][0][][] */ -15,-5,11,-6,-45,-24,45,-30,-3,-72,-20,3,-13,-42,-32,-7,-60,9,4,6,-18,-32,30,-16,16,-13,11,-29,-9,-9,5,-56,6,13,8,-59,-11,15,31,-41,-10,0,-40,13,9,-15,-17,34,17,11,-12,14,14,33,-13,-7,20,6,3,0,9,5,-51,9,-1,1,20,7,4,16,10,4,-1,30,-54,4,14,-5,-19,-52,-19,-17,-82,-13,17,-19,-46,1,-32,22,14,-47,-27,14,-4,30,-127,-26,-43,-34,-49,19, 
  /* [75][0][][] */ -19,-90,12,16,1,13,-50,37,47,-119,-64,47,41,-127,-83,79,-50,-1,5,-29,-47,-83,-3,-34,-50,26,-6,-13,19,-48,-49,-35,25,-4,-14,-92,59,-2,10,-57,-26,-46,-35,14,-45,-7,-27,22,-11,23,-46,0,-67,-25,18,1,-19,-18,32,20,-108,-17,-71,-43,21,-83,-34,17,-75,14,-43,35,-40,-23,-59,-15,14,-8,29,-101,55,31,-108,-66,81,-112,-66,37,-19,3,67,-78,45,40,5,-19,-99,26,-16,-39,-50,29, 
  /* [76][0][][] */ 7,-4,5,-27,-29,52,-4,19,17,-61,-51,4,-11,-127,-17,-26,-92,-26,-25,35,29,-42,-13,-63,-40,-5,-21,-8,-5,-7,-17,-90,-17,-12,4,-40,4,54,53,-45,-15,-20,-46,39,25,62,-75,-52,12,-60,-64,23,0,28,11,-2,-7,40,-11,-34,-63,15,-49,32,-18,5,16,30,24,-12,29,18,-8,63,-34,33,47,21,-38,-57,-68,-84,-112,-68,-44,-60,-67,-5,-69,27,24,-17,-77,-16,-5,-29,-123,-19,43,-64,-33,-14, 
  /* [77][0][][] */ -49,-127,-43,93,-18,29,-37,48,4,-26,-51,-30,-18,-66,-53,-33,-54,14,-12,-86,18,30,25,7,61,-8,-89,-50,30,-25,-8,-21,-57,18,7,-10,87,8,59,-49,1,9,-27,7,16,-18,-44,-12,-48,-47,-36,26,-22,-53,-15,-54,91,17,92,5,-43,19,-21,-42,23,-37,-18,-10,37,16,22,15,-12,-9,-23,5,-29,2,50,-39,-36,-80,-118,-85,-18,-41,-61,-56,-77,20,-37,-55,-21,50,18,-44,-44,-6,32,-83,-9,-20, 
  /* [78][0][][] */ 27,24,-15,3,-50,-14,-123,13,25,-26,-19,5,-53,-23,14,-20,25,-6,-14,-2,14,-10,-127,-9,-11,-1,21,-48,-7,3,-9,-11,-18,-11,-12,-1,-19,-69,7,1,-68,-2,21,4,10,-4,-2,-5,-76,-1,-12,-30,3,-82,-63,5,5,-56,19,2,-18,-6,-41,-11,-41,4,2,10,-12,-87,-14,-5,3,9,-5,1,4,25,26,6,-7,-20,-16,28,-48,-11,16,0,2,-8,-25,-18,2,-14,-6,21,-1,-37,6,-6,19,20, 
  /* [79][0][][] */ -16,-9,-24,-3,-32,24,-65,-23,-9,0,-16,-15,-6,31,-14,8,-25,-4,-34,-20,-20,23,-28,-36,6,12,-32,-98,-4,39,-8,27,-79,-1,20,20,42,-44,26,-21,-24,4,16,29,-12,-7,12,-8,-12,-40,-5,-77,-2,-127,7,5,-20,-84,18,-40,-49,0,-16,11,-31,-22,-3,-13,-28,-7,-11,1,-6,-6,1,24,-11,-46,6,19,27,-36,-3,-6,-33,-6,20,6,-9,18,-20,-17,8,10,9,-27,-16,25,-27,-50,12,-26, 
  /* [80][0][][] */ -19,-6,-18,24,-40,45,17,39,-13,-29,-71,-14,16,-127,-56,-8,-31,8,24,3,39,-30,-16,-18,63,-1,3,4,-12,-15,-12,-54,2,-7,26,-50,-16,-1,-5,-16,-22,27,-50,-34,19,-24,60,21,18,3,-51,3,73,-4,27,-12,14,8,63,7,-33,-7,-24,-32,-34,-23,69,35,10,8,11,-8,-12,-24,-32,-40,14,2,24,-31,-37,-60,-87,-21,-16,-47,-64,-88,-4,19,-43,-31,-32,-7,16,-31,-78,5,28,-63,-28,-16, 
  /* [81][0][][] */ 3,-19,5,17,-67,39,-26,35,30,-52,-31,-4,9,-127,-58,21,-36,-9,-37,0,-16,-60,38,-27,-14,-15,15,4,33,-11,-20,-60,-27,-11,16,-17,-5,-4,11,-65,-11,-8,-88,6,-4,50,18,11,3,-27,-56,27,-7,27,8,-12,-36,13,10,-17,-60,-18,-14,26,-29,-40,58,-5,0,-33,-13,11,10,69,-33,16,26,-36,3,-21,-38,-48,-107,-10,-2,-22,-38,5,-7,57,36,-2,-49,5,-13,-19,-89,8,-49,-71,-36,-6, 
  /* [82][0][][] */ -39,-49,-40,-25,-87,-83,38,22,-5,-85,1,52,12,-85,-101,-12,-93,57,-19,38,-2,-110,22,-20,-45,-35,101,-18,-21,-1,-3,-118,-6,21,22,-127,-36,43,43,-96,-35,30,-55,51,43,0,-122,19,46,2,2,8,29,10,-18,-20,33,23,-6,82,-49,3,-89,-26,33,-6,-8,-23,109,13,-3,-37,-17,16,-111,9,-28,-7,-11,-111,-40,-111,-113,12,15,-95,-93,-6,-84,-21,26,-43,-39,11,6,-27,-105,-65,0,-118,-100,25, 
  /* [83][0][][] */ -34,5,-28,3,-23,-27,-19,44,24,-52,-53,19,0,-58,-73,-12,-67,4,-9,4,-39,-95,38,-27,-93,-15,33,-8,9,-30,-29,-30,3,-4,-24,-43,16,10,17,-59,-30,14,-13,23,37,18,3,-9,11,1,-62,-29,-39,-14,-35,16,-31,-22,-24,3,-102,-30,-32,28,1,-60,-32,12,-15,-18,-46,27,-1,9,-95,-4,19,-16,4,-42,28,-2,-100,-48,14,-127,-43,33,-11,-24,62,11,32,-35,-9,-13,-72,-44,-29,-83,-19,42, 
  /* [84][0][][] */ -34,-21,-30,11,-52,4,14,4,13,-59,-49,0,-5,-91,-60,10,-90,1,10,-41,33,-61,-37,-4,-15,-12,-64,19,40,-29,-6,-49,11,29,-13,-62,-9,58,30,-25,43,12,-31,-3,6,0,19,-103,-8,-29,1,-13,-20,-29,15,-41,2,13,2,6,-44,-25,-34,-20,-20,8,-64,31,-9,-1,-8,-16,71,-22,-44,-4,-10,13,1,-81,28,-127,-103,-96,-32,-105,-52,15,-49,-15,-45,-52,-4,-25,-20,-15,-61,-19,80,-97,-9,-2, 
  /* [85][0][][] */ -8,-64,-18,-5,-127,-39,-40,16,65,-57,-41,-21,10,-41,-68,-21,-59,-21,-16,-35,-2,-30,-5,-19,-14,27,41,11,10,-28,10,-85,23,-14,8,-38,-70,-3,7,-46,27,25,-31,11,-23,-13,8,35,32,-11,-83,12,9,-2,-2,-22,23,-5,21,67,-42,6,-54,-40,-3,-29,1,10,-43,-22,-25,-24,-6,8,-50,13,12,23,47,-58,-78,4,-39,-43,25,-40,-30,10,-55,4,-18,-50,17,15,10,35,-69,-45,-27,-13,-8,14, 
  /* [86][0][][] */ 22,-26,-11,41,-39,-25,-10,-46,-22,-28,-62,-4,-51,-18,-66,21,-87,4,10,-2,31,26,33,38,81,63,-65,9,33,46,21,-38,46,21,15,-45,48,-11,-10,-87,-31,-32,-15,-29,-8,-6,-42,37,-53,-52,13,7,-13,-42,-30,-39,32,-29,9,19,-127,47,-70,-42,-32,-49,21,-56,41,0,44,16,-7,-32,-50,-16,-8,-1,36,-25,-66,45,32,-92,-4,-65,-82,-35,-125,24,-27,-67,24,-2,21,-14,10,-22,17,-70,16,-48, 
  /* [87][0][][] */ 7,12,1,-46,-68,18,15,-78,-4,-69,1,-2,11,-110,-83,-34,-80,-1,-7,-38,-36,-77,-25,-6,29,-6,-5,-11,-9,0,-8,-59,15,9,-12,-43,5,32,1,-60,2,-16,-73,15,20,0,63,13,24,4,-90,29,3,48,11,24,-1,-11,-7,-24,-37,-27,-15,-7,15,-22,41,28,-18,24,57,61,-11,38,-70,24,61,-6,-8,-28,-24,-77,-108,27,21,-58,-78,14,19,14,9,6,-34,9,-7,-2,-127,-38,-58,-55,-63,-9, 
  /* [88][0][][] */ 4,-88,13,29,-51,-31,56,-31,-13,-91,-113,-14,-45,-52,-16,-50,-69,8,-7,-10,46,-48,21,2,-11,-35,-7,-7,16,-14,-30,-77,11,28,-19,-26,-9,28,11,-91,2,5,-44,-20,16,-20,-61,-10,19,18,-17,-3,35,30,7,-39,21,7,-10,51,13,-5,-62,-57,-4,7,6,-28,5,-8,36,-7,52,24,-33,-23,-35,-17,-9,-90,-14,4,-93,-71,-57,-24,-92,-6,-80,4,18,-35,-25,-4,0,3,-127,-114,46,-45,-67,10, 
  /* [89][0][][] */ -4,-65,-12,44,-12,15,5,14,-9,-53,-42,2,11,-49,-49,-22,-33,-9,65,10,5,-38,2,-2,-21,-21,-23,-33,-23,8,-24,-30,-1,50,24,-40,7,3,20,-24,13,-3,-35,3,-6,15,6,25,-28,-3,-49,-6,-5,24,-10,-35,14,20,1,-47,2,10,-53,19,11,-34,-1,-8,14,26,-1,11,0,3,-51,-27,5,6,-19,-33,-18,23,-87,-12,-4,5,-59,-13,-10,0,34,-30,2,-22,13,9,-127,-5,17,11,-28,-11, 
  /* [90][0][][] */ 9,-31,-22,-9,-36,-40,-14,9,1,-35,-37,-21,-11,-59,-45,3,-37,57,-37,-71,25,-61,-38,-49,-13,27,-7,-122,26,43,7,-68,6,16,-19,-34,55,-29,15,-83,-28,-53,2,24,-21,4,-12,16,-42,-26,38,-34,22,-19,-12,43,-2,-76,-22,47,-55,-8,-53,-39,-81,-46,-40,-75,6,-45,41,-8,27,-8,-84,-17,41,-127,-32,-42,-1,-22,-42,-11,-5,-52,-63,43,-57,-16,-16,-41,22,-3,4,16,51,-58,-43,-78,33,15, 
  /* [91][0][][] */ -13,-70,-1,2,-13,12,9,-4,-17,-48,-32,-4,15,-127,-21,14,-55,-28,-31,-6,12,-74,15,-17,40,8,-26,12,62,-18,-31,-61,7,11,-26,-62,-2,-20,19,-44,13,-23,-68,-12,8,18,35,14,-34,-22,-76,38,-6,22,9,25,-26,3,14,8,-86,5,-40,18,-19,-48,72,-81,-24,-43,24,-2,17,62,-29,-4,38,-32,-7,-59,-60,-26,-79,-29,12,-59,-94,5,-14,54,11,-8,-67,14,-3,-18,-95,6,-29,-79,7,-21, 
  /* [92][0][][] */ -37,17,-46,3,36,2,-91,-29,-33,30,-4,26,-28,17,-30,-12,-30,36,-33,-69,-17,5,-69,-77,-70,40,13,-88,1,34,-26,12,-57,9,-15,29,19,-40,-10,6,-99,9,-8,5,3,3,14,-23,-37,-54,20,-66,-59,-127,-8,31,-1,-102,-20,-9,-57,6,2,-19,-22,-26,-24,14,-7,-78,-37,18,-20,-2,26,24,22,-36,-16,28,-14,-26,-6,-11,-36,15,3,-6,-13,-20,13,15,-21,62,0,-26,-9,-14,-31,-45,34,-18, 
  /* [93][0][][] */ 46,-50,-31,38,-99,-18,22,-39,-49,-37,-48,23,-29,-110,-81,-25,-114,28,19,-23,9,-56,-5,7,66,-64,-11,-59,37,-12,7,-94,-23,12,8,-94,56,-6,12,-57,-11,-19,-93,9,-9,33,-28,49,0,-19,-33,95,6,34,15,-55,6,51,-26,-36,-31,-38,-43,38,31,-93,65,-52,-4,-23,53,16,19,81,-56,12,82,2,-37,-62,-65,-125,-97,-1,23,-79,-88,31,-69,71,3,-63,-56,-1,23,7,-120,9,13,-127,-10,10, 
  /* [94][0][][] */ -21,-47,10,21,-25,-13,12,-12,15,-36,-40,3,20,-127,-66,-31,-37,2,-10,11,18,-58,-1,8,35,8,-22,3,28,25,-19,-53,33,7,-19,-69,-35,19,-10,-62,7,9,-28,-7,56,-32,33,-29,32,-5,-41,10,4,-13,17,-11,29,-20,37,64,-37,21,-31,-8,-25,-51,42,-60,27,4,36,-26,14,-9,-73,-44,17,-11,19,-47,-55,-86,-122,-17,-11,-40,-65,-51,15,-9,-16,7,-36,-48,-21,-27,-120,-84,0,-67,-41,2, 
  /* [95][0][][] */ -50,-127,-73,64,-25,15,-45,7,-14,-62,-22,-93,-20,-42,-30,-6,-59,-3,3,-74,45,-16,52,21,79,-1,-85,-27,-3,3,9,-48,-46,18,3,-39,63,-24,42,-33,-12,17,-5,32,18,-3,-53,-7,-85,-74,-49,16,-40,-97,-12,-58,98,30,95,0,-55,43,-23,-46,-54,-55,-10,-3,56,20,44,38,-11,-13,-10,-4,-40,14,37,-68,-33,-57,-59,-27,-23,-47,-82,-47,-78,13,-82,-78,-26,72,-23,-36,-66,-22,60,-44,-6,-18, 
  /* [96][0][][] */ -58,-50,-4,7,-7,-2,-15,-29,-8,-22,-27,-10,23,-94,-53,-22,-69,-29,-23,-24,-25,-55,-11,8,34,-10,1,-25,18,-35,-35,-39,19,45,2,-60,47,-6,25,-42,46,-15,-31,-6,-7,-22,-4,26,8,16,-61,19,21,35,-1,-29,-22,40,26,0,-29,63,-8,1,9,20,-2,14,-8,-26,-16,7,18,11,-36,-16,17,40,-7,-21,10,-43,-80,-77,9,-81,-26,-1,-71,27,-35,-92,9,7,-9,-26,-56,-20,47,-127,-16,4, 
  /* [97][0][][] */ -41,-6,-12,-20,-6,-13,-56,24,-15,-15,-35,37,-14,27,4,25,-8,-19,-12,-45,1,39,-41,-3,-39,71,-2,-82,19,-15,-15,46,-64,-2,6,17,2,-12,-15,-3,-39,39,-40,-9,-18,43,3,-23,-24,-34,14,-105,-43,-104,-47,6,-15,-127,1,-3,-87,31,-15,-10,-70,-50,14,7,15,-31,-26,40,-23,-13,19,4,0,16,2,-3,-46,-4,8,-14,-18,-1,22,2,-26,51,-3,17,17,19,-17,-24,-11,3,-3,-46,36,-41, 
  /* [98][0][][] */ -36,-52,36,-17,-2,11,-22,17,45,-15,-20,21,15,-127,-60,-5,-27,20,-8,-12,-24,-42,-38,-43,36,0,36,-34,17,-29,-52,-13,-75,21,2,-77,2,-14,17,-46,25,10,11,39,12,13,-2,-7,-26,-24,-38,-31,3,-27,-5,-10,-22,10,6,-7,-68,-14,-17,-20,7,-30,-35,-17,-63,5,67,25,6,-8,-21,-19,9,24,-17,-27,15,-45,-104,-22,26,-31,-19,33,-18,-3,-2,-43,-50,-23,7,-29,-73,3,45,-25,-38,31, 
  /* [99][0][][] */ -44,-85,-7,-8,-45,25,0,92,-5,-7,30,-15,23,-127,-10,15,-32,31,39,-1,-21,-32,10,-27,17,13,-9,2,-29,2,-22,-12,-28,-7,23,-22,-7,22,55,-29,-17,-10,-79,26,26,-32,28,4,-15,19,-25,-3,16,-33,12,41,-8,-29,82,-6,-86,-34,-25,-22,-15,-56,32,-60,-7,50,-6,13,-18,-7,-12,16,37,-32,-27,-9,-49,-76,-114,-9,13,-31,-60,-21,16,-29,-12,-63,-17,42,9,-54,-99,-22,-32,-76,-69,-34, 
  /* [100][0][][] */ -22,-83,-20,34,-37,-28,-12,6,57,-59,-50,12,-33,-127,-32,-37,-63,22,7,-56,-11,-26,15,-13,-4,2,-2,12,18,-34,-20,-37,44,18,-2,-68,-35,3,31,-59,31,11,-59,18,-13,6,12,-8,7,-31,-48,-22,-1,19,69,-47,45,-36,59,24,-5,40,-61,-20,-12,-21,16,0,21,2,-24,0,-4,32,-63,10,35,22,74,-48,-19,-68,-76,-63,-18,-79,-33,-18,-28,-29,0,-85,4,-25,-15,30,-91,-60,58,-79,-3,6, 
  /* [101][0][][] */ -14,-17,-45,-5,-1,9,-46,36,25,-32,-15,-12,30,-18,-30,34,0,-20,-17,-14,9,-30,0,-3,-74,28,-4,-111,42,-2,-17,36,-101,32,-16,-29,22,10,0,-58,-11,25,-7,4,-45,38,-3,21,-30,-28,-32,-65,-48,-82,-31,-7,-26,-127,5,-53,-60,10,6,21,-74,-40,4,25,16,-46,1,1,-54,-2,-20,-30,10,39,31,-44,-77,-48,-23,-31,-26,-11,-19,2,-32,61,24,5,32,-19,7,-92,-30,-1,-17,-35,-12,6, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant56_scale = { 102, { 0.00078295648563653231, 0.00040306447772309184, 0.00066751189297065139, 0.00033407719456590712, 0.00050098227802664042, 0.00075690803350880742, 0.00083875248674303293, 0.00046546061639674008, 0.00071979011408984661, 0.00045667166705243289, 0.00049378117546439171, 0.0004877973988186568, 0.00038202645373530686, 0.00046497542643919587, 0.00075196084799245, 0.0012645105598494411, 0.00047169940080493689, 0.00044947137939743698, 0.00045149252400733531, 0.00052892696112394333, 0.00043402158189564943, 0.0003646154364105314, 0.00040951726259663701, 0.00041193043580278754, 0.00062454288126900792, 0.00072948681190609932, 0.0014139654813334346, 0.00048574362881481647, 0.00054589094361290336, 0.0007679829141125083, 0.00045528041664510965, 0.00063837639754638076, 0.00052657513879239559, 0.00056663592113181949, 0.00054995238315314054, 0.00070112582761794329, 0.00053680886048823595, 0.00082315958570688963, 0.00048837723443284631, 0.00045045732986181974, 0.00055634882301092148, 0.00047251582145690918, 0.00054242141777649522, 0.00039694702718406916, 0.00047087486018426716, 0.0004554608603939414, 0.00079260347411036491, 0.00064862717408686876, 0.00058765080757439137, 0.0005621738382615149, 0.00047550559975206852, 0.00042527841287665069, 0.00038317230064421892, 0.00074615777703002095, 0.0003994663420598954, 0.00049867253983393312, 0.00094558770069852471, 0.00053094018949195743, 0.00038783150375820696, 0.00056585832498967648, 0.00042870311881415546, 0.00070556794526055455, 0.00052150443661957979, 0.00038223952287808061, 0.00045125512406229973, 0.0007368866354227066, 0.00049854785902425647, 0.00039639751776121557, 0.00061208056285977364, 0.00051883602282032371, 0.00093941856175661087, 0.00043039181036874652, 0.00041070018778555095, 0.00040071728290058672, 0.00058177107712253928, 0.00040756017551757395, 0.00042335997568443418, 0.00044969393638893962, 0.0010329682845622301, 0.00079703470692038536, 0.00051996769616380334, 0.00054547097533941269, 0.00029669320792891085, 0.00048655376303941011, 0.0004471435968298465, 0.00054126093164086342, 0.00051526754396036267, 0.00047309993533417583, 0.00043828322668559849, 0.00061850569909438491, 0.00052675209008157253, 0.00049385020975023508, 0.0007068682461977005, 0.00035757434670813382, 0.00042791562736965716, 0.00047095984336920083, 0.00054778216872364283, 0.00078013737220317125, 0.00069088366581127048, 0.00053173152264207602, 0.00045009065070189536, 0.00063877977663651109, } };
const TfArray<102, int> quant56_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(16) int32_t tensor_data57[102] = { 761, 2152, -1257, -7766, -2262, 2796, -1869, -8526, -83, 408, -3432, -109, -5285, -4894, -4043, -361, -3147, -4167, -336, -6723, -2908, -1975, -6692, 494, 587, -1660, -4353, -5490, -6762, -1905, -2230, -6193, -2749, -1039, -2279, 3, -555, -4127, 5305, 449, -2262, 1312, -3665, -1828, -2683, -1662, 341, -2793, -3179, -9654, -10850, -3466, 1988, -4744, 6902, 1030, 1899, -377, -1866, -2990, -14809, 988, -1448, -3766, -7547, -4624, 271, -211, 2788, -3130, -2032, 365, -3409, -6038, -5249, -1039, -5641, -11819, -384, 96, -8472, -1499, -4176, 7619, -1040, -3130, -4459, -6680, -5369, -582, 1779, -4562, 1119, -10035, -2457, -14458, -4714, -858, -2940, -8726, -4202, 4445, };
const TfArray<1, int> tensor_dimension57 = { 1, { 102 } };
const TfArray<102, float> quant57_scale = { 102, { 1.8422506400384009e-05, 9.4838705990696326e-06, 1.5706162230344489e-05, 7.8606399256386794e-06, 1.1787818948505446e-05, 1.780960155883804e-05, 1.9735352907446213e-05, 1.0952015145448968e-05, 1.6936237443587743e-05, 1.0745216059149243e-05, 1.1618380995059852e-05, 1.1477585758257192e-05, 8.9888580987462774e-06, 1.0940598258457612e-05, 1.7693197150947526e-05, 2.9753189664916135e-05, 1.1098809409304522e-05, 1.0575797205092385e-05, 1.062335377355339e-05, 1.244534087163629e-05, 1.0212273082288448e-05, 8.5791871242690831e-06, 9.6357007350889035e-06, 9.6924813988152891e-06, 1.4695126992592122e-05, 1.7164395103463903e-05, 3.3269778214162216e-05, 1.1429262485762592e-05, 1.2844492630392779e-05, 1.8070186342811212e-05, 1.071248061634833e-05, 1.5020621503936127e-05, 1.2390003576001618e-05, 1.3332610251381993e-05, 1.2940055967192166e-05, 1.6497078831889667e-05, 1.263079684576951e-05, 1.936846092576161e-05, 1.1491229088278487e-05, 1.0598996595945209e-05, 1.3090560969430953e-05, 1.111801975639537e-05, 1.2762857295456342e-05, 9.3399303295882419e-06, 1.1079408977821004e-05, 1.0716726137616206e-05, 1.8649494450073689e-05, 1.52618158608675e-05, 1.3827077964378987e-05, 1.322762000199873e-05, 1.1188367352588102e-05, 1.0006550837715622e-05, 9.0158191596856341e-06, 1.7556654711370356e-05, 9.399208465765696e-06, 1.1733472092601005e-05, 2.2249123503570445e-05, 1.2492710993683431e-05, 9.1254469225532375e-06, 1.3314313946466427e-05, 1.0087132068292703e-05, 1.6601599782006815e-05, 1.2270692423044238e-05, 8.9938712335424498e-06, 1.0617767657095101e-05, 1.7338508769171312e-05, 1.1730538062693086e-05, 9.3270009529078379e-06, 1.4401895896298811e-05, 1.2207906365802046e-05, 2.2103966330178082e-05, 1.0126866072823759e-05, 9.6635340014472604e-06, 9.4286424427991733e-06, 1.3688731087313499e-05, 9.5896511993487366e-06, 9.9614117061719298e-06, 1.0581034075585194e-05, 2.4305136321345344e-05, 1.8753758922684938e-05, 1.2234534551680554e-05, 1.2834611879952718e-05, 6.9810166678507812e-06, 1.1448323675722349e-05, 1.0521025615162216e-05, 1.2735551536025014e-05, 1.2123942724429071e-05, 1.113176313083386e-05, 1.0312546692148317e-05, 1.4553075743606314e-05, 1.2394167242746335e-05, 1.1620005352597218e-05, 1.6632195183774456e-05, 8.4135144788888283e-06, 1.0068602932733484e-05, 1.1081408047175501e-05, 1.2888992387161124e-05, 1.8356173313804902e-05, 1.6256086382782087e-05, 1.2511330169218127e-05, 1.0590368219709489e-05, 1.5030112990643829e-05, } };
const TfArray<102, int> quant57_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int8_t tensor_data58[128*102] = { 
  -31, 34, 75, 30, -28, -16, 9, 32, -50, 7, -83, -36, -4, -4, -42, -28, 33, -27, -73, 22, -39, 15, 31, -47, -83, -30, 13, 6, 0, -30, -4, -13, -59, -26, -37, 44, 21, 4, -78, -80, 8, -19, 60, -17, -47, 6, 9, -6, 4, 22, 23, -8, -50, -15, -39, 34, -23, -43, 20, 22, 28, -2, -100, -1, 51, 6, -42, -32, -49, 27, -78, -46, -60, 21, 21, -79, -2, 38, 18, -16, 47, -81, 8, -82, 67, -27, 2, 55, 29, -31, -81, -80, -82, -15, 12, 66, 8, -87, 22, -4, 21, -33, 
  -17, 10, 15, -18, -23, -3, 10, -22, 12, 11, 4, 7, -1, -12, 12, 11, -3, -12, -7, -16, 2, -21, -19, -1, 2, 6, 8, -12, -3, 15, 4, -11, -18, -2, -6, -7, -20, 11, 10, 12, -11, 15, -23, 14, -1, -7, -10, -6, -10, -16, 1, 10, 6, -7, 14, -17, -17, 12, -19, -9, -3, -19, -19, -3, -23, 0, -1, 4, -22, 4, 15, -5, 9, -13, 6, -16, 12, -4, -21, 12, 3, 12, 11, -1, 7, -4, -8, -16, -14, 12, -1, 9, 12, -23, 4, -18, 11, -17, -3, 15, -10, 5, 
  16, 6, -14, 6, 12, -13, 5, 16, 18, -6, 15, -1, 5, 1, -15, 3, 13, -10, -2, -5, -9, -7, 12, -12, 13, -23, -4, -18, -3, -18, -8, 6, -15, 10, 0, 21, -11, 4, 20, -11, -3, -7, -28, 6, 0, -11, -1, -18, 10, 13, -21, -13, -11, 21, 3, -7, 21, 8, -16, -26, -1, -8, 10, -10, 7, 28, -16, 7, 18, -11, -13, 4, -6, -10, -14, 26, -13, -15, 12, -9, 2, 10, 0, 9, 6, 6, 16, 12, 15, 4, 20, -21, -13, 19, -14, 12, -26, 7, 0, -18, 20, 2, 
  -32, 32, 55, 6, 2, -18, 35, 43, -34, 1, -47, 0, 3, -11, -10, -5, 20, -16, -57, 14, -48, 13, 12, -14, -82, -14, 28, 13, 23, -45, -26, 19, -92, -38, -12, 21, 41, 22, -77, -74, 4, -23, 55, -4, -59, -20, -9, 18, 10, 10, 30, -15, -48, -36, -41, 42, -43, -35, 11, 21, 15, -8, -75, 8, 11, 10, -27, 2, -35, 40, -53, -47, -48, 30, 10, -83, 22, 32, 1, -34, 45, -94, 11, -68, 67, -21, -5, 47, 16, -39, -55, -68, -91, -12, 13, 62, 18, -63, 14, -1, -2, -19, 
  5, 4, 2, -21, 1, 10, -9, -18, 1, -11, -6, -22, 2, -7, 2, 0, -20, 15, 0, -21, -4, 17, -5, 20, -9, -19, 4, -21, 6, -11, -23, 13, 2, 6, -10, -4, 12, 17, -15, -11, 9, -1, -7, 3, 3, -10, -22, -21, -12, 3, -4, -4, 7, 12, -7, -14, -17, -3, -3, 0, 14, 7, -17, 11, -15, 11, 4, -2, -5, 3, -20, 2, 16, -22, -8, -13, -19, -13, -20, -7, -9, 12, 8, -21, -1, 2, 16, 10, -9, 3, -20, -3, 6, 14, 4, -19, -10, -1, -15, -4, -21, -19, 
  34, -14, -54, -48, -5, 21, -7, -40, 38, 24, 66, 55, 8, 3, 39, 23, -15, 39, 62, 8, 23, 16, -23, 40, 86, 30, -41, 10, 18, 38, 20, -1, 77, 54, 20, -29, -6, 9, 61, 86, 9, 30, -10, -7, 68, 0, 16, 23, -21, 6, -13, 15, 56, 25, 63, 8, 52, 29, -23, 4, -30, 2, 62, 19, -28, 26, 59, 30, 26, -20, 54, 29, 21, -9, -3, 63, 5, -53, -12, 34, -23, 63, -12, 58, -63, -12, 28, -39, 1, 26, 63, 101, 74, 36, 0, -58, 17, 92, -37, 13, -27, 45, 
  45, -13, -26, -28, -2, 11, 9, -44, 24, 13, 77, 23, -8, 15, 42, 39, -27, 48, 63, -1, 45, -19, -13, 36, 80, 40, -25, 32, 3, 25, 25, 5, 50, 31, 36, -3, -19, -9, 51, 51, 25, 17, -42, 31, 34, 5, -11, 5, -22, -6, -20, 21, 29, 27, 59, -14, 14, 29, -37, -20, -32, 2, 77, 8, -37, 9, 46, 8, 6, -3, 70, 40, 42, 1, 2, 76, -15, -25, -19, 26, -48, 84, -19, 77, -48, 24, -5, -29, -2, 49, 32, 59, 77, 22, 11, -47, 5, 89, 1, 30, -5, 10, 
  -37, 9, 56, 8, -17, -2, 18, 27, -47, 8, -46, -23, -19, -10, -40, -20, 8, -32, -73, 7, -30, 4, 33, -41, -95, -14, 24, 11, 12, -44, -26, 9, -47, -43, -20, 31, 35, 34, -48, -84, 4, -21, 35, 2, -52, -14, 5, -13, 8, 34, 16, 1, -54, -12, -47, 25, -36, -24, 18, 18, 36, 7, -77, 3, 31, 22, -39, -7, -34, 35, -50, -39, -34, 22, 14, -55, 19, 48, 19, -19, 44, -87, 14, -83, 67, -24, -17, 44, 10, -13, -38, -87, -52, -6, 16, 49, -3, -52, 3, -11, 27, -34, 
  45, -31, -68, -32, 11, -1, -21, -30, 31, 8, 50, 38, 12, 6, 17, 56, 8, 33, 103, 16, 11, -12, -17, 44, 94, 14, -47, 15, 17, 50, 29, 14, 79, 61, 24, -20, -25, -8, 63, 93, 8, 35, -48, 24, 47, 2, 16, -13, -18, -2, -14, -9, 36, 28, 65, -29, 38, 30, -25, 8, -20, 13, 103, 1, -15, -7, 44, 24, 46, 4, 74, 45, 25, -17, 4, 103, -4, -47, -20, 36, -33, 87, -4, 69, -72, 35, 2, -17, -13, 25, 48, 102, 103, 31, -11, -39, 0, 90, -26, 17, -22, 58, 
  40, -30, -45, -9, 49, 32, -25, -32, 48, -2, 93, 41, 3, -16, 43, 52, -4, 48, 82, 0, 40, 9, -30, 44, 96, 35, -15, -3, -10, 71, 33, 9, 74, 57, 53, -40, -33, -3, 72, 74, 37, 34, -47, 31, 79, 3, 17, 0, -17, 5, -1, 2, 43, 45, 62, -25, 22, 51, -24, -3, -27, -2, 72, 0, -29, 7, 39, 46, 56, -15, 44, 60, 39, -11, -3, 85, -3, -45, -9, 43, -36, 105, -6, 70, -54, 27, 6, -17, -6, 53, 90, 70, 85, 8, 9, -47, -7, 76, -3, 21, -20, 54, 
  18, -10, -50, -22, 9, 15, -21, -39, 21, 9, 51, 25, -17, 7, 12, 27, 6, 19, 86, 1, 45, 16, -35, 27, 99, 31, -9, 14, 14, 51, 5, 4, 78, 32, 26, -11, -6, -29, 63, 71, 27, 18, -16, 38, 38, 16, 3, 8, -3, -5, -15, -9, 30, 21, 40, -18, 26, 34, -8, -14, -21, 15, 98, 25, -16, 18, 60, 24, 41, -5, 72, 48, 46, 1, -16, 86, 3, -41, -18, 42, -45, 89, 3, 69, -54, 6, 20, -43, 2, 54, 43, 72, 87, 15, -10, -61, 26, 83, -15, -18, -9, 51, 
  -33, 14, 55, 11, -25, -31, 23, 41, -13, -9, -62, -17, 3, -10, -18, -11, 24, -5, -94, 30, -46, -6, 28, -34, -97, -36, 29, -3, 16, -33, -22, -18, -80, -26, -28, 48, 34, 35, -91, -90, -3, -11, 24, -34, -42, -5, 5, 4, 25, 22, 23, 7, -34, -16, -57, 12, -40, -15, 31, 13, 18, -7, -94, 5, 13, -8, -25, -13, -53, 30, -46, -39, -33, 11, 23, -84, 7, 44, 17, -35, 45, -74, 5, -91, 74, -17, -15, 24, 27, -20, -77, -77, -83, 9, 9, 54, 13, -92, 36, 1, 13, -10, 
  11, -7, -48, -45, 5, 25, 3, -42, 39, 19, 56, 29, -33, 10, 13, 23, -22, 10, 76, -13, 53, 4, -21, 19, 81, 19, -37, 21, -17, 27, 18, 16, 68, 44, 36, -4, 3, 11, 47, 78, 36, 30, -29, 21, 61, -2, 17, 9, -2, -17, -17, 22, 32, 38, 54, -23, 19, 52, -33, 12, -25, 3, 62, -3, -3, 16, 36, 10, 36, -5, 62, 57, 42, -4, -1, 61, 1, -25, -20, 50, -42, 46, -18, 80, -48, 20, 0, -13, -12, 20, 58, 64, 53, 17, -20, -32, 11, 83, -25, -4, -42, 49, 
  -38, 20, 28, 22, -7, -21, 33, 21, -38, 4, -71, -26, -3, 8, -15, -27, 25, -21, -86, 7, -20, 24, 36, -20, -69, 0, 19, 10, 20, -35, -16, 3, -79, -34, -40, 47, 30, 37, -83, -62, 5, -31, 41, -27, -41, -18, -8, -10, 2, 33, 41, -18, -30, -11, -36, 26, -23, -10, 29, 3, 9, -7, -75, -19, 45, -5, -55, -20, -32, 34, -35, -53, -22, 31, 31, -52, 3, 47, 30, -34, 36, -65, 23, -65, 53, -16, 1, 20, 10, -28, -64, -43, -76, -16, 27, 56, 13, -52, 31, 11, 10, -21, 
  -8, 16, 4, 13, 14, -16, 10, -20, 1, 0, 14, 14, -4, 4, 16, -19, 2, 1, 3, 16, -22, -22, 11, -2, -19, -9, -4, -12, -4, 9, -14, 1, -15, 16, 7, -16, 0, -1, 8, -20, -12, 10, 0, -17, -16, 0, -19, -17, -11, -17, -6, 11, 1, 3, -1, 12, -12, -15, 3, -7, -17, 0, -3, -10, 13, -18, -16, 1, 14, 13, -1, 13, 10, 0, 2, -18, 8, 5, -23, -2, -6, -9, -11, 9, 14, 1, 0, 8, -6, -23, 3, -21, -19, -3, -16, 5, 15, -4, -19, 15, -20, 0, 
  15, -21, -40, -36, 23, 11, -8, -40, 48, 17, 63, 42, -6, -5, 23, 33, -7, 38, 88, -3, 34, 7, -18, 59, 78, 37, -37, 7, -11, 59, -5, 15, 84, 31, 30, -30, -28, 0, 88, 99, 27, 30, -24, 31, 36, -6, 10, 1, -32, -7, -29, 3, 39, 28, 74, -34, 3, 15, -36, -26, -14, -8, 66, 22, -40, -3, 38, -2, 12, -19, 50, 32, 45, 8, -17, 79, 6, -35, -29, 30, -66, 75, 12, 98, -60, 11, -9, -26, -35, 14, 77, 77, 71, 3, 10, -61, -4, 90, -13, 13, -13, 20, 
  45, -42, -65, -1, 12, 35, -13, -10, 41, -8, 59, 37, 24, -10, 36, 19, 6, 12, 86, -15, 14, -1, -10, 50, 91, 36, -21, 21, 1, 47, 15, 8, 68, 23, 21, -1, -38, -6, 67, 75, 24, 47, -29, 34, 57, 11, 23, -7, -15, -5, -9, -12, 47, 26, 72, 3, 35, 55, -16, 3, -17, -2, 78, 16, -42, -11, 36, 36, 48, 10, 58, 37, 27, -33, -8, 92, 11, -28, -10, 34, -34, 108, -14, 67, -41, 12, 12, -38, -22, 50, 58, 80, 80, 36, 25, -34, -10, 78, -40, -1, -15, 46, 
  20, 14, 15, 16, 15, 9, -18, 15, -16, -1, -3, -16, -15, 0, -13, 6, 15, -15, -8, 5, -24, 0, -18, 1, -8, 2, 2, -18, 0, -7, 5, -9, -5, 18, 0, -14, -13, -16, -6, -7, 10, -3, -9, 3, 2, 4, 6, 0, -14, 12, -9, -17, -15, 7, -17, -17, 16, -9, -23, -2, 0, -6, 15, -6, -17, 5, -18, 4, -6, -13, 19, 12, 13, -2, 5, -15, -9, -13, 9, 17, 14, 2, -10, -13, -6, -2, 14, -11, -13, 5, -6, -10, -12, -6, -9, 0, -8, 2, -12, 16, -10, 1, 
  48, -34, -55, -9, 11, 12, -21, -12, 58, 7, 65, 24, -6, 17, 28, 21, 2, 22, 81, -2, 45, -1, -40, 38, 114, 15, -17, 9, -6, 54, 12, 2, 74, 34, 20, -29, -5, -4, 104, 68, 42, 14, -17, 19, 51, 5, -7, 11, -25, -10, 0, 16, 52, 18, 50, -24, 55, 41, -32, 0, -9, 21, 85, 4, -43, 0, 60, 14, 53, -16, 77, 29, 39, -22, -2, 101, 21, -56, -16, 34, -32, 80, -5, 82, -38, 31, 18, -41, -15, 24, 74, 82, 75, 4, 12, -37, -9, 99, -23, 7, -5, 28, 
  11, -7, -1, 5, -21, -19, -1, 3, 10, 2, 14, -14, 14, -23, -14, -9, 10, -6, -21, -21, 4, 5, -19, -16, 4, 0, -10, -18, -8, -12, -9, -21, -22, -10, -6, -4, -7, 18, -18, 6, -16, 6, -19, -13, -3, -9, -16, -13, -19, -16, 7, 11, -7, 4, -7, -1, -6, 3, -19, 2, 13, -17, 7, 13, -5, 8, 10, -13, 3, 0, 8, 2, 4, 6, -7, -17, -17, -17, -18, -18, -17, -10, 4, 7, 3, 7, 9, -13, -1, 11, 13, 6, -1, 9, 12, 4, 5, 12, 16, -12, 15, -15, 
  16, -4, -3, -23, -4, -13, 6, 18, -6, -9, 16, -15, -23, 10, -1, 2, 14, -5, -13, -11, 14, 13, -3, -15, 6, 5, 7, 15, 11, -12, 9, 10, 7, 2, -2, -2, -12, -22, 11, -12, -19, -19, 0, 16, 8, 12, 8, 1, 17, 19, -9, 9, 14, 9, -24, -9, 2, -22, 8, 8, 0, 6, -17, 17, 9, -12, -26, -19, 14, -23, -1, -10, -23, -8, 3, -1, 10, 6, 10, -10, -2, -13, 4, -13, -9, 0, 13, -6, 10, -17, -3, -4, -14, -13, 7, 2, -3, 9, -10, 4, -1, -16, 
  14, -41, -57, -24, -2, 10, 6, -11, 48, -5, 60, 41, -31, 26, 13, 44, -24, 24, 53, -14, 42, -26, -32, 44, 57, 25, -41, 17, 12, 36, 1, 5, 80, 42, 39, -34, -12, 7, 60, 52, 20, 19, -33, 26, 47, 23, 1, 0, -13, 4, -16, 8, 25, 39, 61, 5, 44, 22, -18, -8, -3, 29, 83, 31, -21, 9, 28, 10, 40, -19, 68, 37, 26, -16, -5, 67, -6, -37, -18, 45, -50, 76, 6, 43, -41, 3, -2, -38, -20, 45, 57, 75, 53, 13, -13, -45, -6, 66, -28, -16, -39, 38, 
  51, -12, -38, -36, 37, 19, -23, -34, 27, -15, 59, 30, -11, -4, 53, 22, 8, 18, 74, -19, 43, 7, -28, 55, 98, 26, -24, 4, 10, 30, -11, 13, 82, 44, 19, -2, -31, -15, 96, 97, 29, 18, -25, 34, 61, 1, -16, 8, -26, -8, 2, -4, 38, 28, 59, -25, 8, 14, -15, -18, 0, -8, 74, 21, -11, -14, 37, 0, 19, -34, 61, 55, 33, -19, 4, 72, 16, -48, -27, 18, -36, 71, -2, 75, -51, 38, 3, -10, -29, 34, 71, 96, 76, 22, 3, -65, 22, 77, -38, 24, -20, 25, 
  -4, -23, -1, -16, -21, -8, -21, -16, -10, 12, -18, 10, -7, -1, 8, -14, 7, -14, 2, 10, -5, -12, -16, 8, -18, -12, 15, 4, -6, -18, 1, -16, -7, -7, 13, -21, 5, -12, -5, 14, 17, -12, -2, -20, 4, -4, -18, 7, -3, 7, -19, -4, -21, 13, 14, -6, 8, -10, -16, 3, 4, 15, 1, 4, -16, -20, 1, 8, 10, 6, 17, -12, -11, -9, -13, -20, 3, -20, 12, 16, 4, -17, -8, -20, -14, 13, -5, 9, -19, -12, -3, -22, -22, -16, -11, 6, 0, 9, 13, 11, -9, 8, 
  42, -44, -57, -22, 31, 25, -25, -43, 24, -12, 67, 52, 0, 8, 14, 12, -1, 15, 90, -18, 24, -14, -49, 46, 117, 33, -30, 19, 10, 47, 2, -6, 76, 46, 17, -39, -31, -7, 106, 74, 24, 38, -32, 18, 67, 15, 12, 16, -14, -16, -15, 19, 59, 55, 70, -21, 59, 34, -28, 2, -4, 13, 113, 7, -25, -4, 73, 33, 41, -3, 70, 36, 55, -27, -26, 91, 20, -44, -3, 32, -34, 96, 16, 83, -67, 20, 18, -30, 4, 34, 57, 107, 80, 10, -6, -48, 7, 103, -37, 20, -5, 26, 
  -26, 36, 67, 20, -24, -25, 25, 22, -47, 16, -69, -19, -9, 11, -44, -23, -5, -36, -95, 30, -18, 25, 23, -10, -102, -24, 34, 2, 28, -52, -24, -16, -94, -43, -36, 16, 17, 33, -85, -84, 6, -14, 23, -10, -67, 1, 11, 4, 22, 41, 35, 14, -39, -30, -64, 16, -52, -25, 33, 21, 33, -5, -77, 6, 42, 26, -25, -12, -45, 42, -58, -31, -27, 13, 17, -76, 22, 25, 5, -14, 35, -79, 1, -55, 57, -25, -17, 55, 28, -34, -79, -65, -75, 1, -5, 54, -5, -92, 41, -14, 27, -33, 
  15, -21, -42, -33, 16, 23, -24, -7, 40, 0, 67, 32, 3, 21, 41, 51, 5, 11, 58, 9, 45, 7, -24, 47, 59, 14, -15, 21, -13, 47, 30, 28, 65, 40, 40, -31, -11, -20, 61, 79, 21, 36, -19, 15, 54, 3, -5, 21, 2, 12, -24, 19, 46, 38, 52, -7, 30, 33, 2, 1, -28, 19, 72, 18, -12, 0, 52, 25, 40, -13, 53, 59, 30, -2, -22, 88, -6, -50, -9, 17, -23, 80, -9, 83, -37, 15, 24, -15, -7, 17, 66, 89, 82, 28, -4, -38, -10, 70, -30, -7, -13, 34, 
  0, 5, 13, -16, -13, -5, -11, -2, 7, -5, 3, -23, -7, -13, -13, -13, 8, -21, -5, -9, 5, 18, 5, 3, -12, -13, -3, -9, 5, -7, 15, 19, 7, 4, -13, -7, 10, 19, -7, 7, -1, -12, 7, 5, -16, -18, -7, -19, -10, 10, 8, -4, -20, 15, -10, -5, 15, -11, -8, 7, -12, -19, -12, -4, 10, -16, -5, 5, -11, -6, -5, 8, 15, 4, -22, 9, -12, 4, -15, -12, 0, -19, -19, 15, -19, 2, -15, -20, -18, -3, 3, -5, -4, -11, -10, -10, 2, -19, 17, 6, -17, -17, 
  -15, 6, -19, 5, 0, -22, 2, -5, 5, -19, 1, -19, 1, 1, 1, -3, 7, 3, 5, -19, -12, -16, -17, 3, -7, -5, -12, -14, 2, 4, -22, 2, 16, -1, -20, 3, 17, -4, -22, 1, 10, -8, 17, 5, 12, -10, 6, -10, -15, -9, -7, 1, -12, -19, 11, 0, -1, -17, -15, -7, 0, -6, 3, 17, -12, 9, 5, 6, 15, -14, -18, 0, 8, -18, -11, -2, -16, 5, -13, 10, -10, 12, 13, 14, -20, -12, -22, -7, -10, -14, -2, -20, -2, 10, -22, 4, 2, -14, -16, 13, -6, 9, 
  7, 12, -18, -1, -10, -7, -13, 14, -9, 8, -11, 12, 6, -16, -3, -23, -13, 16, -12, -13, -11, -17, 16, -13, 7, 0, -22, 3, -18, 3, 11, 13, 14, 4, -18, -5, 8, 0, -2, -8, -11, -1, -19, 0, 10, -2, -17, -5, 13, 5, 6, -13, -22, 15, -5, 2, -19, 10, -10, 16, -3, -20, 3, 7, 1, -9, -15, 4, 12, 15, -4, -11, 8, -1, -20, -5, 2, 4, -15, -13, 1, -1, -21, -22, -10, 17, -6, 16, -20, 15, 1, -16, 15, -22, -8, 12, -7, -8, -3, -14, 11, -12, 
  -24, 21, 53, 7, 0, 1, 27, 12, -12, 6, -51, -9, -20, 25, -45, -18, 24, -14, -61, 30, -39, 1, 51, -41, -87, -19, 24, -11, 28, -60, -17, 12, -61, -37, -13, 26, 7, 7, -52, -84, -7, -15, 52, -27, -64, 4, 5, 20, 30, 4, 18, -4, -55, -44, -52, 34, -47, -11, 4, 0, 16, -9, -89, -6, 33, -4, -32, -5, -53, 38, -57, -43, -44, 17, 15, -61, -2, 22, 29, -12, 44, -71, 3, -58, 60, -9, -18, 53, 26, -33, -67, -53, -80, 5, 16, 49, 24, -86, 34, -1, 26, -22, 
  -38, 40, 77, 32, -12, -24, 35, 18, -23, 4, -80, -39, -7, 7, -26, -17, 14, -9, -84, 18, -53, 0, 40, -35, -87, -14, 43, -12, 29, -54, -8, -1, -90, -27, -6, 12, 40, 23, -83, -59, -3, -34, 42, -22, -58, -15, 5, 5, 21, 34, 35, 8, -47, -18, -60, 17, -26, -38, 25, 0, 2, 0, -64, -3, 20, 26, -27, -14, -58, 22, -35, -37, -53, 3, 13, -85, 21, 34, 7, -53, 59, -88, -6, -71, 69, -34, 5, 43, 26, -44, -55, -94, -62, -18, 9, 70, 1, -73, 22, 4, -3, -13, 
  -23, 0, -6, -16, 0, -10, -14, -13, 14, 9, -22, -4, 5, -14, -20, 15, -8, 12, 10, -13, -17, -2, -16, 12, -8, -20, 2, -10, 6, 14, 11, 12, 9, 0, 0, 4, -6, 10, -22, 2, -19, 3, -9, -13, 11, 14, 15, 9, -18, -8, 15, -17, -20, -7, -8, 14, 11, -11, -8, 0, 10, -14, -3, -8, 7, -3, 3, 11, -16, -24, -10, -18, -17, 5, -11, 9, -9, 6, 5, 8, 14, 15, -3, 3, -15, 7, 12, 11, 9, 15, 1, 1, -21, 0, 7, 16, -11, -14, 12, -17, -1, -11, 
  52, -40, -48, -25, 33, 33, -17, -34, 30, 11, 55, 29, -13, 4, 25, 49, -5, 30, 105, 4, 58, 9, -19, 53, 117, 23, -8, -2, 3, 38, 43, 6, 93, 49, 32, -21, -6, -18, 100, 80, 17, 27, -29, 35, 71, 29, 28, -3, -2, -31, -38, 15, 64, 36, 55, -13, 55, 22, -24, 5, -12, 32, 101, 6, -30, 6, 32, 18, 55, -7, 76, 54, 46, -8, -6, 98, 3, -45, -2, 41, -23, 95, 8, 78, -72, 34, 17, -35, -26, 33, 67, 99, 89, -8, -17, -49, 24, 96, -13, 10, 8, 49, 
  -25, 37, 61, 12, -33, -26, 8, 54, -19, 8, -60, -14, -14, -5, -45, -29, 29, -26, -73, 30, -43, -9, 32, -22, -117, -10, 38, 15, 3, -55, -22, 9, -79, -39, -7, 29, 19, 39, -87, -67, -22, -38, 56, 1, -69, 4, 9, -3, 28, 29, 29, 6, -61, -29, -61, 41, -36, -43, 20, 38, 18, -24, -78, -14, 26, -1, -27, -22, -40, 32, -78, -41, -52, -3, 12, -73, -8, 52, 21, -50, 62, -107, 20, -66, 54, -31, 6, 31, 32, -45, -81, -79, -105, -11, 14, 68, -5, -103, 32, -11, -1, -25, 
  25, -46, -31, -58, -5, 3, -18, -36, 30, 3, 66, 42, -32, -4, 33, 39, 6, 13, 77, 17, 46, 12, -7, 63, 86, 19, -33, 23, -12, 32, 34, 12, 80, 27, 28, -4, -3, 16, 78, 98, 33, 31, -10, 30, 46, 20, -1, -13, -13, -17, -16, -2, 44, 56, 68, -27, 44, 50, -16, 13, -6, 3, 60, 10, -17, -4, 64, 29, 33, -16, 43, 62, 34, 1, -2, 92, 3, -64, -31, 42, -52, 71, -3, 88, -60, 21, 19, -34, -25, 32, 62, 97, 96, 6, -14, -73, 16, 89, -5, 18, -30, 53, 
  -10, -3, 16, -8, -1, -7, 15, 7, -21, -20, -11, -3, -1, -2, -13, 10, 2, -7, -8, 14, -19, 9, 10, 5, 14, 12, -22, -16, 11, 12, -17, 12, -17, -15, -10, -5, -9, 8, -7, -19, -22, 17, 5, -13, -14, -20, -16, -8, 2, 5, -18, -10, -11, 3, -9, -14, -8, -19, -4, 6, -12, -17, -5, -17, -7, 11, 12, -7, -9, -4, 4, 15, -4, 1, -12, 8, -20, -12, 3, 17, 6, -16, 14, -14, 12, 7, -15, 9, -15, 15, -16, 8, 9, 9, -22, -3, -7, -2, -9, 8, 3, -14, 
  1, 1, -21, 16, -1, 16, 16, -10, -11, 14, 6, 3, -13, -13, -8, -4, -14, 6, -19, -16, -21, -11, -17, -10, 8, 9, -14, 7, -4, -6, -10, -9, 14, 1, 6, -6, -14, -4, 4, -18, 12, 12, 4, -5, -17, -19, 6, -6, 2, -3, -15, 8, -20, -10, -13, 6, 13, -16, -1, -3, -6, -5, -10, -20, -7, 7, 17, -13, -20, 8, 14, -21, -10, -1, 6, 16, 2, -16, 8, 15, -8, 9, -21, 4, 14, -9, 15, -1, 8, -23, 10, 5, -13, 10, -3, -1, -1, 0, 11, 1, -8, -7, 
  38, -6, -54, -36, 34, 6, -30, -36, 30, -1, 78, 12, 8, -10, 35, 13, -20, 18, 90, -13, 54, 11, -5, 41, 72, 29, -6, 26, 19, 46, 36, 24, 90, 42, 12, -23, 2, -5, 66, 72, 23, 4, -25, 41, 64, 32, -4, 15, -17, -25, -21, 13, 53, 35, 58, -5, 47, 40, -6, 9, -23, 15, 63, 21, -19, -2, 53, 10, 55, 4, 73, 57, 53, -9, 8, 80, 29, -46, -9, 31, -57, 89, 10, 52, -53, -5, 20, -27, -6, 46, 74, 78, 94, 33, -21, -49, -3, 74, -21, 11, -12, 46, 
  27, -21, -49, -18, 2, 45, -36, -22, 53, 23, 65, 27, 2, 19, 36, 35, 0, 21, 116, 4, 40, 9, -37, 35, 99, 0, -41, 35, 35, 31, 31, -4, 83, 45, 37, -30, 1, -4, 76, 86, 45, 5, -24, 13, 82, 14, -13, 21, -1, -2, -14, 1, 60, 46, 58, 13, 63, 39, -4, 6, -26, 16, 100, 24, -15, -10, 56, 51, 65, 0, 53, 37, 66, 2, -19, 83, 20, -26, -15, 25, -47, 104, -13, 95, -57, 20, 15, -26, -8, 56, 72, 103, 89, 28, -7, -41, -6, 104, -19, -10, -23, 60, 
  -19, 6, -10, -6, 5, 3, -11, 9, -20, 0, -21, 13, -1, 15, -10, 1, -15, 11, 16, -9, -7, -18, -22, 4, 12, -7, 16, 15, -8, -5, -6, 3, 16, 10, 13, 9, -20, 16, -4, 1, -19, 5, -15, -13, 15, -6, 6, 13, 7, 7, -9, -17, 9, -6, -19, -20, 13, 8, -7, 15, -22, -6, 8, -10, -18, -12, -11, -16, -12, -13, -1, -2, -16, 4, 15, -16, 15, 2, 12, 4, -15, -3, -18, -11, -12, -4, -22, -2, -1, 12, -1, -12, 6, 11, 1, 16, -9, -17, 15, 4, -23, -2, 
  30, -27, -48, -10, 38, 10, -4, -40, 45, 27, 65, 40, 23, -8, 19, 47, 9, 42, 109, 4, 57, -18, -46, 67, 115, 33, -29, 20, -2, 60, -1, 4, 99, 39, 47, -23, -37, 0, 74, 80, 27, 36, -33, 32, 74, 17, -4, 14, 6, -17, -18, 9, 63, 37, 43, -5, 60, 48, -1, -19, -18, 0, 89, 9, -40, -4, 43, 35, 60, -7, 77, 38, 33, -13, -23, 91, 29, -25, -4, 49, -58, 121, 3, 85, -45, 2, 24, -25, -8, 61, 92, 77, 103, 16, 16, -65, -9, 86, -21, 20, -9, 52, 
  5, 9, -11, -12, 5, 10, -14, -9, -11, -10, -24, -9, -17, -11, -18, -7, -19, -14, -19, -8, 9, 19, -8, -3, -27, 3, 7, -3, -3, 7, -14, 1, 7, 0, -10, -8, -13, -15, -1, -12, -13, -20, -15, 9, -22, -6, -9, 13, 8, -3, -2, -8, -16, -9, -18, -17, -5, -5, 6, 19, 13, -6, -4, 3, 9, 14, -6, 10, -19, -14, -3, -16, -8, 11, -13, -16, -11, 9, -6, -1, 19, 6, -8, 7, -8, -23, 3, -10, 8, -13, -7, 1, -22, 12, -17, 4, -15, -17, 2, 11, 7, -20, 
  11, -33, -31, -21, -3, 11, 11, -30, 14, 9, 36, 45, -26, -3, 14, 40, -1, 25, 51, -9, 47, -11, -31, 57, 72, 38, -9, -8, -14, 42, 38, 12, 52, 16, 9, 0, -23, 3, 54, 65, 11, 19, -18, 23, 42, 23, -8, 18, 6, 12, -9, -15, 40, 44, 56, 11, 38, 51, -9, 11, -23, -7, 54, 28, -15, 0, 32, -5, 48, -25, 42, 47, 28, -11, -13, 76, 22, -16, -9, 17, -18, 71, 11, 55, -29, -3, 12, -16, -11, 38, 27, 62, 67, -3, -20, -47, 8, 77, -35, -12, -14, 50, 
  25, -10, -53, -35, 11, 5, -17, -45, 25, 18, 85, 22, 14, -5, 20, 31, -8, 19, 81, 16, 27, -4, -19, 48, 109, 46, -31, 33, 20, 56, 20, 17, 88, 30, 21, -25, -12, 6, 97, 73, 6, 39, -40, 17, 76, 27, -3, 6, -16, 5, -19, 12, 62, 40, 63, -4, 39, 27, 0, -16, -5, 4, 102, 12, -35, 16, 41, 46, 47, -16, 64, 56, 65, -5, 4, 72, 6, -41, -11, 37, -46, 100, -17, 98, -40, 13, 25, -27, -8, 68, 68, 74, 88, 21, -1, -28, 2, 91, -27, 13, -20, 18, 
  2, 10, -9, -11, 15, 10, -3, -2, -7, 6, -17, -12, 12, 13, -11, -2, 4, -16, 9, 1, -2, -11, 15, 10, -7, -11, 1, 20, -10, 1, 11, -14, -6, -14, -15, -5, -9, -5, -13, 10, -1, 1, -8, 17, -20, 19, 4, 0, -17, -7, 3, 12, -16, 6, -11, -4, 9, -22, -22, 17, -7, 7, -6, -2, -8, 9, -5, 0, 9, -21, -18, -21, -21, 2, 9, -16, 5, 17, -7, -16, 10, 5, -1, 9, 1, -9, 9, -12, -9, 10, -7, 6, -21, -18, 10, -9, 7, -5, -8, -18, -16, 14, 
  -8, -13, 5, 3, -14, -1, -20, -18, -20, -21, 11, 18, -17, -15, -9, -12, -5, 2, -3, 8, 18, 5, 12, -8, 16, 0, -11, 0, 10, 0, -2, 16, -16, 6, -15, 15, -14, 8, -13, 17, -16, 13, -6, -19, 2, -6, 2, -5, 16, -11, 10, 0, 4, 0, 1, 10, -18, -7, -18, -12, 11, 0, 6, 0, 6, 8, -2, 5, -5, 18, 3, 15, -20, 8, -21, 12, 17, -19, 9, 3, 3, -19, -5, -18, 11, 7, -14, -9, -18, 12, 16, -8, 9, -9, 4, -4, -9, 4, -16, 18, 4, -12, 
  27, -23, -33, -9, 9, 19, 6, -21, 25, -6, 70, 36, 14, -15, 32, 36, -27, 24, 50, -9, 10, -16, -5, 31, 73, 9, -47, 15, 13, 46, 25, 5, 50, 47, 43, -21, -31, -21, 69, 59, 15, 25, -37, 9, 51, -3, -1, -1, -5, -2, 1, -1, 24, 38, 60, -1, 9, 28, -37, 9, -39, 9, 81, 26, -38, 1, 60, 19, 11, -10, 46, 47, 51, 0, -2, 67, 17, -51, 0, 17, -22, 83, 3, 84, -57, 11, 12, -27, 4, 18, 63, 63, 57, -8, 5, -52, 8, 67, -17, 4, 5, 26, 
  37, -30, -46, -29, 31, 1, -19, -45, 22, 25, 62, 7, 1, -12, 33, 40, 1, 41, 56, 7, 11, -16, -30, 41, 80, 10, -33, 20, -26, 51, -11, -13, 64, 50, 27, -33, -36, -11, 63, 70, 30, 7, -26, 31, 41, 12, -9, 3, -25, -15, -15, 4, 52, 22, 63, -33, 37, 40, -16, -6, -33, 11, 82, -4, -12, 29, 27, 3, 10, 2, 65, 40, 30, 16, -13, 55, -2, -24, -16, 51, -27, 82, -24, 88, -46, 9, 14, -35, -21, 7, 59, 89, 87, 9, -3, -30, -18, 93, -17, 18, -30, 17, 
  19, -30, -33, -20, -4, 41, -8, -7, 31, 13, 64, 43, -12, 21, 46, 45, 1, 42, 93, -14, 34, -1, -39, 66, 110, 18, -41, 5, -2, 62, 21, 3, 72, 54, 11, -13, -20, 4, 73, 73, 45, 8, -45, 13, 30, 31, 14, 12, -15, -27, -14, -1, 26, 48, 62, 2, 60, 34, -6, -6, -3, 17, 66, 10, -10, -14, 41, 11, 50, 13, 76, 55, 51, -1, 7, 91, -1, -55, -33, 46, -46, 82, -3, 78, -46, 11, -11, -42, -19, 36, 63, 90, 70, 9, -21, -57, -7, 101, -39, 2, -17, 24, 
  23, -23, -57, -13, 11, 3, -2, -47, 26, 11, 56, 15, 8, 21, 21, 31, 11, 30, 91, 0, 22, -8, -24, 49, 127, 21, -36, 19, -15, 65, 7, -20, 90, 54, 17, -22, -32, 5, 106, 110, 11, 42, -30, 7, 75, 24, 7, -11, -20, -10, -18, 8, 33, 19, 42, 1, 43, 36, -9, 8, -6, 34, 106, 3, -34, 17, 62, 3, 62, 11, 50, 45, 49, -22, 7, 115, 18, -48, 9, 57, -46, 111, -9, 113, -72, -4, 3, -33, -17, 24, 96, 82, 115, -3, -21, -49, -10, 106, -27, 18, -12, 43, 
  35, -31, -37, -32, -7, 29, -6, -11, 46, 3, 72, 40, -22, 5, 46, 31, -18, 8, 75, 12, 47, 1, -30, 48, 63, 15, -24, 4, 7, 35, 13, -1, 75, 32, 5, -11, -10, -29, 65, 59, 33, 5, -29, 16, 50, 4, 4, -9, -4, -10, -1, 6, 51, 14, 49, 0, 38, 29, -6, 9, -22, -6, 81, 2, -21, -5, 59, 30, 50, -22, 57, 37, 33, 1, 1, 70, 1, -49, -41, 31, -33, 74, -21, 62, -39, 2, -5, -32, -13, 17, 48, 90, 86, 4, -8, -36, 22, 56, -12, -8, -33, 41, 
  29, -25, -48, -22, 9, -3, -14, -49, 40, 11, 72, 1, -2, -6, 41, 66, -5, 55, 110, 12, 32, -16, -11, 68, 119, 20, -36, 16, -17, 44, 7, -2, 103, 67, 17, -36, -28, 21, 104, 95, 31, 22, -23, 53, 51, 18, -22, -6, -14, -25, -13, 16, 58, 14, 47, -15, 22, 21, -23, 0, -43, 22, 113, -2, -28, 33, 11, -6, 5, -21, 65, 41, 24, 14, -4, 107, -4, -70, -5, 32, -33, 112, 7, 81, -58, 23, -1, -25, -10, 37, 82, 74, 103, 9, -13, -59, 1, 82, -10, 27, -5, 45, 
  36, -27, -54, -14, 20, 3, -2, -42, 40, 0, 60, 27, -10, 9, 44, 49, -6, 47, 72, -9, 42, -19, -15, 27, 71, 35, -26, 6, -7, 54, -2, -15, 89, 62, 10, -32, -5, -24, 84, 77, 33, 3, -43, 9, 58, -1, 8, 11, -17, -12, -12, -5, 59, 47, 65, -7, 35, 21, -14, -19, -34, 5, 86, 10, -33, -2, 45, 3, 47, 3, 60, 28, 27, -25, -9, 84, -20, -50, -34, 53, -21, 86, -22, 86, -37, 1, 8, -24, -21, 34, 64, 78, 66, 20, -13, -60, 23, 95, -7, 0, -21, 23, 
  0, -12, 12, 7, -21, -14, 7, 8, 10, -17, 11, -5, 1, -1, 5, -17, 15, -11, -16, 13, 16, 2, 14, 7, -9, -5, 13, -15, 16, -21, 14, -9, 1, -3, 2, -19, -22, 15, 7, 10, -14, 15, -6, 4, -1, 11, 1, -16, -18, -9, -15, 6, -21, -1, -10, 3, -12, -18, -7, 10, 9, -2, 5, -17, 11, -11, -10, 15, -3, -17, -12, -19, 6, -4, -19, -13, -21, 4, 7, 1, -10, 13, -4, -8, -13, 16, 3, -15, -8, -2, 12, -19, -19, -13, -22, -11, -19, 9, -20, 8, -16, -3, 
  0, -18, 14, -11, 14, -4, 16, 8, -4, 11, -8, 13, -3, 5, 16, 15, -14, -19, 14, -3, -22, -14, 5, -7, -1, -3, 11, -3, 13, -7, -17, 6, -12, -3, 13, -6, -11, -20, -13, 1, 6, 5, 6, -19, -8, -19, -21, -13, 9, -11, 5, -14, 5, -19, -4, 4, 5, 9, -2, -19, 12, 8, 15, 16, 17, 2, -10, -5, 5, -19, -13, -14, 13, 15, -3, -5, 9, -14, 12, -10, -17, -10, -6, -2, -7, -17, 5, 17, -9, 11, -14, -23, 8, -15, -17, -19, 10, -22, -22, 14, -18, -1, 
  44, -9, -41, -6, 41, 14, 2, -19, 42, -15, 62, 40, 3, -2, 41, 43, 5, 10, 80, -12, 15, 10, -27, 31, 98, 30, -5, 14, -8, 58, 5, 12, 81, 25, 48, -25, 1, -8, 71, 67, 38, 32, -40, 35, 54, 2, 0, 22, -10, -8, -17, -14, 32, 22, 42, -18, 56, 32, 2, 13, 0, 24, 81, 0, -25, -4, 72, 44, 45, 4, 64, 56, 30, -16, -6, 79, 10, -14, -16, 17, -44, 99, -5, 90, -73, 11, -10, -24, 4, 53, 43, 93, 80, 31, 11, -48, -16, 69, -22, 15, -4, 22, 
  -22, 30, 79, 15, -40, -8, 42, 47, -41, 6, -78, -12, -11, 20, -44, -3, 12, -16, -78, 9, -55, 23, 35, -8, -109, -24, 4, 12, 31, -48, -20, 2, -53, -32, -8, 15, 32, 6, -72, -91, 5, -31, 32, -20, -50, -11, 4, 0, -2, 4, 37, -5, -48, -40, -52, 20, -27, -34, 30, 14, 39, -33, -73, -12, 45, -6, -28, -8, -35, 40, -52, -34, -33, 23, 5, -72, 0, 29, 5, -28, 24, -87, 26, -63, 46, -13, -7, 28, 30, -26, -57, -80, -69, -3, 18, 60, 9, -69, 19, -12, 29, -48, 
  14, -44, -34, -37, 28, -1, 0, -46, 32, 1, 53, 34, -2, -21, 24, 41, -18, 44, 64, -14, 46, -23, -12, 37, 79, 20, -22, 24, -3, 49, 8, 2, 86, 15, 9, 1, -25, -21, 61, 71, 33, 39, -40, 27, 28, 18, -13, -1, -4, -15, -10, 19, 24, 45, 31, -23, 15, 31, -8, 10, -49, 11, 78, 25, -18, -17, 60, 19, 16, -11, 38, 55, 46, 9, 1, 89, 5, -36, -21, 44, -52, 61, 8, 81, -69, 18, -12, -35, -10, 42, 70, 89, 89, 23, 11, -42, -15, 85, -27, 26, -2, 28, 
  8, -1, -10, 15, -13, 8, -8, -8, 5, -5, -1, 15, 1, 7, -2, 9, 4, 2, 13, -8, 6, -7, -19, -9, -9, -5, -12, 6, 8, 2, -3, -1, 3, 1, 8, -11, 1, -10, -6, -7, -2, 2, -13, 3, -10, -14, -1, -11, -4, -14, 0, 6, -18, 7, -6, -21, -18, 3, 11, -18, -22, 14, 17, 17, -20, -12, 17, -3, 5, 10, 13, -16, -7, 0, -12, -7, -9, -6, -13, -15, 5, 12, -14, -19, 12, -6, -23, -22, -17, 5, -2, -4, -21, -13, -15, -15, -21, 1, 12, -12, -12, -1, 
  4, -4, -4, -2, 7, -14, 20, -2, 19, -13, -3, -12, 3, 10, -8, -9, -23, 5, -1, -14, 8, 13, 2, 15, -6, 4, -10, 3, -14, 17, -24, 12, -8, -7, -12, 5, 7, -6, -4, 19, 14, -12, 8, -7, 4, 16, -7, -8, -18, 10, -19, -5, 18, 13, 2, 16, -8, 2, 18, 10, 18, -8, -3, 12, 1, 5, -3, -1, -5, 7, -9, 12, -10, -19, -12, 11, -7, -3, 13, 18, 5, 5, -5, 14, -16, -3, -15, 9, 14, -11, -8, 18, -16, -15, 1, -9, -2, 7, 9, -16, 16, -21, 
  40, -43, -61, -38, -1, 6, -3, -25, 59, 26, 61, -1, -1, 9, 11, 45, 9, 34, 81, -16, 32, -9, -18, 64, 85, 41, -40, -2, -3, 31, -2, -21, 91, 50, 5, -27, -3, -12, 91, 79, -1, 13, -14, 36, 57, -8, -23, 0, -11, -21, -27, 26, 50, 28, 65, 1, 22, 22, -14, -15, -29, 19, 94, 15, -13, -6, 43, 32, 17, -22, 76, 27, 33, -8, -9, 76, 8, -53, -18, 48, -31, 81, -3, 91, -68, 9, -16, -25, -23, 25, 72, 77, 83, 6, -20, -44, 17, 79, -13, 24, -24, 34, 
  -30, 42, 59, 33, -34, -29, -2, 11, -41, 13, -81, -35, -19, -8, -30, -13, 34, -41, -57, 43, -23, 14, 38, -31, -77, -22, 26, 15, 19, -62, -28, -14, -78, -21, -32, 29, 9, 16, -63, -81, -12, -40, 52, -3, -59, -27, 9, -1, 35, 11, 15, 11, -30, -44, -45, 19, -26, -40, 2, 19, 31, -12, -55, 4, 30, -8, -22, -10, -54, 22, -42, -42, -45, -4, 3, -87, 11, 28, 29, -39, 60, -82, 32, -71, 65, -32, 13, 29, 12, -38, -77, -82, -78, 3, 19, 39, 27, -92, 25, -10, -1, -8, 
  -14, 15, 9, -22, -4, 10, -15, 1, 4, -8, 14, -4, 9, 2, -7, -14, 9, -5, -10, -13, -10, -11, -19, -8, -16, 7, 6, -8, 15, 15, 21, -21, 16, -5, 14, -19, 17, -1, 5, -8, -6, -1, -18, -13, -13, -22, 1, -22, -15, 1, 14, 15, -20, -4, -20, -11, 14, 10, -1, -5, -1, -3, -18, -6, -11, -6, -10, 19, 8, 13, 13, -10, -13, -4, 5, 16, 8, 7, -16, -20, 15, -16, 4, 17, -11, -14, 5, -21, 13, -13, 15, -9, -18, 0, 22, 2, -1, 5, -22, 9, -4, 6, 
  -20, 37, 35, 32, -6, -6, 3, 20, -36, -9, -65, 1, -1, -12, -32, -31, 12, -1, -65, 13, -44, -9, 25, -35, -61, -19, 41, 2, 29, -39, -5, 10, -85, -38, -27, 31, 36, 5, -57, -76, -13, -36, 50, -24, -30, -11, 7, 12, 26, 6, 10, -14, -40, -45, -31, 33, -45, -42, 26, 22, 25, -20, -72, -13, 19, 18, -30, -16, -23, 40, -53, -42, -46, 9, 33, -55, 13, 33, 6, -38, 55, -79, -2, -73, 39, -33, 8, 15, 37, -29, -37, -55, -47, 3, 2, 61, -1, -59, 14, 9, 11, -9, 
  -27, 14, 63, 32, -15, 3, 29, 35, -16, -20, -47, -5, -13, -13, -26, -20, -3, -13, -77, 20, -44, 5, 49, -10, -92, -26, 15, 26, 15, -27, -31, 10, -70, -12, -38, 21, 16, 27, -65, -52, 1, -31, 47, -3, -57, 4, 8, -7, 39, 33, 12, -16, -16, -27, -39, 12, -14, -22, 11, 12, 8, -33, -47, -16, 23, 23, -42, -26, -36, 29, -32, -23, -50, 30, 11, -82, 24, 38, 10, -5, 33, -79, 10, -70, 66, -36, 1, 53, 14, -19, -33, -52, -54, -20, 4, 42, 13, -60, 29, -1, 26, -19, 
  -21, 31, 49, 9, -8, -20, 32, 46, -39, 8, -52, -28, 5, -8, -33, -35, 27, -33, -92, 9, -46, -6, 23, -10, -86, -17, 7, -1, -2, -28, -7, 17, -58, -46, -31, 32, 16, 19, -51, -89, 5, -33, 22, -28, -54, -23, -2, 0, 15, 40, 42, -18, -51, -27, -45, 44, -14, -37, 33, 10, 26, -21, -84, 6, 26, 16, -43, -6, -24, 18, -56, -29, -45, 2, 11, -79, 7, 20, 33, -20, 30, -95, 9, -81, 74, -34, 5, 53, 25, -28, -53, -89, -77, -22, 18, 41, 17, -71, 42, 16, 20, -40, 
  0, -18, -4, -8, 7, -11, 10, -13, -14, -5, 4, -8, -20, 12, -17, -2, 1, 16, -5, -21, -22, -6, -22, -3, -18, 14, 6, -22, -13, -8, 0, 14, -13, 10, -1, 9, -16, -8, -8, 14, 7, 15, 1, -20, 7, -11, -8, -16, 10, 10, 14, 5, 3, -7, 6, -14, -16, -9, -20, 8, 7, 6, 0, -3, -8, 3, -4, 9, 7, 2, -5, -10, -20, -9, 2, -11, -14, -6, 6, -13, -15, -4, -7, -1, 3, -5, 5, 17, -8, 9, -22, 8, 2, 9, -7, -12, -1, 17, -19, 1, -22, -10, 
  -7, -18, 6, 20, -22, -14, -1, -12, -11, 12, 16, 10, -4, -17, 10, -13, 16, -16, -6, -5, -14, -1, -5, 4, 11, -3, -16, 9, -12, 5, 13, 12, -8, 4, -16, -11, 5, -11, 17, 0, -17, -13, 1, -22, -14, 13, 2, -14, -6, -18, -18, -10, 13, 3, -8, 14, -21, -15, -3, -7, 6, 2, -3, 12, -3, 13, -5, 15, 9, 6, 13, -23, -3, -21, -17, -16, -8, -2, -10, -4, -21, 0, -21, -5, 10, 11, -2, 16, -4, 6, -12, 3, -5, -3, 14, 5, -2, 7, 11, -10, -19, -19, 
  6, 6, -20, 9, -4, -21, 12, 5, 8, -9, -6, -21, 15, 6, 5, -12, 21, -10, -5, -4, 2, -4, 3, -12, 13, 12, -10, 17, -1, 0, 13, -25, -11, 12, 16, 4, 17, -12, 0, -11, 6, -18, -16, -10, 3, -18, -3, 10, -13, 5, 14, -24, 0, -8, -2, 9, -17, -2, 9, 3, -2, 13, -21, 14, -4, -17, 11, 1, -23, 4, 0, -22, 1, -15, -11, 13, 7, 14, -14, -18, 9, -18, 11, -14, 8, 5, 15, 2, -8, 3, -9, 14, 2, -6, 6, 2, -20, 4, 5, -10, -17, 13, 
  8, -18, -20, -3, -21, -9, -12, 6, -21, -7, 17, -16, -8, 11, 9, 2, -21, -22, -10, 9, -16, 6, -7, 5, 14, 8, -18, 6, -9, -4, 4, -18, -4, -15, -19, -9, -9, -10, 4, 17, -22, -19, 9, 15, -15, 8, -9, -6, -11, 17, -8, -10, -1, 2, -13, -8, -17, -16, -5, -20, -21, 8, 15, -1, -17, -10, 5, -4, 9, 10, -3, 10, 14, 3, -7, -3, -7, -20, -10, 14, 5, -11, 7, -14, -11, 12, 11, 10, -19, -12, 5, 15, 3, 10, 3, -7, 16, -1, 13, 19, -2, -17, 
  19, -37, -58, -14, 10, 28, -5, -8, 55, 10, 76, 24, 18, -14, 42, 23, -11, 23, 76, -19, 47, 15, -36, 63, 96, 24, -25, 0, 7, 65, 35, 8, 89, 28, 34, -5, -33, -15, 70, 86, 36, 10, -33, 43, 48, 25, 14, 5, 2, -8, -32, -8, 52, 20, 68, -21, 47, 25, -22, -15, -25, 23, 93, 31, 0, -4, 37, 12, 35, -22, 59, 52, 36, -19, -16, 89, -4, -23, -21, 24, -41, 100, -16, 68, -52, 15, -5, -5, 1, 45, 74, 67, 101, 0, -20, -53, 13, 99, -2, 1, -9, 34, 
  42, -5, -41, -4, 27, 42, -6, -9, 22, 19, 92, 46, 34, 19, 47, 19, 1, 44, 109, 13, 52, 11, -18, 60, 121, 26, -29, -13, 9, 68, 37, -17, 73, 49, 48, -38, -14, -12, 96, 80, 23, 27, -23, 38, 76, 14, 25, 26, -12, -33, -3, -9, 31, 59, 55, -2, 62, 59, -3, -13, -23, 21, 117, 21, -4, 5, 44, 51, 47, -21, 66, 61, 63, 15, -19, 109, 8, -17, 1, 55, -37, 122, -3, 71, -71, 40, 20, -52, -9, 55, 73, 106, 112, 15, -2, -22, -6, 91, -11, 10, 17, 27, 
  25, -18, -52, -53, 0, 1, -15, -38, 48, 32, 87, 27, -14, 19, 44, 23, 12, 21, 87, 1, 17, -9, -41, 41, 76, 27, -34, 23, -16, 26, -4, 6, 65, 28, 29, -15, -11, -6, 90, 79, 34, 15, -43, 13, 48, 7, 5, 2, -12, -26, -21, 26, 72, 16, 48, -17, 27, 16, -31, -21, -32, 0, 73, -1, -25, 24, 24, 27, 7, 11, 71, 43, 47, -19, -11, 79, 9, -37, -23, 51, -52, 105, -5, 102, -50, 24, 10, -12, -15, 51, 65, 78, 100, 10, -8, -53, -3, 98, -42, -7, -35, 30, 
  33, -15, -60, -30, 5, 5, -16, -35, 25, 22, 67, 50, 18, 12, 22, 44, -13, 26, 117, -19, 34, 9, -17, 55, 102, 10, -35, -8, -8, 44, 15, -6, 108, 27, 19, -29, -10, -4, 104, 101, 34, 36, -37, 11, 64, 2, 7, 15, -30, 5, -11, -15, 63, 30, 68, -17, 30, 25, -3, -17, -6, 27, 124, 28, -17, 21, 65, 37, 62, -18, 58, 50, 49, -14, 6, 112, 11, -20, -15, 48, -33, 92, -2, 91, -80, 23, -13, -26, -24, 40, 63, 84, 100, 19, 9, -36, -8, 119, -10, 1, 2, 23, 
  -42, 27, 43, 47, -28, -13, 12, 19, -45, 8, -56, -27, 1, -8, -18, -15, 13, -3, -70, 43, -56, 5, 18, -24, -77, -5, 27, 22, -1, -58, -8, -2, -93, -51, -18, 21, 19, 23, -92, -75, -14, -32, 64, -11, -72, 10, -19, -14, 32, 10, 30, 5, -47, -37, -52, 44, -19, -24, 32, 22, 38, 6, -99, -23, 46, -11, -63, -1, -18, 31, -73, -56, -60, 30, 34, -84, -7, 46, 26, -41, 54, -80, 20, -71, 52, -10, 17, 51, 11, -44, -64, -62, -89, -22, 1, 68, 28, -85, 22, 13, 27, -11, 
  16, 5, 17, -22, -7, 12, 11, -22, -8, 15, -20, -10, -22, -19, -14, -5, 17, 6, -4, 5, 1, 8, 0, 12, 8, -9, 0, 2, -11, 6, -12, 14, -8, -16, -15, -20, -11, 1, -17, -9, 1, -16, 9, 7, 15, 8, 2, -11, 1, 12, 4, 16, -19, -14, -17, 2, -21, 9, 0, -17, 5, 12, 14, -15, 9, -3, -21, -16, -5, -2, -5, 3, -9, -12, 9, 0, 5, -19, -1, 16, 14, -4, -19, 6, -5, -16, -21, -13, 7, -13, 1, 4, -22, 18, -9, -13, 7, 0, -4, 7, -14, -17, 
  -21, 11, 61, 16, -22, -15, 29, 32, -43, -3, -35, -16, -1, 8, -24, -35, 14, -30, -80, 40, -34, 4, 39, -38, -79, -28, 27, -5, 9, -49, -21, 24, -61, -20, -31, 37, 31, 32, -62, -73, 1, -27, 42, -13, -42, 8, -20, -3, 23, 16, 3, 12, -30, -19, -27, 5, -48, -16, 22, 7, 25, -7, -54, -1, 45, -10, -34, -2, -34, 10, -45, -30, -37, 17, 18, -68, 6, 24, 34, -15, 44, -48, 28, -77, 60, -17, 3, 32, 12, -11, -56, -57, -64, 2, 14, 55, -9, -55, 32, -20, 25, -15, 
  39, -32, -35, -42, -10, 10, -8, -24, 39, -1, 66, 33, 18, -11, 39, 47, -23, 13, 91, 4, 8, -22, -28, 40, 108, 9, -29, 6, -1, 51, -2, 3, 94, 58, 30, -35, -23, 6, 96, 94, 29, 25, -38, 6, 48, 5, 11, -1, -3, 11, -10, -4, 66, 41, 44, -13, 22, 43, -16, -10, -15, 25, 100, 15, -15, -9, 49, 11, 58, 0, 63, 49, 13, -13, 1, 86, 20, -52, -11, 30, -19, 78, 5, 80, -54, 13, 8, -14, -36, 32, 50, 102, 99, 46, -12, -40, 4, 65, -24, -14, -2, 60, 
  -16, 8, -19, -11, -12, -8, 15, -4, 14, 5, 14, 13, -6, 13, -4, -13, -20, -6, -11, -1, 5, -3, -5, -15, -15, -13, -18, 0, -3, -11, -18, 3, 15, 4, -13, 13, 15, 8, 13, 8, -6, -15, 4, -18, -4, -8, -1, 6, -9, -14, 12, 1, -14, 7, -14, 4, -15, 1, 7, 1, -15, -2, -20, -14, 8, 11, -13, 4, 9, 14, -15, -9, -2, -4, 11, -16, 7, 9, -8, -25, -4, 13, 13, 1, -13, -19, 0, 12, 15, 3, -12, -12, -6, -14, -6, 1, -14, -7, -18, 0, 16, -9, 
  18, -10, -42, -39, -5, 9, 2, -30, 52, -1, 66, 42, -8, 1, 48, 41, 0, 14, 84, 10, 19, -2, -11, 77, 81, 10, -15, 15, -8, 57, 32, -16, 100, 28, 20, -23, -18, 7, 68, 67, 27, 30, -20, 16, 31, 8, 13, 16, -4, -16, -27, 6, 33, 47, 64, -24, 49, 59, -14, 11, -14, 17, 60, 35, -33, 19, 41, 15, 50, -16, 67, 59, 34, -13, -22, 69, 12, -49, -13, 24, -37, 100, -15, 68, -49, 33, -3, -10, -8, 54, 76, 89, 73, 26, -24, -63, -8, 99, -23, 18, -26, 51, 
  -2, -18, -1, 13, -14, -6, 2, -1, 14, 5, 9, -11, -21, -9, 2, 14, -5, 0, -4, -8, 9, 10, 14, 2, -5, 9, -23, -7, -8, -14, 1, -19, -3, -3, 0, -22, -8, 1, -16, 3, -15, -7, -10, -18, -17, 15, -18, -17, 3, -20, 10, 6, 9, -14, -6, 12, -17, -21, -19, -13, -11, -16, -20, -12, 10, -5, -1, -16, -3, -6, 2, 3, -1, 6, -16, -16, 16, -14, -19, 10, 6, -6, 14, 15, -1, 4, -21, -17, -22, 0, -5, 5, 12, -15, 13, -21, 8, 16, 12, 16, -20, 6, 
  33, -41, -52, -33, -2, 28, -24, -39, 52, 11, 74, 33, -5, 3, 16, 16, -3, 35, 51, 1, 39, -12, -13, 38, 98, 39, -47, 22, -10, 46, 31, 7, 63, 51, 30, -31, 5, -1, 77, 78, 17, 40, -12, 31, 30, -3, -9, 21, -7, -19, 3, 4, 43, 42, 36, 6, 40, 11, -11, -13, -12, 16, 72, 7, -36, 12, 52, -7, 45, 5, 59, 36, 17, 2, 1, 67, 13, -45, -4, 33, -45, 63, -12, 56, -36, 17, 26, -21, -23, 23, 42, 87, 64, -5, -27, -62, 1, 73, -8, 14, -10, 19, 
  -1, 5, -14, -8, 16, 8, 13, 11, -2, 6, -13, -16, -1, 13, -1, 12, -20, -22, 7, -19, 4, 2, -23, 15, 12, -21, 10, 10, -6, 4, -12, -5, 0, 9, -15, 5, -5, 2, 13, 15, 4, -10, -21, -7, 15, -5, -11, -2, 6, -22, -15, 1, -20, -5, 6, -4, -8, -3, -21, 10, -6, -9, -1, -11, -5, 3, 2, 7, -13, -19, -8, 5, -20, 2, -20, -7, -19, 8, 15, -18, -12, -22, 4, 7, 0, -10, -15, 1, -20, 5, -20, -4, -15, -17, 12, 7, -3, -2, 6, -11, -17, 16, 
  -11, -22, 14, 9, 2, -19, -1, -9, -18, -1, -5, -7, 14, 9, -22, -19, -16, -10, -13, -12, -19, -14, -14, 8, -15, 2, -5, -11, -1, 8, 14, 1, 13, -2, -13, -13, -25, 20, -5, 1, 16, -10, -4, 15, -14, -6, 3, 14, -16, -16, -1, 0, -2, 9, 4, -15, 5, 11, 9, 20, -4, -15, 6, -15, 14, 6, 4, -14, 14, -5, 3, 4, -14, -8, 10, -22, 5, -14, -24, 6, 5, 13, 15, 3, -8, 6, -9, -1, 4, -10, -14, 11, -10, -5, -15, -10, -1, -22, 11, -9, 11, -8, 
  15, -39, -71, -11, 43, 41, -12, -34, 42, -6, 72, 16, 15, -11, 28, 36, 15, 17, 91, -11, 52, -8, -30, 54, 118, 8, -30, 23, 3, 27, 6, -5, 62, 58, 42, -16, -13, 13, 67, 73, 26, 40, -36, 7, 46, 5, 6, 0, 0, -8, -6, -1, 31, 52, 44, -10, 38, 43, -5, -10, -15, 34, 95, 28, -26, 17, 52, 16, 60, -19, 43, 44, 51, -11, -1, 65, -1, -41, -10, 40, -53, 81, 7, 80, -55, 23, 18, -22, 6, 32, 56, 83, 78, 26, 9, -60, 18, 98, -11, -22, -3, 59, 
  17, -28, -65, -25, 34, 28, -20, -9, 28, 24, 76, 31, 23, 17, 43, 29, 13, 20, 86, -1, 26, 7, -15, 66, 88, 33, -31, 10, -2, 50, 33, 8, 63, 50, 15, -11, -4, -19, 83, 101, 35, 42, -46, 10, 71, 36, 5, 14, -13, 4, -18, 7, 43, 25, 49, 3, 58, 30, -24, 20, -33, 33, 97, -8, -28, 10, 45, 36, 40, -19, 69, 41, 33, 4, -17, 101, 18, -34, -19, 28, -44, 99, -5, 104, -37, 30, -11, -29, -24, 40, 80, 85, 93, 4, 7, -41, 1, 91, -29, 11, -27, 33, 
  35, -21, -39, -39, 26, 12, 6, -31, 43, 25, 40, 16, -8, -6, 11, 36, -6, 37, 55, 9, 19, -3, -38, 23, 64, 41, -20, -7, -16, 53, 11, -13, 79, 45, 30, -4, -1, -9, 61, 76, 30, 36, -47, 0, 27, 25, -9, -13, 1, -20, -25, 12, 53, 14, 61, -21, 34, 43, -18, -5, -22, 13, 75, 0, -24, 15, 37, 33, 51, 0, 41, 23, 55, -15, -19, 77, -12, -22, -19, 37, -43, 66, -12, 53, -28, 1, 9, -25, 7, 17, 66, 59, 67, 25, 4, -26, 12, 60, -5, 14, -19, 46, 
  -36, 35, 54, 4, -1, -7, 10, 42, -39, 20, -66, -9, -9, -6, -29, -43, -3, -23, -66, 6, -44, -13, 37, -12, -88, -2, 11, -5, 14, -52, -1, -9, -60, -24, -8, 39, 39, 8, -50, -64, -14, -20, 26, -21, -54, 2, 6, 11, 11, 15, 25, -24, -56, -50, -27, 42, -18, -15, 31, 30, 31, -4, -86, 11, 26, 0, -32, -10, -45, 18, -67, -44, -35, 4, 9, -74, 1, 40, 30, -49, 46, -61, 9, -53, 74, -7, 11, 21, 34, -19, -53, -76, -78, -13, 17, 63, -14, -92, 26, -7, -3, -30, 
  30, -7, -54, -12, 3, 42, -23, -28, 44, 31, 87, 58, -5, 6, 26, 37, 4, 16, 120, 21, 53, 2, -26, 37, 112, 0, -40, 34, 37, 60, 40, 9, 86, 26, 35, -29, -15, -18, 93, 80, 16, 11, -28, -4, 38, 17, 5, 1, -15, -9, -31, 15, 57, 39, 50, -18, 51, 66, -18, 2, -1, 24, 116, 32, 2, -10, 58, 31, 41, 4, 46, 61, 53, -15, -3, 68, 28, -22, -7, 42, -16, 100, -1, 73, -59, 1, 5, -16, -6, 59, 81, 74, 108, 24, 3, -62, 4, 102, -25, 19, -16, 36, 
  34, -31, -37, -17, 35, 42, -32, -39, 28, 21, 79, 19, 11, 6, 19, 19, -4, 37, 64, 15, 24, 20, -8, 51, 83, 16, -19, 3, 21, 57, 33, 14, 61, 34, 50, -13, -13, -6, 63, 85, 17, 43, -13, 38, 46, 0, 23, -4, -1, -4, -14, 9, 35, 54, 35, -25, 28, 38, 6, 13, -13, 20, 86, 4, -21, -14, 55, 26, 42, 8, 68, 52, 49, 2, -2, 96, 6, -46, -5, 36, -44, 85, 13, 62, -52, 32, 10, -41, -3, 56, 58, 91, 76, 12, 13, -46, -4, 80, -32, 12, -8, 18, 
  -19, 14, -17, -10, 8, 1, 11, 14, -18, 11, -15, 11, -10, -20, -21, -18, 11, 1, -2, -17, -17, -17, -8, 9, -16, 1, -4, 0, 17, -22, 16, -16, 17, 6, 4, -8, -9, 1, 8, 12, -22, 14, -3, -21, -20, 9, -8, -6, 11, -4, 4, -3, 17, -9, 4, -12, -21, 12, -17, -21, 13, 3, -14, 11, -17, 17, -20, -18, 14, -22, -11, -23, 4, 10, -1, -19, -14, 6, -8, 6, 22, -3, 3, 7, 19, -20, -11, 1, 18, -18, 14, 9, -20, 0, 9, -9, -18, 5, 7, -16, -9, 15, 
  12, 23, -8, -21, -15, 11, -4, 2, 9, -6, -1, -12, -18, 13, -7, -20, 11, -9, 6, 10, -7, -18, -16, 9, -13, -13, 10, -14, 7, -6, -16, -14, -18, 0, -2, -7, -15, 4, -22, 10, 11, -20, -17, 2, 14, 7, -8, -1, 8, -15, 11, -2, -16, 13, -19, -1, -15, 5, -1, -9, 9, -21, -14, -19, -6, 3, 13, -17, 10, -7, 3, 7, 2, -7, 13, 6, 11, 15, 16, -4, -8, 9, 1, -18, 2, 4, -17, -12, -13, 9, 8, 1, -10, -4, -4, -4, 15, -12, -6, 2, -5, 1, 
  2, -22, 16, -20, 10, 15, 7, -9, 8, -15, -2, 12, -11, 11, -9, 0, -18, -8, 9, 9, -13, -2, -4, 9, 2, -11, -14, -5, 14, -11, 15, -18, -11, -9, -15, 13, -2, -16, -16, 14, 5, -20, -8, -13, 19, -1, -18, -20, 7, -5, 1, 8, 0, -5, -9, -18, -17, 1, 15, -18, 5, -8, -3, 3, 13, 0, -21, 7, -5, 4, -13, -11, 13, -3, -8, -10, -8, 8, 8, -16, -8, 10, -14, -18, -9, 14, -17, -6, 4, 0, -6, -17, 14, -10, 16, 2, 10, -4, -8, -4, -10, 6, 
  -13, -1, -17, 3, -10, -17, 14, 8, -8, 9, -20, 8, 10, -14, -16, -22, 17, 4, 7, 6, 3, -9, 1, -17, -12, -11, -15, -9, -11, -9, 12, -11, -18, -5, 5, 2, 2, -11, 8, -15, -16, 14, -22, -7, -22, 14, -10, -22, -14, -4, -16, -11, 12, -6, 9, 12, -15, -14, -10, 0, -15, -4, 8, -11, -2, -13, -8, -9, -17, -4, -2, -14, -2, 16, -1, 8, -4, 1, 13, 0, -19, -2, -20, -6, 8, -16, -9, -15, -16, 13, 2, 14, -7, -13, 15, -11, 16, -22, 15, -20, -12, 6, 
  5, 5, 11, 14, 1, 7, 7, 7, -2, 1, 8, 3, 12, 15, 6, -16, 13, 12, 15, 1, -6, 13, 9, 11, 8, -10, -13, -7, -12, -8, -9, -19, 7, 11, 19, 6, -15, 2, -5, -3, -14, 3, -4, 1, 1, -20, 15, -2, -6, -7, -10, 19, -19, -10, -10, 0, 7, -22, -2, -19, -14, 2, -17, 5, -3, 19, 7, 11, -6, 14, 7, -5, 20, -5, -7, 17, -2, 15, 17, 18, -11, 5, -14, 4, -11, -23, 17, 6, -4, 13, 14, -15, 8, 15, 0, 1, -5, -16, 4, -10, -14, 11, 
  -12, 8, 49, 13, -27, -11, 14, 34, -37, -10, -69, -5, -21, -8, -13, -29, -4, 0, -71, 5, -18, 10, 14, -13, -78, -12, 30, 24, 20, -47, -9, -4, -70, -48, -23, 14, 31, 14, -83, -67, -5, -19, 31, -22, -36, -14, 0, 22, 28, 12, 23, -10, -33, -21, -61, 42, -30, -41, 1, 0, 9, 0, -53, -8, 41, 8, -35, -22, -29, 45, -37, -33, -37, 2, 17, -81, 29, 24, -6, -28, 45, -75, 4, -46, 66, -13, 2, 36, 34, -37, -64, -51, -66, -8, 1, 57, 2, -82, 29, -18, 32, -16, 
  -12, -20, -17, -16, -19, 6, -18, 16, 12, -17, -3, -18, -17, -8, -11, 13, -12, -9, -19, 11, 2, -1, 2, 13, 11, -11, -20, -1, -2, -20, -2, -13, 12, 4, -5, -22, 7, 8, -5, 12, 17, -21, 1, -2, 5, -19, 7, 3, -12, 4, -10, -16, 4, 8, 10, 5, -11, -2, 3, -13, 12, 8, 2, 0, -19, 9, -10, 9, 8, -10, -9, -4, -7, -8, 10, -4, 13, -16, -11, -8, -18, -12, 1, -11, 11, -17, -8, -20, -19, -10, 5, 13, 15, 5, -18, -9, -23, -21, -11, -5, -3, 15, 
  33, -37, -42, -14, 33, 13, -9, -28, 33, 4, 61, 28, 5, 19, 36, 26, 9, 25, 86, -15, 30, -13, -39, 54, 60, 32, -39, -2, 3, 56, 29, 5, 83, 38, 9, -12, -29, -23, 76, 70, 41, 16, -13, 24, 56, 6, 20, -3, -21, 12, -12, -13, 30, 28, 36, -21, 23, 37, -18, -6, -12, 23, 85, 14, -26, 10, 24, 27, 22, 6, 38, 54, 29, -15, -7, 93, -6, -38, -16, 28, -47, 53, -18, 81, -46, 7, -7, -13, 0, 27, 55, 90, 58, 21, -2, -27, 14, 68, -10, 17, -35, 23, 
  -22, -8, 17, -15, -15, -14, -14, 18, 10, 11, -15, -19, -1, -13, -15, 3, 7, 8, 7, 4, -2, -3, -9, -18, -1, -4, 2, -4, -18, -1, -19, -15, -4, 9, -2, -2, 2, 6, -11, -5, -12, 1, -10, 14, -11, -22, -23, -2, 1, 19, -14, -11, -8, -17, -8, 4, -14, -17, -21, 13, -15, -16, -2, -13, -14, -15, 13, 7, 6, -1, 3, -13, -6, 0, -9, -16, 3, 8, 7, -17, 5, -20, -14, 12, 5, 11, 10, -7, -4, 13, 13, -19, -2, 12, 14, 11, -16, -3, 6, -7, -14, 9, 
  13, 14, -8, -21, 9, -6, -12, -23, 10, -23, 6, -2, 9, -11, -12, -4, 10, 17, 12, -3, 5, -2, 11, -11, 10, -3, -7, 10, 8, 0, -13, 2, -7, 7, -11, 11, -22, -3, -7, 8, 4, -8, -10, 9, -17, -6, -20, 5, 1, 9, -21, -7, -7, 5, -18, 6, -4, -21, -8, -18, 13, -11, -6, 4, -19, 17, 9, -15, -4, -6, -9, -22, 8, 5, -15, -5, 15, -12, -8, -5, -15, 17, 10, 11, -11, -14, 8, -11, -14, -10, 12, 14, -18, -23, -5, 3, -3, 14, 6, 9, 8, -2, 
  9, 15, 5, -7, 2, -1, -2, -13, 4, 15, -19, -19, 12, 3, 2, 2, -7, -14, -18, 3, 7, 22, -6, -14, 14, 9, -8, 21, 10, -22, -10, -16, -22, -12, 3, 1, 2, -20, 8, 17, -2, 3, -14, 6, -12, -9, -3, 15, 2, 0, -8, 1, -12, -13, -21, -1, 9, 1, -11, -16, 13, -4, -4, -5, -16, -3, -19, -9, 12, -15, 3, -19, 1, 11, 7, 10, 11, -10, -8, 13, 7, 5, -21, -5, -7, 5, 7, 13, -4, -14, -22, 11, 16, 11, -2, -6, 15, -18, 5, -8, 10, 8, 
  27, -26, -58, -12, -2, 22, 3, -15, 27, 27, 44, 43, -21, 11, 44, 37, -6, 32, 90, -16, 39, -14, -11, 54, 80, 11, -32, 25, -1, 22, 16, -20, 81, 48, 28, -7, -5, -29, 78, 57, 39, 27, -35, 19, 27, -7, 9, -9, -22, 6, -11, 22, 27, 31, 65, -18, 53, 18, -26, 4, -3, -5, 63, 27, -11, 2, 41, 35, 39, 6, 65, 26, 40, 2, 6, 77, 4, -49, 4, 35, -49, 86, -4, 87, -71, 21, -7, -25, -30, 15, 46, 72, 61, 2, 2, -47, -1, 76, -14, -10, -23, 41, 
  -40, 45, 52, 4, -15, -15, 21, 45, -13, 23, -57, -38, -22, -7, -27, -26, 11, -38, -76, 21, -52, -9, 42, -20, -102, -26, 33, 7, -5, -26, -11, -9, -56, -20, -8, 36, 45, 23, -74, -64, -13, -26, 52, 2, -43, -2, -12, 21, 26, 25, 25, -1, -41, -19, -29, 36, -45, -13, 11, 17, 36, -9, -88, 7, 21, 9, -29, -9, -40, 19, -53, -31, -48, 0, 15, -63, 17, 27, 31, -17, 60, -64, 17, -66, 60, -22, -14, 46, 17, -33, -38, -55, -64, -21, 21, 52, 17, -89, 34, -9, 16, -7, 
  10, -5, 4, 9, -21, -16, 15, -13, 18, -14, 8, 15, 3, -15, 16, 18, -8, -19, 9, 1, 1, -17, 7, -1, 2, 0, -1, -13, 1, -6, 18, -5, -5, 17, -20, -17, -17, -9, -7, 1, -13, -2, -3, -11, -17, 10, -5, 9, 11, -23, -19, 13, 17, -19, -5, -4, 18, -20, 14, 1, 5, 2, 15, 14, 16, 16, -6, -11, 13, -13, 11, -23, -16, -21, -12, -1, -11, -19, 5, 12, 20, -7, 14, 11, 16, 14, 4, 20, 17, -10, -13, -11, -5, 13, 7, 18, 4, 8, 13, -9, -17, -11, 
  46, -20, -64, -7, -1, 35, -17, -6, 34, 29, 80, 18, -6, 5, 7, 35, 8, 31, 63, -15, 38, 17, -26, 48, 59, 15, -6, 27, -7, 36, 18, -2, 64, 52, 44, -36, -31, -15, 72, 74, 8, 24, -26, 35, 64, 10, 10, 18, -16, -14, -20, -4, 45, 45, 60, 7, 28, 20, -12, -5, -5, 22, 80, 11, -24, 4, 50, 37, 37, -27, 40, 40, 20, -23, -12, 93, 24, -20, -3, 41, -18, 75, 18, 79, -41, 17, 21, -43, -19, 26, 68, 81, 57, 26, -14, -50, 5, 62, -13, 8, -17, 33, 
  -17, -6, 9, -16, -19, -18, 15, 13, -20, -15, 7, -26, -17, 12, -6, 4, -12, -14, 10, 14, 9, -4, 16, -3, -18, -20, -11, -11, 1, -6, 8, -10, 2, 6, 11, -16, 15, -8, -15, 10, -9, -18, 11, -5, 10, 18, 1, 18, 6, -23, -5, -2, 10, -2, -20, -6, -13, 12, -24, -6, -18, 16, -17, -24, -10, 15, -24, 21, -18, 15, -24, -24, -22, 17, -9, -22, 1, 17, -15, -8, 21, -7, -15, 13, -14, 8, 13, 17, -12, -17, 1, -20, -23, -2, -23, -17, 6, -10, -24, -16, -7, -5, 
  36, -10, -27, -45, 10, -17, -20, -38, 48, 22, 76, 12, -35, -6, 23, 34, -13, 25, 78, -13, 21, -32, -26, 32, 79, 34, -33, 29, -11, 46, 2, -13, 85, 32, 20, -38, -7, -12, 63, 89, 31, 27, -39, -3, 64, 22, 19, -16, -11, -22, -36, -12, 53, 12, 57, -30, 10, 41, -36, 20, -11, -4, 55, 19, -21, 18, 28, 10, 24, -11, 68, 37, 50, 12, 2, 59, 0, -46, -15, 29, -33, 81, -13, 61, -74, 2, -8, -23, -15, 34, 39, 66, 74, -10, -16, -47, 24, 89, -22, 14, -27, 31, 
  23, -10, -22, 8, 39, 36, -3, 0, 36, 15, 46, 30, 23, 14, 36, 28, 12, 25, 50, -6, 28, 16, -35, 36, 90, 23, -23, 6, 14, 44, 6, 1, 54, 35, 24, -23, -32, -13, 73, 59, 3, 6, -25, 8, 31, 25, 25, -5, 4, 3, -24, 9, 50, 25, 34, -26, 38, 23, 6, -8, 3, -4, 59, 9, -1, 0, 38, 39, 32, -7, 32, 48, 20, -24, -2, 53, 3, -36, 4, 36, -43, 61, 10, 72, -34, 13, 11, -22, 7, 21, 47, 58, 65, -12, -1, -27, -15, 66, -32, -9, 11, 14, 
  24, -49, -50, -42, 4, -9, -7, -22, 55, 15, 59, 28, -11, -11, 35, 28, -21, 35, 75, -13, 29, -19, -41, 46, 69, 44, -51, 18, 10, 59, -3, 5, 62, 60, 36, -28, -9, 2, 95, 76, 2, 31, -23, 27, 67, 5, 8, 3, -21, -15, -35, 29, 25, 30, 69, 2, 0, 15, -35, -5, -14, 17, 93, 10, -23, -8, 28, -2, 23, -26, 81, 62, 31, -22, -28, 97, 15, -43, -35, 16, -56, 89, 6, 87, -74, 8, 4, -12, -19, 23, 45, 64, 79, 26, -1, -45, 22, 75, -7, 14, -10, 29, 
  54, -23, -50, -31, 9, 19, 8, -13, 23, 29, 68, 46, -27, 21, 13, 25, -18, 41, 72, 17, 42, 15, -12, 51, 88, 28, -53, 9, 3, 53, 37, -18, 63, 48, 19, -6, -9, -14, 80, 62, 12, 23, -24, -11, 37, 15, 23, -4, -31, -6, -26, 24, 53, 41, 47, -19, 24, 49, -28, -20, -5, 0, 63, -4, -26, -8, 67, 27, 43, 3, 44, 57, 49, -9, 13, 68, -1, -35, -26, 41, -37, 82, -22, 83, -70, -1, 22, -18, -22, 21, 59, 72, 92, 23, -2, -33, 14, 99, -19, 4, -19, 43, 
  16, -8, -49, -3, 14, 30, -16, -22, 40, -5, 56, 27, 0, 16, 26, 29, -3, 13, 54, 11, 44, -18, -14, 37, 92, 38, -22, -7, -6, 42, 27, -6, 71, 51, 39, -32, 2, -17, 69, 65, 39, 31, -29, 5, 62, 27, 7, 7, 12, -25, -19, -8, 37, 15, 31, -13, 24, 51, -36, 9, -37, 22, 70, 6, -7, 14, 33, 6, 42, 4, 66, 34, 27, -4, -9, 72, -19, -14, -17, 25, -21, 77, -18, 62, -38, 16, 12, -6, -29, 34, 45, 78, 70, 28, 10, -45, -11, 79, -31, 20, -26, 29, 
  -30, 15, 72, 30, -19, -21, 44, 42, -53, -11, -86, -39, 12, 21, -44, -23, 28, -13, -82, 35, -45, 22, 41, -35, -87, -13, 15, -5, 17, -58, 0, 17, -89, -52, -21, 22, 31, 38, -70, -74, -18, -29, 39, -26, -49, -1, -10, 20, 26, 20, 30, -25, -61, -39, -58, 33, -34, -37, 16, 21, 18, -13, -71, -1, 46, -2, -43, -25, -39, 45, -57, -28, -49, -5, 14, -72, 10, 45, 5, -39, 57, -72, 29, -95, 48, -22, -1, 33, 37, -32, -56, -60, -102, -3, -8, 56, 14, -99, 38, -9, 31, -41, 
  27, -35, -10, -8, -20, 0, 9, -67, 31, 13, 51, 6, 18, 8, 18, 24, 0, 37, 97, -10, 22, -30, -1, 35, 86, 28, -16, 35, 13, 39, 6, 3, 89, 21, 21, -12, -14, 23, 67, 81, 5, 4, -32, 11, 20, -9, -37, -11, -39, 34, 0, -20, 35, 3, 72, -10, 8, 29, -31, 6, -32, -12, 75, 11, -39, 27, 18, -16, 14, 24, 38, 18, -5, 10, -25, 80, -7, -63, -5, 37, -23, 107, -23, 93, -51, 6, -1, -10, -32, 24, 60, 74, 97, 8, -10, -55, 29, 54, -11, 21, -15, 26, 
  -7, 0, -18, -13, 12, -16, 1, 3, 8, 10, 0, -2, -19, 5, 9, 7, -18, -5, -16, -17, 4, -3, -16, -16, -3, 13, -16, 5, 8, -6, -2, -20, -7, 9, 2, 15, -8, -5, -6, 13, 8, 13, 14, 2, -18, -12, 1, 14, -23, -9, 12, 10, -1, -21, -2, -13, -7, 2, -12, 16, 0, -4, 14, -15, -10, -9, -19, -10, -4, 6, 0, -23, 9, 0, 5, 1, 19, 13, -12, 7, 20, 5, 10, 6, -13, -9, -9, -14, 15, -20, -8, 1, 5, -1, -18, -14, -5, -3, -17, -15, -16, 4, 
  5, 1, -15, -5, 17, -3, -4, -4, 5, 3, 9, 15, 7, 17, -10, -9, 16, 5, 8, 10, -4, -19, 9, -3, -18, 13, -1, -11, -2, 3, 9, 9, -15, 15, -9, 12, 10, -5, 0, -15, -15, 9, 1, -15, -16, -2, -2, -10, -18, -19, 2, -21, -2, 15, 4, -8, -3, 14, -10, 6, 14, 1, -5, -19, -12, 9, -11, 2, -15, 2, -21, 12, -9, -23, 8, 5, -3, 14, 18, -14, -12, -20, -18, 3, 12, -9, -1, -20, 7, -13, -5, -13, 14, -18, 7, -9, 6, 2, -12, -5, -12, -5, 
  42, -11, -57, -9, 4, 34, -6, -34, 31, 9, 46, 30, 7, 1, 36, 8, -26, 43, 71, -24, 20, -19, -6, 28, 81, 32, -9, 24, 11, 53, 14, -5, 82, 50, 26, 0, -8, 7, 75, 63, 3, 18, -40, 22, 31, 9, 1, 2, -17, -9, -4, 10, 57, 24, 60, -9, 40, 52, -26, 8, -20, -2, 78, 19, -36, 12, 51, 16, 53, -13, 59, 33, 37, -4, -4, 53, 24, -11, -24, 21, -46, 54, 16, 65, -32, 28, 25, -38, -3, 28, 60, 51, 81, 17, -15, -47, 23, 51, -39, 2, -7, 18, 
  -13, 10, 77, 44, 1, -16, 31, 37, -24, 11, -78, -11, -17, 4, -31, -20, 20, -10, -112, 9, -55, 18, 44, -27, -100, -22, 10, -6, 16, -56, -3, 22, -79, -33, -34, 35, 19, 22, -87, -84, 1, -35, 60, -25, -41, -14, -12, 11, 4, 45, 38, 9, -27, -53, -60, 34, -13, -34, 1, 16, 35, -11, -75, -17, 51, 22, -42, -10, -44, 27, -61, -52, -55, 4, 2, -78, 10, 58, -7, -16, 38, -89, -5, -75, 69, -39, -18, 36, 24, -43, -82, -84, -102, 8, -4, 72, -6, -96, 21, 9, 8, -35, 
  38, -52, -48, -38, 8, 9, -7, -26, 39, 18, 80, 29, -9, -14, 26, 34, -3, 54, 87, 7, 14, 2, -36, 49, 74, 14, -26, 37, 3, 43, 22, -16, 86, 30, 31, -8, -34, 7, 55, 86, 27, 42, -31, 21, 43, 1, 10, 7, -29, -9, -18, -2, 45, 37, 62, -12, 13, 45, -22, -9, -6, -6, 80, 22, -1, 1, 57, -4, 12, -19, 59, 33, 52, -17, -13, 91, -14, -55, -29, 39, -26, 68, 3, 62, -76, 6, 7, -32, -25, 30, 75, 79, 63, 34, -6, -67, 0, 79, -31, 9, -29, 38, 
  16, -18, -38, -26, 3, -1, 4, -32, 34, 4, 51, 21, 18, -6, 48, 25, 5, 31, 100, 1, 32, -9, -12, 62, 110, 50, -23, 32, -20, 62, 20, 14, 62, 52, 11, -11, -11, -9, 86, 65, 40, 17, -36, 13, 76, 12, 2, 20, -17, 0, -35, -5, 37, 25, 51, -16, 19, 34, -30, 10, -32, -1, 100, 20, -40, -12, 29, 14, 50, -1, 73, 59, 20, -14, 0, 83, -4, -42, -19, 31, -54, 106, -10, 74, -54, 31, 21, -43, -12, 35, 62, 78, 85, 6, -13, -62, 4, 86, -41, 21, 1, 48, 
  7, 12, -3, 4, -8, -20, 12, -4, 8, 4, 6, 16, -17, -17, 15, 1, 4, -14, -21, -7, 10, -6, -3, -18, 6, -16, -4, -15, 20, -8, 6, -1, -8, 11, 2, -16, -13, -11, 13, 14, 0, -18, 2, -7, 2, -19, -7, -15, -7, -11, -12, -5, 3, 0, -16, -5, -11, -15, -3, -17, -13, 12, 2, -15, -5, -11, -14, -17, -15, 3, -4, -11, -11, 3, 6, 4, -6, -10, -15, 2, 13, -21, -22, -16, 7, -18, 8, -16, -14, 16, 11, 15, 10, -15, 5, -4, -7, -8, -22, -3, 12, -18, 
  11, 22, 17, 1, 14, 7, -17, 9, 5, -1, 10, -19, 0, -2, -1, 13, -9, 10, 6, 4, 6, -4, -21, 5, -24, 10, -17, -11, -13, -19, 5, -9, -19, 7, 17, 12, 23, -17, -4, 14, -9, -12, -7, 6, -2, -15, 11, 7, -11, 4, 8, -22, 3, -8, -6, 20, -18, -17, 3, -5, -10, -11, -21, -23, -12, 7, 7, 5, -5, 8, -9, -8, -8, 5, -15, 14, 9, 20, -7, -11, -7, 11, 8, -10, -9, -17, 4, 17, 0, 4, 12, -3, -13, 1, -22, 9, -3, 0, -9, 6, 11, -20, 
  39, -6, -67, -16, 36, 11, -28, -32, 51, 29, 64, 30, 7, 5, 43, 47, -18, 34, 89, 8, 54, -16, -40, 59, 102, 28, -8, -12, -8, 29, 15, 14, 87, 23, 32, -17, -4, -4, 64, 84, 35, 22, -15, 5, 42, 34, -10, 18, 8, -31, -21, -13, 38, 24, 39, -29, 57, 35, -18, -1, 3, 24, 85, 15, -17, -8, 30, 31, 56, -24, 62, 64, 60, -5, 11, 75, 10, -36, -14, 45, -45, 82, 13, 54, -39, 32, 3, -28, -2, 31, 42, 69, 83, 28, -14, -26, 16, 93, -16, 9, -31, 31, 
  24, -26, -48, -34, 21, 7, -31, -24, 22, 32, 68, 44, 17, 2, 22, 11, -18, 5, 95, -6, 30, -23, -43, 57, 125, 26, -11, 2, 8, 48, 30, 3, 97, 46, 53, -13, -7, -8, 101, 100, 45, 39, -38, 18, 43, 34, 19, 18, 2, -29, -7, 15, 45, 53, 50, 4, 57, 60, -19, 11, 7, 28, 118, 12, -23, 4, 75, 41, 68, 5, 77, 46, 58, -13, 11, 93, 22, -35, -24, 36, -43, 122, 2, 108, -68, 20, 20, -23, 10, 37, 93, 87, 100, 15, -19, -28, -1, 98, -40, 27, -11, 46, 
  -46, 33, 55, 32, 3, -39, 38, 40, -32, 19, -74, -22, 11, 16, -21, -26, 4, -17, -85, 12, -28, -6, 39, -18, -93, -27, 13, 1, 5, -67, -32, 18, -82, -36, -29, 30, 9, 30, -58, -59, -27, -7, 33, -24, -44, 9, 9, 16, 22, 24, 14, -6, -51, -47, -51, 27, -17, -28, 6, 5, 34, -36, -81, 9, 37, 5, -26, -18, -39, 21, -48, -56, -25, 10, 7, -69, -4, 44, 19, -19, 55, -90, -5, -61, 74, -38, -15, 59, 17, -29, -63, -84, -95, -11, 10, 62, 11, -96, 32, -2, 22, -22, 
  34, -48, -43, -57, -5, 0, -24, -53, 38, 1, 90, 14, 11, 3, 31, 41, 3, 51, 110, 12, 43, -25, -44, 79, 91, 43, -44, 15, -26, 64, 22, 10, 98, 57, 25, -20, -32, -9, 67, 73, 16, 37, -24, 26, 64, 20, 15, -3, 3, -7, -26, -2, 38, 47, 76, -26, 19, 42, -11, -6, -12, -4, 90, 34, -22, 10, 62, 24, 34, -11, 81, 50, 30, -17, -11, 83, 17, -51, -15, 39, -69, 84, -4, 93, -55, -3, -3, -15, -29, 11, 69, 94, 72, -1, -12, -70, -5, 87, -38, -5, -25, 45, 
  25, -22, -38, -14, 15, 18, -8, -22, 25, 19, 72, 26, 4, -9, 17, 29, -9, 22, 81, 3, 16, -18, -7, 26, 56, 8, -45, 1, -17, 27, 29, 15, 69, 27, 10, -13, -2, -12, 85, 50, 20, 31, -12, 3, 27, -6, -11, 10, 5, -15, -29, 10, 53, 25, 37, -26, 53, 44, -14, -4, -29, 10, 53, 24, -34, 13, 50, 30, 43, 8, 31, 50, 17, 13, -1, 88, 9, -36, -39, 39, -30, 82, -14, 82, -39, 19, -8, -10, -12, 49, 56, 89, 66, 28, -14, -33, 3, 80, -10, -5, -37, 22, 
  -16, 11, 0, 0, -2, 1, 15, -11, 15, 1, -11, 0, 19, 4, -5, -1, 14, 11, 10, 16, 6, -5, 10, -18, -1, 0, -22, -18, 3, -18, -16, 3, 4, -6, 11, 9, 5, -17, 14, 9, -8, 14, 0, -22, 1, 17, 2, 2, -13, -22, 5, 7, -13, -4, -19, 6, 7, -11, 6, -6, -10, -2, 2, -5, -18, 0, 14, -6, -5, -1, -14, -8, 10, -16, 5, -6, -16, -1, -3, -17, 18, -13, 4, -13, 6, -17, -10, -22, 5, -2, -10, -4, 13, -4, -2, -11, -7, -19, -9, -9, -7, -9, 
};
const TfArray<2, int> tensor_dimension58 = { 2, { 128,102 } };
const TfArray<1, float> quant58_scale = { 1, { 0.0080575020983815193, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(16) int32_t tensor_data59[128] = { 32048, -12579, -24561, 37048, -8467, 9579, 11623, 35951, 12507, 13858, 9115, 39692, 14852, 36631, -9834, 10851, 13036, -12151, 9510, -8900, -20465, 10908, 12733, -8467, 11267, 39805, 7336, -10486, -8465, -8467, 31231, 37456, -12421, 10411, 40214, 10662, -8466, -9855, 11316, 10185, -8918, 9254, -3489, 5510, 11466, -15710, -8432, 8508, 9988, 8057, 11483, 4479, 11708, 14135, -8467, -8467, 9152, 28668, 8837, -8467, -13315, 15200, 37718, -13445, 35043, 31657, 38291, -8467, -8467, -12594, -8462, 12707, 10811, 17020, 11142, 37926, -8467, 34898, 10450, -13696, 13755, -8467, 9132, -10081, -13395, 12371, 12786, 8828, 29433, 5266, 4929, -13400, -11706, -8467, -9532, -19441, 39194, -8467, 9379, -8467, -8958, -11713, 8154, 28400, -15824, 10466, -5563, 13170, 10230, 14103, 13103, 10272, 37897, 12057, -12777, -10461, 10961, 35399, 10140, 13724, -8467, -12931, 9559, 6995, 36821, 10808, 12464, -9339, };
const TfArray<1, int> tensor_dimension59 = { 1, { 128 } };
const TfArray<1, float> quant59_scale = { 1, { 2.7340988708601799e-06, } };
const TfArray<1, int> quant59_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(16) int8_t tensor_data60[2*128] = { 
  22, 20, 5, 70, 30, -91, -110, 60, -116, -102, -88, 45, -98, 81, -4, -99, -103, 35, -71, 14, -22, -91, -77, 22, -62, 76, -86, 30, 27, -24, 42, 61, 14, -84, 25, -92, 29, 7, -111, -46, -4, -110, 5, -82, -97, 19, 7, -111, -104, -59, -59, -70, -73, -99, 24, 25, -111, 26, -106, 17, -3, -118, 82, -14, 61, 73, 45, 10, 27, -5, -18, -102, -38, -113, -45, 68, 19, 76, -113, -16, -88, -1, -116, 23, -18, -101, -97, -96, 48, -70, -104, 27, 7, 19, 29, 12, 74, 25, -104, 24, -5, 23, -77, 48, 13, -111, 20, -52, -87, -69, -82, -95, 57, -81, 1, -12, -103, 83, -127, -91, 25, -30, -72, -106, 25, -116, -94, -3, 
  -77, -18, 15, -51, 12, 107, 113, -77, 80, 66, 93, -69, 73, -59, -17, 77, 52, 31, 84, 16, -23, 102, 106, 11, 112, -32, 79, -3, 32, -30, -60, -54, -2, 58, -79, 95, 31, -3, 78, 104, -29, 56, -27, 72, 88, -2, 14, 109, 119, 112, 108, 91, 120, 91, -2, 7, 99, -70, 101, -14, -5, 86, -38, -16, -78, -76, -72, 11, -8, -17, -12, 81, 90, 50, 72, -34, -21, -82, 84, -19, 88, -17, 117, -1, -18, 92, 76, 82, -55, 66, 92, -21, -25, -20, 1, 11, -72, 5, 87, -21, -3, 13, 96, -69, 21, 92, -5, 91, 81, 72, 98, 94, -46, 95, -28, -17, 95, -20, 91, 98, 7, -27, 93, 75, -78, 54, 83, 1, 
};
const TfArray<2, int> tensor_dimension60 = { 2, { 2,128 } };
const TfArray<1, float> quant60_scale = { 1, { 0.0062701194547116756, } };
const TfArray<1, int> quant60_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int32_t tensor_data61[2] = { 4119, -4119, };
const TfArray<1, int> tensor_dimension61 = { 1, { 2 } };
const TfArray<1, float> quant61_scale = { 1, { 1.0816102985700127e-05, } };
const TfArray<1, int> quant61_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant62_scale = { 1, { 0.0036917892284691334, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,50,20,3 } };
const TfArray<1, float> quant63_scale = { 1, { 0.0080895377323031425, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,50,20,3 } };
const TfArray<1, float> quant64_scale = { 1, { 0.016553362831473351, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,50,20,6 } };
const TfArray<1, float> quant65_scale = { 1, { 0.014015164226293564, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,51,21,6 } };
const TfArray<1, float> quant66_scale = { 1, { 0.014015164226293564, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,25,10,6 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,26,11,12 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,12,5,12 } };
const TfArray<1, float> quant72_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant74_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant75_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,13,6,25 } };
const TfArray<1, float> quant76_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,2,25 } };
const TfArray<1, float> quant77_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant87_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant88_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,7,3,51 } };
const TfArray<1, float> quant89_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,1,51 } };
const TfArray<1, float> quant90_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant91_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant92_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<4, int> tensor_dimension93 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant93_scale = { 1, { 0.00082812854088842869, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,102 } };
const TfArray<1, float> quant94_scale = { 1, { 0.00033932339283637702, } };
const TfArray<1, int> quant94_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,128 } };
const TfArray<1, float> quant95_scale = { 1, { 0.0017250234959647059, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<2, int> tensor_dimension96 = { 2, { 1,2 } };
const TfArray<1, float> quant96_scale = { 1, { 0.08560074120759964, } };
const TfArray<1, int> quant96_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<2, int> tensor_dimension97 = { 2, { 1,2 } };
const TfArray<1, float> quant97_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant97_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 62 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 62,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 63,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 64 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 64,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 65 } };
const TfArray<2, int> inputs4 = { 2, { 65,2 } };
const TfArray<1, int> outputs4 = { 1, { 66 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 66,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 67 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 67,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 68 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 68,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 69 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 69,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 70 } };
const TfArray<2, int> inputs9 = { 2, { 70,2 } };
const TfArray<1, int> outputs9 = { 1, { 71 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 71,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 72 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 72,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 73 } };
const TfLiteDepthwiseConvParams opdata12 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 73,22,23 } };
const TfArray<1, int> outputs12 = { 1, { 74 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 74,24,25 } };
const TfArray<1, int> outputs13 = { 1, { 75 } };
const TfArray<2, int> inputs14 = { 2, { 75,2 } };
const TfArray<1, int> outputs14 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 76,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 77 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 77,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 78,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 79 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 79,32,33 } };
const TfArray<1, int> outputs18 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata19 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 80,34,35 } };
const TfArray<1, int> outputs19 = { 1, { 81 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 81,36,37 } };
const TfArray<1, int> outputs20 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 82,38,39 } };
const TfArray<1, int> outputs21 = { 1, { 83 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 83,40,41 } };
const TfArray<1, int> outputs22 = { 1, { 84 } };
const TfLiteDepthwiseConvParams opdata23 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 84,42,43 } };
const TfArray<1, int> outputs23 = { 1, { 85 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 85,44,45 } };
const TfArray<1, int> outputs24 = { 1, { 86 } };
const TfLiteDepthwiseConvParams opdata25 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 86,46,47 } };
const TfArray<1, int> outputs25 = { 1, { 87 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 87,48,49 } };
const TfArray<1, int> outputs26 = { 1, { 88 } };
const TfArray<2, int> inputs27 = { 2, { 88,2 } };
const TfArray<1, int> outputs27 = { 1, { 89 } };
const TfLiteDepthwiseConvParams opdata28 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 89,50,51 } };
const TfArray<1, int> outputs28 = { 1, { 90 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 90,52,53 } };
const TfArray<1, int> outputs29 = { 1, { 91 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 91,54,55 } };
const TfArray<1, int> outputs30 = { 1, { 92 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 92,56,57 } };
const TfArray<1, int> outputs31 = { 1, { 93 } };
const ALIGN(1) uint8_t opdata32[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs32 = { 2, { 93,3 } };
const TfArray<1, int> outputs32 = { 1, { 94 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 94,58,59 } };
const TfArray<1, int> outputs33 = { 1, { 95 } };
const TfLiteFullyConnectedParams opdata34 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs34 = { 3, { 95,60,61 } };
const TfArray<1, int> outputs34 = { 1, { 96 } };
const TfLiteSoftmaxParams opdata35 = { 1 };
const TfArray<1, int> inputs35 = { 1, { 96 } };
const TfArray<1, int> outputs35 = { 1, { 97 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 13056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension63, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6432, (TfLiteIntArray*)&tensor_dimension65, 6000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension66, 6426, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6432, (TfLiteIntArray*)&tensor_dimension67, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3008, (TfLiteIntArray*)&tensor_dimension68, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension69, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3440, (TfLiteIntArray*)&tensor_dimension70, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 3432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3440, (TfLiteIntArray*)&tensor_dimension72, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1504, (TfLiteIntArray*)&tensor_dimension73, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension74, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1952, (TfLiteIntArray*)&tensor_dimension75, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension76, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2416, (TfLiteIntArray*)&tensor_dimension77, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension78, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension79, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension80, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension81, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension82, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension83, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension84, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension85, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension86, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1696, (TfLiteIntArray*)&tensor_dimension87, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1072, (TfLiteIntArray*)&tensor_dimension88, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension89, 1071, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2000, (TfLiteIntArray*)&tensor_dimension90, 153, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2160, (TfLiteIntArray*)&tensor_dimension91, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension92, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension93, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension94, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension95, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension96, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension97, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_MEAN, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 98;
  for (size_t i = 0; i < 98; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 36; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 36; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  97, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 36; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
