<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="heap__4_8c" kind="file" language="C++">
    <compoundname>heap_4.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">FreeRTOS.h</includes>
    <includes local="yes">task.h</includes>
    <incdepgraph>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-core/src/heap_4.c</label>
        <link refid="heap__4_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>task.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a___b_l_o_c_k___l_i_n_k" prot="public">A_BLOCK_LINK</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="heap__4_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="42" column="9" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="heap__4_8c_1ab71bae5a95671265c828339d44c44b25" prot="public" static="no">
        <name>heapMINIMUM_BLOCK_SIZE</name>
        <initializer>((size_t)(xHeapStructSize &lt;&lt; 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="55" column="9" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="heap__4_8c_1adcef0c4245ebe20ca2b08a574c1caac9" prot="public" static="no">
        <name>heapBITS_PER_BYTE</name>
        <initializer>((size_t)8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="58" column="9" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="heap__4_8c_1a9f213227674effff0122a75d94d87938" prot="public" static="no">
        <name>configTOTAL_HEAP_SIZE</name>
        <initializer>NS_MALLOC_HEAP_SIZE_IN_K * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="67" column="14" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" prot="public" static="no">
        <type>struct <ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref></type>
        <definition>typedef struct A_BLOCK_LINK BlockLink_t</definition>
        <argsstring></argsstring>
        <name>BlockLink_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="77" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="heap__4_8c_1a90e8cd581702224cd749165e4df0ab86" prot="public" static="no" mutable="no">
        <type>size_t const</type>
        <definition>size_t const ucHeapSize</definition>
        <argsstring></argsstring>
        <name>ucHeapSize</name>
        <initializer>= configTOTAL_HEAP_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="68" column="14" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t xHeapStructSize</definition>
        <argsstring></argsstring>
        <name>xHeapStructSize</name>
        <initializer>=
    (sizeof(<ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref>) + ((size_t)(portBYTE_ALIGNMENT - 1))) &amp; ~((size_t)portBYTE_ALIGNMENT_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="99" column="21" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref></type>
        <definition>BlockLink_t xStart</definition>
        <argsstring></argsstring>
        <name>xStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="103" column="20" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref> *</type>
        <definition>BlockLink_t * pxEnd</definition>
        <argsstring></argsstring>
        <name>pxEnd</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="103" column="27" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xFreeBytesRemaining</definition>
        <argsstring></argsstring>
        <name>xFreeBytesRemaining</name>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="107" column="15" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xMinimumEverFreeBytesRemaining</definition>
        <argsstring></argsstring>
        <name>xMinimumEverFreeBytesRemaining</name>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="108" column="15" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xBlockAllocatedBit</definition>
        <argsstring></argsstring>
        <name>xBlockAllocatedBit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="114" column="15" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="heap__4_8c_1ada91818e7c20757e74b418cedd81d88d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t ucHeap[configTOTAL_HEAP_SIZE]</type>
        <definition>static uint8_t ucHeap[configTOTAL_HEAP_SIZE] __attribute__</definition>
        <argsstring>((aligned(4)))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(aligned(4))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="69" column="23" declfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" declline="69" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInsertBlockIntoFreeList</definition>
        <argsstring>(BlockLink_t *pxBlockToInsert)</argsstring>
        <name>prvInsertBlockIntoFreeList</name>
        <param>
          <type><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref> *</type>
          <declname>pxBlockToInsert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="360" column="13" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="360" bodyend="405" declfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvHeapInit</definition>
        <argsstring>(void)</argsstring>
        <name>prvHeapInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="314" column="13" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="314" bodyend="357" declfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" declline="93" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a385f9a3d60e520d0ee0223ee51d010c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * prvPortMalloc</definition>
        <argsstring>(size_t xWantedSize, uint8_t enableSuspendResume)</argsstring>
        <name>prvPortMalloc</name>
        <param>
          <type>size_t</type>
          <declname>xWantedSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>enableSuspendResume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pvPortMalloc has a bug where it assumes that the task scheduler is running: The culprit is ResumeAll, which calls enterCritical/exitCritical - these functions, in port.c, assume the task scheduler is running, and the exit is not enabling interrupts because of the nested critical assert.</para>
<para>NeuralSPOT solution is to create a new version of malloc </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="126" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="126" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1ac56bcb7515f081a5b3df83935499fa4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pvPortMalloc</definition>
        <argsstring>(size_t xWantedSize)</argsstring>
        <name>pvPortMalloc</name>
        <param>
          <type>size_t</type>
          <declname>xWantedSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="250" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1ae2c3222f99c17be723245a621b1915d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pvTasklessPortMalloc</definition>
        <argsstring>(size_t xWantedSize)</argsstring>
        <name>pvTasklessPortMalloc</name>
        <param>
          <type>size_t</type>
          <declname>xWantedSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="252" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1aa11d5a15b4385161c97f222ea275b7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prvPortFree</definition>
        <argsstring>(void *pv, uint8_t enableSuspendResume)</argsstring>
        <name>prvPortFree</name>
        <param>
          <type>void *</type>
          <declname>pv</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>enableSuspendResume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="256" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="256" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a1e7cea2fd1bc894ea3b5f5e8179d259b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vPortFree</definition>
        <argsstring>(void *pv)</argsstring>
        <name>vPortFree</name>
        <param>
          <type>void *</type>
          <declname>pv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="298" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a24f102af613c5cc4dba7ae20763157d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTasklessPortFree</definition>
        <argsstring>(void *pv)</argsstring>
        <name>vTasklessPortFree</name>
        <param>
          <type>void *</type>
          <declname>pv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="300" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a0c28a12b313bc248be0cb7a37ed81bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xPortGetFreeHeapSize</definition>
        <argsstring>(void)</argsstring>
        <name>xPortGetFreeHeapSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="304" column="8" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1ab222e4545b8ff12b62fd000fea6b34eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xPortGetMinimumEverFreeHeapSize</definition>
        <argsstring>(void)</argsstring>
        <name>xPortGetMinimumEverFreeHeapSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="307" column="8" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a8bf103ce32ce8473574e9920af8b4eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vPortInitialiseBlocks</definition>
        <argsstring>(void)</argsstring>
        <name>vPortInitialiseBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c" line="310" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/heap_4.c" bodystart="310" bodyend="311"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.1.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2018<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>A<sp/>sample<sp/>implementation<sp/>of<sp/>pvPortMalloc()<sp/>and<sp/>vPortFree()<sp/>that<sp/>combines</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>(coalescences)<sp/>adjacent<sp/>memory<sp/>blocks<sp/>as<sp/>they<sp/>are<sp/>freed,<sp/>and<sp/>in<sp/>so<sp/>doing</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>limits<sp/>memory<sp/>fragmentation.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>See<sp/>heap_1.c,<sp/>heap_2.c<sp/>and<sp/>heap_3.c<sp/>for<sp/>alternative<sp/>implementations,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>memory<sp/>management<sp/>pages<sp/>of<sp/>http://www.FreeRTOS.org<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="40"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="41"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>configTOTAL_xHEAP_SIZE<sp/>NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>This<sp/>file<sp/>must<sp/>not<sp/>be<sp/>used<sp/>if<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Block<sp/>sizes<sp/>must<sp/>not<sp/>get<sp/>too<sp/>small.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>heapMINIMUM_BLOCK_SIZE<sp/>((size_t)(xHeapStructSize<sp/>&lt;&lt;<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assumes<sp/>8bit<sp/>bytes!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>heapBITS_PER_BYTE<sp/>((size_t)8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>memory<sp/>for<sp/>the<sp/>heap.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(configAPPLICATION_ALLOCATED_HEAP<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>application<sp/>writer<sp/>has<sp/>already<sp/>defined<sp/>the<sp/>array<sp/>used<sp/>for<sp/>the<sp/>RTOS</highlight></codeline>
<codeline lineno="63"><highlight class="comment">heap<sp/>-<sp/>probably<sp/>so<sp/>it<sp/>can<sp/>be<sp/>placed<sp/>in<sp/>a<sp/>special<sp/>segment<sp/>or<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ucHeapSize<sp/>__attribute((weak));</highlight></codeline>
<codeline lineno="65"><highlight class="normal">uint8_t<sp/>ucHeap[]<sp/>__attribute((weak));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>configTOTAL_HEAP_SIZE<sp/>NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ucHeapSize<sp/>=<sp/>configTOTAL_HEAP_SIZE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucHeap[configTOTAL_HEAP_SIZE]<sp/>__attribute__((aligned(4)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configAPPLICATION_ALLOCATED_HEAP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>linked<sp/>list<sp/>structure.<sp/><sp/>This<sp/>is<sp/>used<sp/>to<sp/>link<sp/>free<sp/>blocks<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="73"><highlight class="comment">of<sp/>their<sp/>memory<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="struct_a___b_l_o_c_k___l_i_n_k" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref><sp/>*pxNextFreeBlock;<sp/></highlight><highlight class="comment">/*&lt;&lt;<sp/>The<sp/>next<sp/>free<sp/>block<sp/>in<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBlockSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;<sp/>The<sp/>size<sp/>of<sp/>the<sp/>free<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>Inserts<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>that<sp/>is<sp/>being<sp/>freed<sp/>into<sp/>the<sp/>correct<sp/>position<sp/>in</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>the<sp/>list<sp/>of<sp/>free<sp/>memory<sp/>blocks.<sp/><sp/>The<sp/>block<sp/>being<sp/>freed<sp/>will<sp/>be<sp/>merged<sp/>with</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>the<sp/>block<sp/>in<sp/>front<sp/>it<sp/>and/or<sp/>the<sp/>block<sp/>behind<sp/>it<sp/>if<sp/>the<sp/>memory<sp/>blocks<sp/>are</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>adjacent<sp/>to<sp/>each<sp/>other.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInsertBlockIntoFreeList(<ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlockToInsert);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>Called<sp/>automatically<sp/>to<sp/>setup<sp/>the<sp/>required<sp/>heap<sp/>structures<sp/>the<sp/>first<sp/>time</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>pvPortMalloc()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvHeapInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>placed<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>each<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="98"><highlight class="comment">block<sp/>must<sp/>by<sp/>correctly<sp/>byte<sp/>aligned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xHeapStructSize<sp/>=</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref>)<sp/>+<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(portBYTE_ALIGNMENT<sp/>-<sp/>1)))<sp/>&amp;<sp/>~((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)portBYTE_ALIGNMENT_MASK);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>couple<sp/>of<sp/>list<sp/>links<sp/>to<sp/>mark<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>xStart,<sp/>*pxEnd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Keeps<sp/>track<sp/>of<sp/>the<sp/>number<sp/>of<sp/>free<sp/>bytes<sp/>remaining,<sp/>but<sp/>says<sp/>nothing<sp/>about</highlight></codeline>
<codeline lineno="106"><highlight class="comment">fragmentation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xFreeBytesRemaining<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xMinimumEverFreeBytesRemaining<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Gets<sp/>set<sp/>to<sp/>the<sp/>top<sp/>bit<sp/>of<sp/>an<sp/>size_t<sp/>type.<sp/><sp/>When<sp/>this<sp/>bit<sp/>in<sp/>the<sp/>xBlockSize</highlight></codeline>
<codeline lineno="111"><highlight class="comment">member<sp/>of<sp/>an<sp/>BlockLink_t<sp/>structure<sp/>is<sp/>set<sp/>then<sp/>the<sp/>block<sp/>belongs<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="112"><highlight class="comment">application.<sp/><sp/>When<sp/>the<sp/>bit<sp/>is<sp/>free<sp/>the<sp/>block<sp/>is<sp/>still<sp/>part<sp/>of<sp/>the<sp/>free<sp/>heap</highlight></codeline>
<codeline lineno="113"><highlight class="comment">space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBlockAllocatedBit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*prvPortMalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xWantedSize,<sp/>uint8_t<sp/>enableSuspendResume)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlock,<sp/>*pxPreviousBlock,<sp/>*pxNewBlockLink;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableSuspendResume)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskSuspendAll();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>the<sp/>first<sp/>call<sp/>to<sp/>malloc<sp/>then<sp/>the<sp/>heap<sp/>will<sp/>require</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialisation<sp/>to<sp/>setup<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pxEnd<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prvHeapInit();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>requested<sp/>block<sp/>size<sp/>is<sp/>not<sp/>so<sp/>large<sp/>that<sp/>the<sp/>top<sp/>bit<sp/>is</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set.<sp/><sp/>The<sp/>top<sp/>bit<sp/>of<sp/>the<sp/>block<sp/>size<sp/>member<sp/>of<sp/>the<sp/>BlockLink_t<sp/>structure</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used<sp/>to<sp/>determine<sp/>who<sp/>owns<sp/>the<sp/>block<sp/>-<sp/>the<sp/>application<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel,<sp/>so<sp/>it<sp/>must<sp/>be<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xWantedSize<sp/>&amp;<sp/>xBlockAllocatedBit)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wanted<sp/>size<sp/>is<sp/>increased<sp/>so<sp/>it<sp/>can<sp/>contain<sp/>a<sp/>BlockLink_t</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>requested<sp/>amount<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xWantedSize<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xWantedSize<sp/>+=<sp/>xHeapStructSize;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>that<sp/>blocks<sp/>are<sp/>always<sp/>aligned<sp/>to<sp/>the<sp/>required<sp/>number</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK)<sp/>!=<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byte<sp/>alignment<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xWantedSize<sp/>+=<sp/>(portBYTE_ALIGNMENT<sp/>-<sp/>(xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configASSERT((xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xWantedSize<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(xWantedSize<sp/>&lt;=<sp/>xFreeBytesRemaining))<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Traverse<sp/>the<sp/>list<sp/>from<sp/>the<sp/>start<sp/>(lowest<sp/>address)<sp/>block<sp/>until</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>of<sp/>adequate<sp/>size<sp/>is<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock<sp/>=<sp/>&amp;xStart;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/>xStart.pxNextFreeBlock;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((pxBlock-&gt;xBlockSize<sp/>&lt;<sp/>xWantedSize)<sp/>&amp;&amp;<sp/>(pxBlock-&gt;pxNextFreeBlock<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock<sp/>=<sp/>pxBlock;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/>pxBlock-&gt;pxNextFreeBlock;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>end<sp/>marker<sp/>was<sp/>reached<sp/>then<sp/>a<sp/>block<sp/>of<sp/>adequate<sp/>size</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pxBlock<sp/>!=<sp/>pxEnd)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>memory<sp/>space<sp/>pointed<sp/>to<sp/>-<sp/>jumping<sp/>over<sp/>the</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockLink_t<sp/>structure<sp/>at<sp/>its<sp/>start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvReturn<sp/>=</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(((uint8_t<sp/>*)pxPreviousBlock-&gt;pxNextFreeBlock)<sp/>+<sp/>xHeapStructSize);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>for<sp/>use<sp/>so<sp/>must<sp/>be<sp/>taken<sp/>out</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock-&gt;pxNextFreeBlock<sp/>=<sp/>pxBlock-&gt;pxNextFreeBlock;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>block<sp/>is<sp/>larger<sp/>than<sp/>required<sp/>it<sp/>can<sp/>be<sp/>split<sp/>into</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>two.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pxBlock-&gt;xBlockSize<sp/>-<sp/>xWantedSize)<sp/>&gt;<sp/>heapMINIMUM_BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>block<sp/>is<sp/>to<sp/>be<sp/>split<sp/>into<sp/>two.<sp/><sp/>Create<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>following<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>requested.<sp/>The<sp/>void</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>byte<sp/>alignment<sp/>warnings<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewBlockLink<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(((uint8_t<sp/>*)pxBlock)<sp/>+<sp/>xWantedSize);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configASSERT((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)pxNewBlockLink)<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>sizes<sp/>of<sp/>two<sp/>blocks<sp/>split<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewBlockLink-&gt;xBlockSize<sp/>=<sp/>pxBlock-&gt;xBlockSize<sp/>-<sp/>xWantedSize;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;xBlockSize<sp/>=<sp/>xWantedSize;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>new<sp/>block<sp/>into<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prvInsertBlockIntoFreeList(pxNewBlockLink);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xFreeBytesRemaining<sp/>-=<sp/>pxBlock-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xFreeBytesRemaining<sp/>&lt;<sp/>xMinimumEverFreeBytesRemaining)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMinimumEverFreeBytesRemaining<sp/>=<sp/>xFreeBytesRemaining;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>-<sp/>it<sp/>is<sp/>allocated<sp/>and<sp/>owned</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>the<sp/>application<sp/>and<sp/>has<sp/>no<sp/>&quot;next&quot;<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;xBlockSize<sp/>|=<sp/>xBlockAllocatedBit;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;pxNextFreeBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceMALLOC(pvReturn,<sp/>xWantedSize);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableSuspendResume)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)xTaskResumeAll();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(configUSE_MALLOC_FAILED_HOOK<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pvReturn<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vApplicationMallocFailedHook(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vApplicationMallocFailedHook();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>configASSERT((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)pvReturn)<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)portBYTE_ALIGNMENT_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvReturn;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvPortMalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xWantedSize)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prvPortMalloc(xWantedSize,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvTasklessPortMalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xWantedSize)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prvPortMalloc(xWantedSize,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvPortFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pv,<sp/>uint8_t<sp/>enableSuspendResume)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*puc<sp/>=<sp/>(uint8_t<sp/>*)pv;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxLink;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pv<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>being<sp/>freed<sp/>will<sp/>have<sp/>an<sp/>BlockLink_t<sp/>structure<sp/>immediately</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puc<sp/>-=<sp/>xHeapStructSize;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>casting<sp/>is<sp/>to<sp/>keep<sp/>the<sp/>compiler<sp/>from<sp/>issuing<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxLink<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)puc;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>block<sp/>is<sp/>actually<sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configASSERT((pxLink-&gt;xBlockSize<sp/>&amp;<sp/>xBlockAllocatedBit)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configASSERT(pxLink-&gt;pxNextFreeBlock<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pxLink-&gt;xBlockSize<sp/>&amp;<sp/>xBlockAllocatedBit)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pxLink-&gt;pxNextFreeBlock<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>to<sp/>the<sp/>heap<sp/>-<sp/>it<sp/>is<sp/>no<sp/>longer</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxLink-&gt;xBlockSize<sp/>&amp;=<sp/>~xBlockAllocatedBit;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableSuspendResume)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskSuspendAll();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>this<sp/>block<sp/>to<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xFreeBytesRemaining<sp/>+=<sp/>pxLink-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceFREE(pv,<sp/>pxLink-&gt;xBlockSize);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prvInsertBlockIntoFreeList(((<ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*)pxLink));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableSuspendResume)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)xTaskResumeAll();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vPortFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pv)<sp/>{<sp/>prvPortFree(pv,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTasklessPortFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pv)<sp/>{<sp/>prvPortFree(pv,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xPortGetFreeHeapSize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xFreeBytesRemaining;<sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xPortGetMinimumEverFreeHeapSize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xMinimumEverFreeBytesRemaining;<sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vPortInitialiseBlocks(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>This<sp/>just<sp/>exists<sp/>to<sp/>keep<sp/>the<sp/>linker<sp/>quiet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvHeapInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxFirstFreeBlock;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*pucAlignedHeap;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>uxAddress;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTotalHeapSize<sp/>=<sp/>ucHeapSize;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>heap<sp/>starts<sp/>on<sp/>a<sp/>correctly<sp/>aligned<sp/>boundary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>=<sp/>(size_t)ucHeap;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uxAddress<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxAddress<sp/>+=<sp/>(portBYTE_ALIGNMENT<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxAddress<sp/>&amp;=<sp/>~((size_t)portBYTE_ALIGNMENT_MASK);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTotalHeapSize<sp/>-=<sp/>uxAddress<sp/>-<sp/>(size_t)ucHeap;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>pucAlignedHeap<sp/>=<sp/>(uint8_t<sp/>*)uxAddress;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xStart<sp/>is<sp/>used<sp/>to<sp/>hold<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>item<sp/>in<sp/>the<sp/>list<sp/>of<sp/>free</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/>blocks.<sp/><sp/>The<sp/>void<sp/>cast<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>compiler<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>xStart.pxNextFreeBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pucAlignedHeap;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>xStart.xBlockSize<sp/>=<sp/>(size_t)0;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pxEnd<sp/>is<sp/>used<sp/>to<sp/>mark<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks<sp/>and<sp/>is<sp/>inserted</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>heap<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>=<sp/>((size_t)pucAlignedHeap)<sp/>+<sp/>xTotalHeapSize;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>-=<sp/>xHeapStructSize;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>&amp;=<sp/>~((size_t)portBYTE_ALIGNMENT_MASK);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEnd<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)uxAddress;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEnd-&gt;xBlockSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEnd-&gt;pxNextFreeBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>start<sp/>with<sp/>there<sp/>is<sp/>a<sp/>single<sp/>free<sp/>block<sp/>that<sp/>is<sp/>sized<sp/>to<sp/>take<sp/>up<sp/>the</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/>entire<sp/>heap<sp/>space,<sp/>minus<sp/>the<sp/>space<sp/>taken<sp/>by<sp/>pxEnd.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>pxFirstFreeBlock<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pucAlignedHeap;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>pxFirstFreeBlock-&gt;xBlockSize<sp/>=<sp/>uxAddress<sp/>-<sp/>(size_t)pxFirstFreeBlock;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>pxFirstFreeBlock-&gt;pxNextFreeBlock<sp/>=<sp/>pxEnd;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>one<sp/>block<sp/>exists<sp/>-<sp/>and<sp/>it<sp/>covers<sp/>the<sp/>entire<sp/>usable<sp/>heap<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>xMinimumEverFreeBytesRemaining<sp/>=<sp/>pxFirstFreeBlock-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>xFreeBytesRemaining<sp/>=<sp/>pxFirstFreeBlock-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>out<sp/>the<sp/>position<sp/>of<sp/>the<sp/>top<sp/>bit<sp/>in<sp/>a<sp/>size_t<sp/>variable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>xBlockAllocatedBit<sp/>=<sp/>((size_t)1)<sp/>&lt;&lt;<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t)<sp/>*<sp/>heapBITS_PER_BYTE)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInsertBlockIntoFreeList(<ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlockToInsert)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxIterator;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*puc;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>through<sp/>the<sp/>list<sp/>until<sp/>a<sp/>block<sp/>is<sp/>found<sp/>that<sp/>has<sp/>a<sp/>higher<sp/>address</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/>than<sp/>the<sp/>block<sp/>being<sp/>inserted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pxIterator<sp/>=<sp/>&amp;xStart;<sp/>pxIterator-&gt;pxNextFreeBlock<sp/>&lt;<sp/>pxBlockToInsert;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxIterator<sp/>=<sp/>pxIterator-&gt;pxNextFreeBlock)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>do<sp/>here,<sp/>just<sp/>iterate<sp/>to<sp/>the<sp/>right<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>block<sp/>being<sp/>inserted,<sp/>and<sp/>the<sp/>block<sp/>it<sp/>is<sp/>being<sp/>inserted<sp/>after</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/>make<sp/>a<sp/>contiguous<sp/>block<sp/>of<sp/>memory?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>puc<sp/>=<sp/>(uint8_t<sp/>*)pxIterator;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((puc<sp/>+<sp/>pxIterator-&gt;xBlockSize)<sp/>==<sp/>(uint8_t<sp/>*)pxBlockToInsert)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxIterator-&gt;xBlockSize<sp/>+=<sp/>pxBlockToInsert-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert<sp/>=<sp/>pxIterator;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>block<sp/>being<sp/>inserted,<sp/>and<sp/>the<sp/>block<sp/>it<sp/>is<sp/>being<sp/>inserted<sp/>before</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/>make<sp/>a<sp/>contiguous<sp/>block<sp/>of<sp/>memory?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>puc<sp/>=<sp/>(uint8_t<sp/>*)pxBlockToInsert;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((puc<sp/>+<sp/>pxBlockToInsert-&gt;xBlockSize)<sp/>==<sp/>(uint8_t<sp/>*)pxIterator-&gt;pxNextFreeBlock)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pxIterator-&gt;pxNextFreeBlock<sp/>!=<sp/>pxEnd)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Form<sp/>one<sp/>big<sp/>block<sp/>from<sp/>the<sp/>two<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;xBlockSize<sp/>+=<sp/>pxIterator-&gt;pxNextFreeBlock-&gt;xBlockSize;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;pxNextFreeBlock<sp/>=<sp/>pxIterator-&gt;pxNextFreeBlock-&gt;pxNextFreeBlock;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;pxNextFreeBlock<sp/>=<sp/>pxEnd;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;pxNextFreeBlock<sp/>=<sp/>pxIterator-&gt;pxNextFreeBlock;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>block<sp/>being<sp/>inserted<sp/>plugged<sp/>a<sp/>gab,<sp/>so<sp/>was<sp/>merged<sp/>with<sp/>the<sp/>block</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/>before<sp/>and<sp/>the<sp/>block<sp/>after,<sp/>then<sp/>it&apos;s<sp/>pxNextFreeBlock<sp/>pointer<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/>already<sp/>been<sp/>set,<sp/>and<sp/>should<sp/>not<sp/>be<sp/>set<sp/>here<sp/>as<sp/>that<sp/>would<sp/>make<sp/>it<sp/>point</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pxIterator<sp/>!=<sp/>pxBlockToInsert)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxIterator-&gt;pxNextFreeBlock<sp/>=<sp/>pxBlockToInsert;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtCOVERAGE_TEST_MARKER();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-core/src/heap_4.c"/>
  </compounddef>
</doxygen>
