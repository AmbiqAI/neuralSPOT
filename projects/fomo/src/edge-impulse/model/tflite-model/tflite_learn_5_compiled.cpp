/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.09.2024 20:39:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 66, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -20, -14, 
  /* [3][2][][] */ -100, -126, -43, 
  /* [4][0][][] */ 18, -59, -5, 
  /* [4][1][][] */ 20, -127, -2, 
  /* [4][2][][] */ 14, -84, -18, 
  /* [5][0][][] */ -64, 27, -2, 
  /* [5][1][][] */ -127, 34, 4, 
  /* [5][2][][] */ -78, 29, 2, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -50, 56, -16, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 37, 24, -17, 
  /* [7][1][][] */ 127, 71, -3, 
  /* [7][2][][] */ 36, 7, -17, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -22, 45, -10, 
  /* [9][1][][] */ -14, 127, -11, 
  /* [9][2][][] */ -5, 87, -7, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 39, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 67, 9, -19, 
  /* [13][1][][] */ 114, 104, -8, 
  /* [13][2][][] */ 80, 127, 53, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -101, -33, 18, 
  /* [15][1][][] */ -127, -117, 22, 
  /* [15][2][][] */ -34, -85, -10, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.056799449026584625, 0.30061745643615723, 0.07616298645734787, 0.045074108988046646, 0.0052436627447605133, 0.0081007806584239006, 0.04114740714430809, 0.006238084752112627, 0.036020912230014801, 0.00793476402759552, 0.13640053570270538, 0.26318585872650146, 0.084999755024909973, 0.0036393885966390371, 0.23590768873691559, 0.0077159064821898937, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 1736, 407, 770, -638, 75148, 51387, 2628, 4474, 6377, 7996, 1211, -11, 4915, -1753, 132, 47603, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00022274295042734593, 0.0011788920965045691, 0.00029867840930819511, 0.00017676122661214322, 2.056338416878134e-05, 3.1767769542057067e-05, 0.00016136238991748542, 2.4463079171255231e-05, 0.00014125848247203976, 3.1116724130697548e-05, 0.00053490407299250364, 0.0010321014560759068, 0.00033333239844068885, 1.4272112821345218e-05, 0.00092512823175638914, 3.0258459446486086e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 5,-6,13,4,-18,11,13,16,-2,-12,1,-2,-9,-8,5,0, 8,-9,8,2,14,-2,13,-26,-7,9,-5,85,-13,20,-2,2, 4,0,2,2,1,-14,-4,11,6,1,-2,-6,1,-5,-1,2, 
  /* [0][1][][] */ 9,-10,0,2,127,-25,-127,-21,127,127,3,-5,113,-27,1,-18, -127,127,127,-2,-86,-92,-14,-101,18,-106,127,127,127,127,127,127, 15,-11,-7,0,-11,127,5,-10,2,-13,-2,-6,10,-6,-11,-6, 
  /* [0][2][][] */ -1,-3,-1,-20,-17,15,59,7,-10,-8,-3,1,-3,-1,-6,-12, 23,-26,-5,-127,7,-16,-4,127,-3,1,-2,-14,-11,-61,-11,-36, 1,-1,-3,-8,0,-5,2,-2,4,2,-2,-3,1,-7,-11,-10, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0042098518460988998, 0.0092616574838757515, 0.0074990564025938511, 0.0071081104688346386, 0.050588924437761307, 0.038474150002002716, 0.0068666422739624977, 0.043506775051355362, 0.014442418701946735, 0.05136672779917717, 0.0094142062589526176, 0.0089184409007430077, 0.0044512762688100338, 0.015728848055005074, 0.0091093927621841431, 0.021109253168106079, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 23349, -569, -158, 3207, -884, 422, 9406, 1102, -1352, 301, -2346, 3082, 625, -420, -337, -1298, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 9.905533806886524e-05, 0.00021792136249132454, 0.00017644838953856379, 0.00016724965826142579, 0.0011903276899829507, 0.00090527412248775363, 0.00016156805213540792, 0.0010236888192594051, 0.00033982162130996585, 0.0012086288770660758, 0.00022151073790155351, 0.00020984567527193576, 0.00010473591100890189, 0.00037009053630754352, 0.00021433865185827017, 0.00049668829888105392, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -15,-10,-14,-64,-24,-37,20,-16,32,4,-25,-1,106,127,-13,-101, 
  /* [1][0][][] */ 127,-60,-46,21,-51,71,-73,-42,-43,85,-33,-53,-10,7,-59,-12, 
  /* [2][0][][] */ -34,-98,37,44,48,-55,-85,-21,31,-90,28,-127,46,-20,-78,26, 
  /* [3][0][][] */ 37,8,10,11,-15,71,-52,-22,127,45,8,20,0,-16,6,22, 
  /* [4][0][][] */ -90,-34,-27,-127,-2,40,48,-126,34,-19,-47,-34,-117,36,-38,-19, 
  /* [5][0][][] */ 85,53,72,-27,47,-46,-122,-127,-18,-71,63,53,-57,44,65,-44, 
  /* [6][0][][] */ 98,40,-127,-71,24,-71,2,-78,-42,17,-121,90,87,-88,7,71, 
  /* [7][0][][] */ -127,-4,102,-30,-66,3,1,-62,-51,62,83,-31,62,-27,29,29, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0072522838599979877, 0.0091362893581390381, 0.0075381174683570862, 0.010656511411070824, 0.008987104520201683, 0.0071658706292510033, 0.0078646149486303329, 0.011038357391953468, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7184, -2937, 11761, -9152, 22414, 7808, -8341, 11511, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00017064197163563222, 0.00021497151465155184, 0.00017736747395247221, 0.00025074146105907857, 0.00021146128710824996, 0.00016860871983226389, 0.00018504976469557732, 0.00025972607545554638, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -40,27,-8,-10,-75,-28,-127,37, 
  /* [1][0][][] */ 80,-69,-52,-48,127,-92,81,31, 
  /* [2][0][][] */ -103,124,-51,-127,64,-13,-22,47, 
  /* [3][0][][] */ 42,25,81,17,85,127,120,-1, 
  /* [4][0][][] */ -78,-125,78,5,-45,-127,-2,-47, 
  /* [5][0][][] */ 127,-31,83,67,-76,-5,4,-27, 
  /* [6][0][][] */ 26,39,127,-30,42,-39,-43,25, 
  /* [7][0][][] */ 26,8,-127,-34,-37,91,88,-69, 
  /* [8][0][][] */ 6,127,-38,28,64,110,63,58, 
  /* [9][0][][] */ -2,127,-64,96,3,-106,43,113, 
  /* [10][0][][] */ 1,-127,-7,-23,-85,-118,-57,-73, 
  /* [11][0][][] */ -127,-72,108,50,0,-74,102,57, 
  /* [12][0][][] */ -26,51,-127,81,45,-55,-60,88, 
  /* [13][0][][] */ 103,-127,100,92,19,41,38,-60, 
  /* [14][0][][] */ -35,115,-59,-124,-29,-127,-30,-66, 
  /* [15][0][][] */ 35,106,37,-24,34,-66,104,-127, 
  /* [16][0][][] */ -113,-127,-58,87,-55,25,-6,69, 
  /* [17][0][][] */ -35,-113,-127,88,-55,88,-48,90, 
  /* [18][0][][] */ -103,-72,-48,94,-14,86,5,127, 
  /* [19][0][][] */ 62,-127,103,-112,8,-55,35,-33, 
  /* [20][0][][] */ -10,80,40,6,51,127,74,1, 
  /* [21][0][][] */ 30,113,46,-33,38,-61,92,-127, 
  /* [22][0][][] */ 24,17,109,15,-8,127,38,-39, 
  /* [23][0][][] */ -102,-70,45,-67,87,101,-60,-127, 
  /* [24][0][][] */ -99,-90,36,-94,117,114,-47,-127, 
  /* [25][0][][] */ 127,7,-64,-19,18,34,-63,-5, 
  /* [26][0][][] */ -127,-32,-127,-26,-49,-40,27,-15, 
  /* [27][0][][] */ 78,31,0,-66,-127,-21,88,90, 
  /* [28][0][][] */ -127,-82,-2,43,-63,-117,3,0, 
  /* [29][0][][] */ 127,95,50,-112,7,16,-62,-96, 
  /* [30][0][][] */ -88,-66,39,-71,66,78,-46,-127, 
  /* [31][0][][] */ 45,44,-11,127,4,-68,3,17, 
  /* [32][0][][] */ -13,127,7,36,33,75,-3,42, 
  /* [33][0][][] */ -43,127,-87,36,17,-34,-34,6, 
  /* [34][0][][] */ -127,-112,-44,100,-21,25,22,100, 
  /* [35][0][][] */ -53,127,-32,-1,66,106,63,73, 
  /* [36][0][][] */ 68,21,2,-52,-127,-39,85,98, 
  /* [37][0][][] */ -69,118,27,26,-127,111,-27,-95, 
  /* [38][0][][] */ 31,26,25,20,118,79,127,53, 
  /* [39][0][][] */ -20,-75,43,-22,16,52,-91,127, 
  /* [40][0][][] */ -79,-51,-71,127,-28,9,7,80, 
  /* [41][0][][] */ 127,20,57,111,-45,-13,1,-22, 
  /* [42][0][][] */ -41,7,-66,-127,57,-102,-2,87, 
  /* [43][0][][] */ 20,-9,76,-5,31,127,91,6, 
  /* [44][0][][] */ -27,-30,-66,127,49,11,-47,-45, 
  /* [45][0][][] */ 70,118,116,-115,51,-65,26,-127, 
  /* [46][0][][] */ -34,-127,-42,38,-6,41,-65,125, 
  /* [47][0][][] */ 43,46,115,24,99,127,122,-14, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0046371547505259514, 0.0041458373889327049, 0.00276404176838696, 0.0034635437186807394, 0.00065713154617697001, 0.0028551912400871515, 0.0054663675837218761, 0.0024670425336807966, 0.003087987657636404, 0.0061968406662344933, 0.0033956265542656183, 0.0030709535349160433, 0.0024317821953445673, 0.0035668802447617054, 0.0027069894131273031, 0.0030468855984508991, 0.0022712452337145805, 0.00078023812966421247, 0.0023347116075456142, 0.0036802450194954872, 0.0040446314960718155, 0.0020061691757291555, 0.004834300372749567, 0.0035502698738127947, 0.0051614963449537754, 0.0075315609574317932, 0.0033648377284407616, 0.010941788554191589, 0.0022295170929282904, 0.00062662921845912933, 0.0039435946382582188, 0.008035929873585701, 0.0041918833740055561, 0.0036163879558444023, 0.0028222750406712294, 0.0036565563641488552, 0.0054790801368653774, 0.0064033372327685356, 0.0038472006563097239, 0.0045683449134230614, 0.0032662251032888889, 0.0031539553310722113, 0.0033388666342943907, 0.004944878164678812, 0.0047025592066347599, 0.002174947876483202, 0.0026969332247972488, 0.0032543151173740625, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 893, -519, -495, 1021, 14357, 2182, -292, 3235, 1322, 1016, 48, 2663, 1041, 415, -804, 456, 3109, 11159, 2869, -644, 989, -1028, -29, 2094, -284, -637, 1376, -39, 3660, 14577, 1756, -88, 445, -226, 2331, -5, 357, -242, 1086, 1262, 1411, 1948, 259, -250, 496, 2175, 1113, -244, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00050266954349353909, 0.0004494105523917824, 0.00029962329426780343, 0.00037544962833635509, 7.1233342168852687e-05, 0.00030950395739637315, 0.00059255660744383931, 0.00026742846239358187, 0.00033473919029347599, 0.00067174015566706657, 0.00036808737786486745, 0.00033289266866631806, 0.00026360622723586857, 0.00038665134343318641, 0.00029343881760723889, 0.00033028368488885462, 0.00024620394106023014, 8.4578146925196052e-05, 0.0002530837373342365, 0.00039894014480523765, 0.00043843977618962526, 0.0002174695982830599, 0.00052404019515961409, 0.00038485077675431967, 0.0005595083930529654, 0.00081642443547025323, 0.0003647498378995806, 0.0011860945960506797, 0.00024168060917872936, 6.7926877818536013e-05, 0.00042748733540065587, 0.00087109825108200312, 0.0004544019466266036, 0.00039201800245791674, 0.0003059358277823776, 0.00039637228474020958, 0.00059393461560830474, 0.0006941244937479496, 0.00041703818715177476, 0.00049521052278578281, 0.00035406020469963551, 0.00034189011785201728, 0.00036193456617183983, 0.00053602689877152443, 0.00050975941121578217, 0.00023576528474222869, 0.00029234870453365147, 0.0003527691587805748, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -45,-88,-18,-2,127,-57,65,-56,-87,-79,-22,-66,111,44,54,-127,63,-13,2,-57,-99,113,-14,8,-20,83,57,-36,69,-77,10,-47,-94,-81,44,70,16,70,123,-55,-117,-18,32,82,43,-121,89,97, -62,-109,-86,68,-91,104,64,-58,-73,42,65,-127,127,98,76,-81,-80,-81,37,-60,-108,71,-56,112,-103,94,88,-118,95,-55,3,-127,-50,-86,79,127,105,99,127,-42,-127,-60,62,93,76,126,90,74, -25,-42,-65,92,-51,-33,31,-6,108,27,49,-93,32,47,-50,-9,-80,-16,30,-18,-42,31,-67,-1,-86,46,25,-84,28,57,102,-62,-10,0,-5,45,54,58,57,11,-21,95,71,33,37,37,16,-127, 
  /* [0][1][][] */ -127,-97,-19,-64,-95,-75,87,-105,-127,-127,89,-90,90,56,-112,-70,127,-127,-66,-83,-98,127,-43,4,-12,111,92,-57,-114,-89,-2,-67,-90,-127,-127,76,35,86,11,-101,85,-19,86,127,78,127,127,-119, -116,-127,-127,-99,-27,127,127,-127,99,71,127,-118,105,127,39,-110,63,-110,-127,-127,-127,95,-127,127,-125,127,127,-127,-127,127,-27,-121,-127,-105,52,123,127,127,-7,-127,111,-95,127,127,127,7,118,115, -53,-59,-113,127,79,-47,49,-16,80,31,19,-68,17,60,53,-51,-11,4,-17,-63,-54,32,-75,-17,-127,66,22,-90,-62,38,127,-85,-67,0,66,79,61,71,-16,-30,54,127,82,24,45,-47,20,31, 
  /* [0][2][][] */ -127,-21,20,32,-51,-26,28,-39,53,-42,15,-45,-1,26,-47,6,-77,-24,95,-48,-30,58,-66,-22,-7,66,58,-24,37,54,-10,-25,12,-90,-36,47,13,11,-47,-47,30,-9,39,52,32,67,20,-61, -96,-43,-42,-65,93,49,69,-51,116,33,-43,-55,6,33,-127,-62,58,0,59,-80,-73,44,-63,61,-81,74,60,-50,39,2,-32,-47,-64,-28,-56,56,30,19,-85,-79,42,-45,76,92,51,-108,28,7, -56,-32,-53,-27,-25,-12,19,-10,-62,24,-16,-19,-2,10,14,-9,49,31,1,-54,-63,17,-11,-30,-72,22,14,-43,4,-71,50,-26,-104,13,31,49,2,24,-39,-45,15,52,23,30,17,-3,15,49, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0026729940436780453, 0.0042141503654420376, 0.0066982596181333065, 0.0071394951082766056, 0.034746218472719193, 0.0073533523827791214, 0.0068886773660778999, 0.0043517579324543476, 0.0049992678686976433, 0.0033561554737389088, 0.0026173044461756945, 0.0019047569949179888, 0.003561720484867692, 0.0024221839848905802, 0.011847736313939095, 0.0080758733674883842, 0.0050589884631335735, 0.01410880871117115, 0.0055275955237448215, 0.0054788342677056789, 0.0041417460888624191, 0.017552221193909645, 0.0048667946830391884, 0.010770116932690144, 0.005255579948425293, 0.0031525474041700363, 0.0025525842793285847, 0.0038973803166300058, 0.0080572608858346939, 0.041605036705732346, 0.011210179887712002, 0.003054117551073432, 0.0042490004561841488, 0.0054510016925632954, 0.0080466233193874359, 0.0023091437760740519, 0.0040974747389554977, 0.0020574838854372501, 0.0059279566630721092, 0.002803026931360364, 0.0049649081192910671, 0.0061826282180845737, 0.0028633847832679749, 0.0028902415651828051, 0.0030313034076243639, 0.014016463421285152, 0.0028013961855322123, 0.008719821460545063, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 11378, 3773, 3906, -1833, 1858, -927, -972, 28704, -2264, 559, 9821, 66440, 1691, 7428, 981, 10425, -3228, 13998, 515, 7243, 14502, -59, 2791, -8978, 10525, 1861, 2326, 13143, 1217, 598, -7918, 10611, 5416, 90, -1554, 7300, -8094, 11793, -3043, 19018, -3679, -1340, 5746, 3089, 2658, -2730, 1892, -747, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.2893981521483511e-05, 9.9156481155660003e-05, 0.00015760611859150231, 0.00016798812430351973, 0.00081755808787420392, 0.00017302006017416716, 0.00016208652232307941, 0.00010239430412184447, 0.00011762983194785193, 7.8968369052745402e-05, 6.1583632486872375e-05, 4.4817810703534633e-05, 8.380519284401089e-05, 5.6992565077962354e-05, 0.0002787702833302319, 0.00019002055341843516, 0.00011903502308996394, 0.00033197196898981929, 0.00013006107474211603, 0.00012891374353785068, 9.7452852060087025e-05, 0.00041299345321021974, 0.00011451281898189336, 0.00025341453147120774, 0.00012366070586722344, 7.4177587521262467e-05, 6.0060807300033048e-05, 9.1703070211224258e-05, 0.00018958261352963746, 0.00097894202917814255, 0.00026376894675195217, 7.1861592005006969e-05, 9.9976481578778476e-05, 0.00012825886369682848, 0.00018933232058770955, 5.4332795116351917e-05, 9.6411175036337227e-05, 4.8411387979285792e-05, 0.00013948132982477546, 6.5953572629950941e-05, 0.00011682137119350955, 0.00014547360478900373, 6.7373759520705789e-05, 6.8005683715455234e-05, 7.1324786404147744e-05, 0.00032979913521558046, 6.5915206505451351e-05, 0.00020517226948868483, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -46,0,32,9,-36,-13,8,11,-41,-7,-55,-54,-26,-60,-14,-31,39,-36,33,39,-8,31,-34,13,1,-41,51,-10,-6,-20,17,13,81,29,36,-127,16,-3,-22,-27,-2,-15,40,40,32,3,22,0, 
  /* [1][0][][] */ 1,34,61,-24,-12,47,-53,-28,9,30,-16,-91,14,97,-9,65,-22,8,-34,-59,13,-94,-22,21,-85,-17,-2,-125,-27,-19,42,-69,52,91,-55,5,122,-39,0,47,-32,39,-81,-35,127,-18,-41,-27, 
  /* [2][0][][] */ 2,-24,-58,12,-3,42,31,5,-8,41,-3,22,59,-86,19,-50,39,-92,29,36,-32,46,-4,25,-18,57,-23,-64,20,7,20,-63,-47,-80,30,-27,102,24,-7,-69,2,24,75,31,127,15,23,25, 
  /* [3][0][][] */ -14,17,-70,45,15,-33,-69,-108,18,-16,-35,2,2,27,33,79,-7,6,-41,21,9,-104,27,-55,-80,-15,127,-15,-46,0,-62,11,-2,-79,9,-11,-19,-40,-19,99,-43,-34,1,18,39,12,-42,45, 
  /* [4][0][][] */ -19,-48,-6,6,30,-29,-11,-9,28,-30,54,-78,7,30,10,13,-16,-23,12,-9,-9,-50,5,-21,17,-8,40,52,37,22,-15,33,-12,0,1,0,-66,85,39,-28,27,-22,-20,-20,-73,9,127,11, 
  /* [5][0][][] */ 47,-22,6,19,31,-41,37,-127,26,-38,-3,122,-81,67,25,-67,5,-88,17,1,-37,74,-36,-51,-57,81,-23,5,-21,42,-46,-30,30,51,36,-6,-42,-3,-45,-41,21,-39,-50,-10,-34,55,98,22, 
  /* [6][0][][] */ 50,-20,24,-10,-37,-18,-32,17,-38,4,-39,127,-43,-35,-5,55,14,46,18,33,36,-78,-22,16,21,39,-65,6,11,-38,13,38,7,13,-12,-2,10,7,-2,-3,-2,-17,38,59,-3,-34,76,-14, 
  /* [7][0][][] */ -22,0,-6,64,28,34,15,24,23,6,68,-3,117,106,54,53,42,42,-6,8,14,-18,-89,-22,15,-2,-28,60,31,-26,-33,-17,29,4,48,-90,-66,42,43,47,-29,34,81,127,-52,-21,-104,60, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0094895306974649429, 0.0045993071980774403, 0.0061979289166629314, 0.00606955261901021, 0.0072941072285175323, 0.0058591477572917938, 0.009409511461853981, 0.0055616670288145542, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 8081, 17608, -4495, 7347, -1726, 2071, -11795, -18788, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00022328307386487722, 0.00010821899195434526, 0.00014583361917175353, 0.00014281300536822528, 0.00017162605945486575, 0.00013786229828838259, 0.00022140027431305498, 0.00013086275430396199, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 62,127,-90,-83,16,72,12,65, 
  /* [1][0][][] */ 63,-68,38,-127,-53,61,-83,-40, 
  /* [2][0][][] */ -30,127,110,44,107,10,49,13, 
  /* [3][0][][] */ 100,35,-99,48,-20,-87,-127,-38, 
  /* [4][0][][] */ -31,34,20,-64,-38,110,127,49, 
  /* [5][0][][] */ 12,79,-127,-71,39,76,26,-16, 
  /* [6][0][][] */ -9,127,68,57,63,-4,11,-76, 
  /* [7][0][][] */ 127,-26,-49,23,38,5,117,-5, 
  /* [8][0][][] */ 55,121,79,94,127,72,108,-104, 
  /* [9][0][][] */ 62,99,-127,-85,13,97,5,68, 
  /* [10][0][][] */ -70,-51,28,-49,-14,-26,-41,127, 
  /* [11][0][][] */ 18,-110,-127,-25,19,-5,34,-20, 
  /* [12][0][][] */ -28,-96,-120,-25,-127,25,-82,46, 
  /* [13][0][][] */ -17,16,-95,105,-127,-27,-12,-10, 
  /* [14][0][][] */ -60,-36,-127,2,26,-4,-18,-43, 
  /* [15][0][][] */ 22,-109,-127,10,-102,-21,-30,-12, 
  /* [16][0][][] */ 127,-64,-13,57,-76,24,29,99, 
  /* [17][0][][] */ -24,111,127,-35,-40,-18,-32,-24, 
  /* [18][0][][] */ -1,-127,49,79,-13,-82,44,-99, 
  /* [19][0][][] */ 127,-44,-61,38,-97,2,31,88, 
  /* [20][0][][] */ -26,-127,73,66,-15,-92,-1,-76, 
  /* [21][0][][] */ 5,-55,-21,-28,127,-10,37,16, 
  /* [22][0][][] */ -127,10,-74,49,61,43,-88,-116, 
  /* [23][0][][] */ -103,-34,87,17,-121,127,109,-35, 
  /* [24][0][][] */ -26,60,5,-46,-58,127,101,-1, 
  /* [25][0][][] */ -59,-110,-127,-60,-47,-24,-22,-36, 
  /* [26][0][][] */ -9,61,-41,127,-126,35,-95,2, 
  /* [27][0][][] */ 25,-127,26,69,22,-52,3,-123, 
  /* [28][0][][] */ 17,127,80,50,127,-30,35,-71, 
  /* [29][0][][] */ 118,32,-37,-15,67,-127,-103,32, 
  /* [30][0][][] */ 21,-14,27,-127,29,-21,20,-25, 
  /* [31][0][][] */ 46,-38,9,64,-17,27,11,127, 
  /* [32][0][][] */ -61,-74,-13,-75,-48,127,45,62, 
  /* [33][0][][] */ -34,45,47,-29,44,127,-111,76, 
  /* [34][0][][] */ 43,127,-76,-50,26,53,-61,74, 
  /* [35][0][][] */ 25,-127,33,47,-29,-77,41,-94, 
  /* [36][0][][] */ -15,-36,-80,-15,-127,-44,-17,2, 
  /* [37][0][][] */ -53,-127,63,74,-45,-89,-12,-53, 
  /* [38][0][][] */ -83,37,83,-67,-127,-90,-59,95, 
  /* [39][0][][] */ 76,-127,57,37,-15,-77,-10,-84, 
  /* [40][0][][] */ 6,56,11,52,-127,-17,-62,17, 
  /* [41][0][][] */ 116,123,-91,-127,53,4,-17,10, 
  /* [42][0][][] */ -15,-39,-14,16,127,12,47,23, 
  /* [43][0][][] */ 127,26,85,17,-76,-41,58,120, 
  /* [44][0][][] */ 81,43,-26,24,71,-125,-127,14, 
  /* [45][0][][] */ 53,10,14,11,80,-127,-8,-53, 
  /* [46][0][][] */ 67,-48,-16,127,58,66,26,77, 
  /* [47][0][][] */ -74,-62,60,67,-42,31,127,-65, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0036635524593293667, 0.002224283292889595, 0.00098545802757143974, 0.00239558145403862, 0.0031739259138703346, 0.004065284039825201, 0.0021539365407079458, 0.00095950445393100381, 0.0020755091682076454, 0.0039868103340268135, 0.0029743816703557968, 0.0028919684700667858, 0.00070151296677067876, 0.00359953916631639, 0.0038523201365023851, 0.00060583284357562661, 0.0046166717074811459, 0.0033717418555170298, 0.0043433085083961487, 0.0032073464244604111, 0.0031481850892305374, 0.0029687134083360434, 0.0061833797954022884, 0.00057550350902602077, 0.0023814172018319368, 0.0021259922068566084, 0.00078976457007229328, 0.0037191601004451513, 0.0016988456482067704, 0.001933539635501802, 0.0064172185957431793, 0.0058923829346895218, 0.003285170067101717, 0.003030482679605484, 0.0041301590390503407, 0.0041344347409904003, 0.002822845708578825, 0.0046974243596196175, 0.0027790344320237637, 0.003684137249365449, 0.0022745777387171984, 0.002993803471326828, 0.0027806260623037815, 0.0028514729347079992, 0.0019459764007478952, 0.0031826402992010117, 0.0046878834255039692, 0.0022147004492580891, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2068, 4912, 12898, 1458, 2125, -1365, 5024, 13160, 3453, -452, 4030, -2379, 19003, -1465, 1682, 24746, -481, 1356, 129, 2370, 3229, 3379, 414, 25970, 4668, 3867, 17563, 1581, 6124, 5562, 595, 990, 779, 1991, -328, 272, -2559, -411, 3048, 1785, 4733, 2339, 3750, 3689, 5490, 3040, 1785, 4924, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00027062895242124796, 0.00016430922551080585, 7.279641431523487e-05, 0.00017696311988402158, 0.0002344599342904985, 0.00030030510970391333, 0.0001591126638231799, 7.0879206759855151e-05, 0.00015331918257288635, 0.00029450820875354111, 0.00021971946989651769, 0.00021363154519349337, 5.1821210945490748e-05, 0.00026590024936012924, 0.00028457335429266095, 4.4753258407581598e-05, 0.00034103647340089083, 0.00024907270562835038, 0.00032084295526146889, 0.00023692872491665184, 0.0002325584355276078, 0.00021930075308773667, 0.0004567702126223594, 4.2512809159234166e-05, 0.00017591680807527155, 0.00015704840188845992, 5.8340410760138184e-05, 0.00027473672525957227, 0.00012549481471069157, 0.00014283180644270033, 0.00047404403449036181, 0.00043527406523935497, 0.00024267760454677045, 0.00022386368073057383, 0.00030509746284224093, 0.00030541332671418786, 0.00020852540910709649, 0.00034700174001045525, 0.00020528904860839248, 0.00027214956935495138, 0.00016802450409159064, 0.00022115417232271284, 0.00020540661353152245, 0.00021064012253191322, 0.00014375051250681281, 0.00023510366736445576, 0.00034629693254828453, 0.00016360133304260671, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 18,-48,10,11,-21,-104,-50,43,-37,7,-18,9,39,-5,-7,5,105,-4,18,12,-8,-22,-74,29,-11,-14,-14,-25,-44,72,2,-107,80,-14,-43,-56,-7,-36,-6,-19,-11,56,11,-6,-16,56,127,-11, -127,-106,-19,127,-70,59,-100,127,20,5,-5,0,47,19,1,-41,-44,57,22,13,4,127,10,127,127,-33,-65,31,64,-124,8,-103,103,-9,-27,-127,25,13,-62,-44,-122,-8,-84,-108,34,45,43,120, -8,-11,13,9,-18,23,27,65,-1,-44,-10,8,-21,8,9,4,-66,19,-72,-22,-6,-34,127,27,-43,-1,-2,-2,14,40,26,-4,-7,-9,-16,69,11,14,8,56,31,-19,30,-34,-6,48,-27,-10, 
  /* [0][1][][] */ -10,-19,-27,5,33,-110,113,-93,-9,23,16,37,127,19,6,-30,-34,-39,24,57,58,-68,31,20,-56,127,-82,-13,127,-99,47,-127,-33,7,-68,16,14,-58,-56,3,127,127,5,-127,-71,-59,-4,95, 105,-127,127,6,127,65,-78,-75,40,127,127,-127,-102,127,127,127,127,127,127,127,127,116,-4,9,118,-100,-127,127,41,127,127,-7,-127,127,127,126,-127,127,-127,-108,46,41,-127,-32,127,-127,-22,88, 31,25,-40,-6,-46,127,-127,85,111,-73,9,71,-33,19,24,-65,8,6,-116,20,19,-117,-37,0,67,-14,-22,115,-64,-35,29,-53,-36,23,105,-28,43,3,-11,-97,118,9,29,30,-61,99,102,-73, 
  /* [0][2][][] */ -6,33,8,-33,6,-69,-25,-13,3,11,4,1,-25,-7,12,2,-67,-12,8,-28,-1,-18,83,-7,-93,5,41,-16,15,-4,2,40,-1,-5,-49,32,-2,-6,6,45,-15,-12,3,-6,-23,17,-26,12, 42,-12,-33,-37,39,28,103,-99,127,-23,4,9,-84,-17,-6,-65,-22,72,26,33,12,47,-23,-31,-55,54,84,-6,-79,14,-32,-26,-9,-1,-31,6,49,-20,-5,127,-108,-3,-17,44,35,52,-6,-127, -1,24,5,-29,-7,7,-23,-33,-30,-19,-9,9,18,-3,7,15,52,15,-18,-10,-8,-18,-52,-14,21,-30,22,-24,-12,2,-14,3,44,-10,-13,-50,-4,10,22,11,0,-3,-1,5,-20,18,58,-53, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.01367302518337965, 0.0056841084733605385, 0.032485995441675186, 0.01101663988083601, 0.0091603025794029236, 0.014539750292897224, 0.0083648832514882088, 0.013225418515503407, 0.004268172662705183, 0.014421828091144562, 0.010891514830291271, 0.092419996857643127, 0.02034594863653183, 0.029738578945398331, 0.012239045463502407, 0.031770803034305573, 0.0089085018262267113, 0.003296190407127142, 0.011773754842579365, 0.011918878182768822, 0.01221510861068964, 0.011834525503218174, 0.0037550765555351973, 0.01858045719563961, 0.0077549563720822334, 0.01814216747879982, 0.018763061612844467, 0.010477636940777302, 0.011368172243237495, 0.023099495097994804, 0.005743587389588356, 0.0040487558580935001, 0.0063250027596950531, 0.0087235020473599434, 0.007059282623231411, 0.020348165184259415, 0.13028852641582489, 0.014779349789023399, 0.0053860456682741642, 0.010129116475582123, 0.0083746043965220451, 0.0062874490395188332, 0.011850186623632908, 0.0081350989639759064, 0.017469169571995735, 0.0040555396117269993, 0.002589002950116992, 0.0071275001391768456, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -1249, 11673, -1084, -352, 137, -838, 5255, -420, -4032, 138, -4976, -169, 1211, -847, -4472, 3535, 6166, 3959, -403, -5492, -6590, -542, 17536, -6349, -3424, -112, 6998, -6212, -1898, 180, -9154, 10783, 3486, -432, 1865, 50, -18, -737, 12454, 276, 3443, -3290, 3447, 6807, -376, 8092, 1689, -907, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00032171825296245515, 0.00013374372792895883, 0.00076437636744230986, 0.00025921507040038705, 0.00021553653641603887, 0.00034211177262477577, 0.00019682077981997281, 0.0003111863334197551, 0.00010042759095085785, 0.0003393371298443526, 0.00025627095601521432, 0.0021745881531387568, 0.00047872820869088173, 0.00069973128847777843, 0.00028797754202969372, 0.00074754829984158278, 0.00020961181144230068, 7.7557422628160566e-05, 0.00027702952502295375, 0.00028044419013895094, 0.00028741432470269501, 0.00027845942531712353, 8.8354747276753187e-05, 0.00043718723463825881, 0.0001824695646064356, 0.00042687452514655888, 0.00044148380402475595, 0.00024653263972140849, 0.00026748640812002122, 0.00054351752623915672, 0.00013514322927221656, 9.5264847914222628e-05, 0.00014882360119372606, 0.00020525888248812407, 0.000166100770002231, 0.0004787803627550602, 0.0030656123999506235, 0.00034774941741488874, 0.00012673049059230834, 0.00023833215527702123, 0.00019704952137544751, 0.00014793997979722917, 0.00027882793801836669, 0.00019141410302836448, 0.00041103930561803281, 9.542446059640497e-05, 6.0917718656128272e-05, 0.00016770588990766555, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -44,-41,-29,-63,0,-8,80,65,-93,-83,-32,-2,-58,4,-58,34,-79,10,17,127,54,-31,21,79,52,70,10,5,-90,-61,-88,-59,-58,97,36,-48,21,-29,82,-4,34,-4,0,-109,30,-37,-26,-90, 
  /* [1][0][][] */ -22,61,-29,-32,-74,56,-27,-50,-41,84,-18,16,46,41,-54,-10,-12,-118,76,-57,127,10,-53,25,55,-7,-89,73,37,-18,67,32,-31,-11,-2,-19,-2,109,-19,-32,63,47,-11,7,90,17,-24,50, 
  /* [2][0][][] */ -25,-34,112,8,92,-47,-13,18,-31,11,-11,50,8,-54,-48,-127,-54,-98,-31,13,-102,37,-43,-39,-54,17,1,-41,-45,6,-36,-8,0,2,29,-10,24,-38,-49,2,38,-28,26,-45,-46,-50,-63,-56, 
  /* [3][0][][] */ 31,24,63,-4,11,-44,22,75,-53,-19,42,-21,-78,43,-20,41,64,37,-33,23,-102,-67,127,4,3,1,-71,-24,-45,58,103,-70,8,-100,-27,36,-16,-70,-15,63,-86,-63,64,-13,-98,-70,65,-13, 
  /* [4][0][][] */ 19,-12,78,-34,10,-12,-6,-2,-54,-6,-20,11,48,-76,40,-95,42,50,-5,-39,16,31,17,11,2,4,46,-17,32,25,-127,-19,-28,-18,6,14,52,-3,33,8,-39,-13,-68,22,-14,-97,6,25, 
  /* [5][0][][] */ 26,-54,64,20,25,26,32,5,-79,-12,-48,31,33,7,22,-47,93,73,-11,-9,80,-63,127,-91,-14,52,10,38,9,23,-31,-36,-18,-48,-40,10,46,18,72,1,-99,31,36,39,57,-19,71,1, 
  /* [6][0][][] */ -33,39,-127,80,36,27,41,27,-23,-10,49,-59,-85,-13,-24,25,-100,20,-13,96,9,42,-78,-84,-5,-11,26,65,-35,-41,-48,10,39,68,-46,-32,-7,-15,87,6,61,54,-110,-41,-38,107,-46,-30, 
  /* [7][0][][] */ 41,62,-86,21,20,59,123,79,49,77,-93,-1,-31,-14,-66,-39,29,42,115,99,84,11,127,27,104,115,-42,104,-78,40,-3,-68,27,-70,-20,31,3,96,-65,72,-58,58,-5,-78,89,-14,38,-27, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0031588717829436064, 0.0046796579845249653, 0.0064027332700788975, 0.0051728058606386185, 0.0052667316049337387, 0.0065501886419951916, 0.0032170373015105724, 0.0039900783449411392, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 3787, 627, 23795, -2520, 4607, -13609, 985, -16166, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 7.4326395406387746e-05, 0.00011010959860868752, 0.00015065254410728812, 0.00012171308480901644, 0.00012392310600262135, 0.00015412208449561149, 7.5694995757658035e-05, 9.3884198577143252e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 66,34,127,-26,69,99,-81,-48, 
  /* [1][0][][] */ 9,-81,-127,20,55,21,27,7, 
  /* [2][0][][] */ -127,-1,-53,-19,46,24,-75,-42, 
  /* [3][0][][] */ 53,74,106,-83,0,-127,3,-12, 
  /* [4][0][][] */ -127,21,-52,-26,57,10,-36,-45, 
  /* [5][0][][] */ -81,19,-48,-4,5,34,-68,-127, 
  /* [6][0][][] */ -32,-127,-124,49,111,6,3,43, 
  /* [7][0][][] */ -71,-127,-108,-82,-73,-85,21,102, 
  /* [8][0][][] */ 89,39,-5,-2,100,-82,-127,17, 
  /* [9][0][][] */ -32,63,-56,98,-70,-44,127,-29, 
  /* [10][0][][] */ -23,127,34,61,113,-16,-13,58, 
  /* [11][0][][] */ -73,-47,-32,-12,-85,105,127,-12, 
  /* [12][0][][] */ 67,32,-127,35,-13,-37,-63,-10, 
  /* [13][0][][] */ 66,-35,-71,10,23,-127,-21,-26, 
  /* [14][0][][] */ 8,-70,82,7,127,-122,-61,29, 
  /* [15][0][][] */ -34,-43,-4,127,66,84,-73,26, 
  /* [16][0][][] */ 109,37,-36,28,70,-116,-127,-25, 
  /* [17][0][][] */ 55,127,49,76,47,64,21,-80, 
  /* [18][0][][] */ 29,-6,-8,-8,127,-1,37,-10, 
  /* [19][0][][] */ 15,127,26,21,-126,17,27,-34, 
  /* [20][0][][] */ -42,25,56,-127,5,37,-25,106, 
  /* [21][0][][] */ -36,70,30,-127,31,38,-7,107, 
  /* [22][0][][] */ -63,-90,-101,9,-125,127,113,-39, 
  /* [23][0][][] */ 105,54,-127,28,20,-70,-82,-22, 
  /* [24][0][][] */ -49,46,11,-5,-21,74,-127,90, 
  /* [25][0][][] */ -101,-58,-127,9,-50,-79,71,100, 
  /* [26][0][][] */ 42,-8,-32,-20,117,-8,127,-35, 
  /* [27][0][][] */ 127,-67,21,90,-4,25,-17,73, 
  /* [28][0][][] */ 67,73,32,-2,127,-103,63,-45, 
  /* [29][0][][] */ -9,-19,-35,-38,-73,22,127,-41, 
  /* [30][0][][] */ 44,-127,-56,-70,-110,-5,5,-68, 
  /* [31][0][][] */ 9,25,-10,-7,-127,-7,-23,-15, 
  /* [32][0][][] */ 39,-57,-58,99,-9,-87,111,-127, 
  /* [33][0][][] */ 52,127,44,32,42,-4,-51,-12, 
  /* [34][0][][] */ -125,-35,127,-10,-9,105,103,15, 
  /* [35][0][][] */ -32,57,127,-23,-62,-54,-27,24, 
  /* [36][0][][] */ -110,16,106,-14,-6,127,76,39, 
  /* [37][0][][] */ -8,-85,-6,-127,-57,-70,62,34, 
  /* [38][0][][] */ 48,-12,83,-58,58,49,-127,9, 
  /* [39][0][][] */ -7,90,-127,-48,-26,7,8,75, 
  /* [40][0][][] */ 71,-56,15,38,14,5,9,127, 
  /* [41][0][][] */ -50,103,127,5,26,83,-70,21, 
  /* [42][0][][] */ 57,-108,-86,-21,-127,12,-4,-76, 
  /* [43][0][][] */ -9,-82,26,-69,127,-43,6,36, 
  /* [44][0][][] */ 4,127,122,28,11,60,-94,17, 
  /* [45][0][][] */ -38,54,13,91,-121,74,-127,23, 
  /* [46][0][][] */ -45,-34,68,49,-127,-112,-30,4, 
  /* [47][0][][] */ -23,60,33,-108,-127,45,-24,60, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0026965392753481865, 0.0036362020764499903, 0.0035195962991565466, 0.002851713914424181, 0.0024638439062982798, 0.0031641016248613596, 0.0021389208268374205, 0.001629294827580452, 0.0034462681505829096, 0.0034215385094285011, 0.0021464782766997814, 0.0021026104222983122, 0.0030059404671192169, 0.0030918484553694725, 0.0030530472286045551, 0.0017137050163000822, 0.0029637692496180534, 0.0026597590185701847, 0.0019670799374580383, 0.0030190807301551104, 0.0034858554136008024, 0.0028163085225969553, 0.0023938249796628952, 0.0014495134819298983, 0.0025815663393586874, 0.002814129926264286, 0.0028910960536450148, 0.0037819419521838427, 0.0011732970597222447, 0.0032945289276540279, 0.0017959664110094309, 0.0016837769653648138, 0.0024259982164949179, 0.0024629796389490366, 0.0023236216511577368, 0.0034536856692284346, 0.0022821654565632343, 0.0025672914925962687, 0.0030830486211925745, 0.0019766758196055889, 0.0036197048611938953, 0.00097083038417622447, 0.0016114192549139261, 0.003071856452152133, 0.0011344187660142779, 0.0025862243492156267, 0.0028430952224880457, 0.0024739501532167196, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1498, -865, 697, -1444, 3209, -491, 3443, -3602, 841, 751, 1696, 3931, 435, -511, 586, 4703, -1366, 3020, 4468, 1022, -686, 2132, -552, 5958, 1547, 1501, 1255, -620, 8240, -266, 2482, -1979, -361, 2858, -680, 1353, 1890, 1036, 233, 4044, 1428, 9848, -3217, 1398, 8186, -77, 2111, 2373, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00026308893575333059, 0.0003547675150912255, 0.00034339079866185784, 0.00027822860283777118, 0.00024038591072894633, 0.00030870683258399367, 0.00020868466526735574, 0.00015896279364824295, 0.00033623652416281402, 0.00033382375841028988, 0.00020942201081197709, 0.00020514201605692506, 0.00029327577794902027, 0.00030165741918608546, 0.00029787176754325628, 0.00016719830455258489, 0.00028916131122969091, 0.00025950043345801532, 0.00019191893807146698, 0.00029455780168063939, 0.00034009886439889669, 0.00027477426920086145, 0.00023355448502115905, 0.00014142236614134163, 0.00025187153369188309, 0.00027456169482320547, 0.00028207094874233007, 0.00036898665712215006, 0.00011447319411672652, 0.00032143201678991318, 0.00017522418056614697, 0.00016427837545052171, 0.00023669347865507007, 0.00024030158238019794, 0.00022670507314614952, 0.00033696022001095116, 0.00022266038286034018, 0.00025047882809303701, 0.00030079885618761182, 0.00019285516464151442, 0.0003531579568516463, 9.4719449407421052e-05, 0.00015721876116003841, 0.00029970690957270563, 0.00011068001913372427, 0.00025232601910829544, 0.00027738770586438477, 0.00024137193395290524, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -95,72,-127,90,-116,61,-62,114,-81,-58,77,-94,79,-127,-69,-49,74,89,89,-111,82,-103,98,-100,-76,-53,74,110,-105,-55,-109,113,51,-91,69,-110,-67,-121,83,-71,-6,-72,77,-83,100,64,-47,-51, -120,104,-51,104,-62,97,-40,127,-127,-87,98,-118,112,-127,-70,-79,97,122,127,-127,99,-108,109,-127,-111,-89,91,98,40,-63,-127,104,69,-127,103,-122,-88,-99,108,-86,-68,101,90,-64,-46,106,-53,-75, -67,68,25,33,-13,75,-22,46,-77,-42,51,-44,68,-81,-53,-9,44,48,70,-55,45,-57,25,-51,-31,-31,31,19,110,-40,-79,95,35,-79,51,-56,-43,-53,54,-83,-84,-52,57,-31,-86,48,-35,-50, 
  /* [0][1][][] */ -94,95,-65,105,-90,108,-127,89,-99,-95,77,-103,82,-107,-118,-78,109,107,-55,-100,104,-127,118,-72,-96,-83,95,123,-127,-99,-111,106,87,59,89,-111,-98,-127,106,-75,-118,-96,106,-89,127,69,-115,-90, -127,127,-97,127,-127,127,-120,106,-90,-127,127,-127,127,-119,-127,-127,127,127,-66,-110,127,-99,127,-95,-127,-127,127,127,27,-127,-118,127,127,73,127,-127,-127,-114,127,-115,-119,127,127,-78,-66,127,-127,-127, -92,73,-72,32,-64,65,-50,36,-67,-50,68,-61,72,-73,-83,-13,72,61,-35,-28,46,-53,43,-40,-46,-44,55,38,116,-63,-89,63,51,33,57,-82,-32,-49,63,-70,-23,-84,55,-34,-110,69,-42,-68, 
  /* [0][2][][] */ -39,48,-13,62,-55,52,-103,116,-36,-44,23,-37,43,-70,-51,-30,61,38,-90,-38,30,-49,51,-21,-48,-47,48,23,-87,-46,-47,70,55,88,71,-107,-47,-73,36,-117,-127,-29,44,-99,77,36,-81,-50, -54,78,-84,78,-86,36,-120,51,-15,-51,58,-53,86,-89,-65,-41,73,54,-115,-18,25,-22,40,-41,-89,-64,63,48,20,-57,-76,97,76,115,78,-108,-57,-40,36,-127,-80,73,69,-127,-35,68,-84,-74, -21,34,-72,20,-71,15,-76,42,-27,-27,28,-27,60,-39,-33,7,48,22,-84,-1,14,12,10,-18,-12,-34,35,23,91,-16,-10,41,21,69,31,-73,4,-34,27,-63,-6,-33,28,-48,-58,50,-34,-43, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0029886595439165831, 0.0035099117085337639, 0.0028865581844002008, 0.0040220851078629494, 0.0034852754324674606, 0.0030010479968041182, 0.0017508070450276136, 0.011147948913276196, 0.0034032175317406654, 0.002016392769291997, 0.002159973606467247, 0.0034668354783207178, 0.0028314271476119757, 0.0036710062995553017, 0.0014007220743224025, 0.0041107642464339733, 0.002828638069331646, 0.0023979039397090673, 0.0055768038146197796, 0.0017034641932696104, 0.0030326580163091421, 0.0026567524764686823, 0.0036663319915533066, 0.0049884957261383533, 0.0026239657308906317, 0.0032534927595406771, 0.0025827966164797544, 0.0018753815675154328, 0.0082373879849910736, 0.0047856736928224564, 0.0022507263347506523, 0.0088761597871780396, 0.0042054280638694763, 0.00619493518024683, 0.0025110438000410795, 0.0020328299142420292, 0.0038052897434681654, 0.0022137598134577274, 0.0031052709091454744, 0.0029983718413859606, 0.0023034815676510334, 0.0086612515151500702, 0.0069066723808646202, 0.0035706064663827419, 0.0063269375823438168, 0.0023695682175457478, 0.0018405945738777518, 0.0022281378041952848, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 12077, 44, 17577, -57, 17081, -1005, 44157, 796, 7740, 41664, 6256, 28620, 72, 14820, 50694, 20119, 1668, 1554, 5456, 54079, -352, 18411, 647, 16340, 12982, 33919, -673, -606, -5645, 13913, 25341, 171, 114, -5380, 3282, 21006, 7982, 34603, 4080, 25387, 26106, 1290, 1289, 14214, 3206, 3000, 43230, 23387, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.0321402745321393e-05, 8.2586157077457756e-05, 6.7919019784312695e-05, 9.4637296569999307e-05, 8.2006481534335762e-05, 7.0612892159260809e-05, 4.1195460653398186e-05, 0.00026230467483401299, 8.0075711593963206e-05, 4.7444536903640255e-05, 5.0822909543057904e-05, 8.1572601629886776e-05, 6.6621818405110389e-05, 8.6376618128269911e-05, 3.2958167139440775e-05, 9.6723866590764374e-05, 6.6556189267430454e-05, 5.64212714380119e-05, 0.00013121891242917627, 4.0081511542666703e-05, 7.1356662374455482e-05, 6.2511826399713755e-05, 8.6266634752973914e-05, 0.00011737637396436185, 6.1740371165797114e-05, 7.6552772952709347e-05, 6.0771686548832804e-05, 4.4126627471996471e-05, 0.00019382090249564499, 0.00011260408791713417, 5.2958268497604877e-05, 0.00020885081903543323, 9.8951248219236732e-05, 0.00014576318790204823, 5.9083384257974103e-05, 4.7831294068600982e-05, 8.953623182605952e-05, 5.2088467782596126e-05, 7.3065202741418034e-05, 7.0549926022067666e-05, 5.4199568694457412e-05, 0.00020379415946081281, 0.0001625099394004792, 8.4014274762012064e-05, 0.00014886911958456039, 5.5754546337993816e-05, 4.3308107706252486e-05, 5.2426774345804006e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 29,38,23,-36,80,79,-45,59,-16,111,1,44,-41,43,-17,47,27,87,40,-60,-70,93,-11,55,65,53,40,63,-46,-52,-15,83,-23,10,-73,63,63,-127,-32,21,18,-42,59,-1,-11,-62,-61,-15, 
  /* [1][0][][] */ -48,-4,-82,-35,11,94,-53,13,-10,-43,-39,41,66,-26,-32,-23,-22,-21,-7,11,-69,53,-111,-48,-47,-36,52,65,-25,-26,49,-34,20,-64,-37,54,17,-55,127,-38,-23,37,-51,-13,33,57,28,23, 
  /* [2][0][][] */ 10,9,54,-34,-14,-79,12,24,102,79,-69,20,119,-58,127,85,-66,-29,-41,36,93,-73,-39,-100,16,-44,45,-72,48,51,-43,20,40,-25,57,51,-63,12,1,-27,31,30,60,-27,25,-100,105,-45, 
  /* [3][0][][] */ 38,6,-18,-32,37,111,15,-14,44,-47,20,-27,-54,13,14,44,-48,-66,40,-122,-11,9,-23,-16,-34,98,127,62,-15,-44,20,47,60,-28,87,39,-37,-52,-3,51,28,8,-10,9,17,15,-9,-17, 
  /* [4][0][][] */ 83,1,12,-47,83,85,41,13,53,-5,-98,25,38,-9,15,-21,-90,-105,-15,-81,-17,25,-31,-44,-74,127,-91,114,-50,-49,24,71,36,-53,15,-19,-16,20,-19,25,-38,-14,-3,47,-36,93,-25,-40, 
  /* [5][0][][] */ 7,-3,-57,5,-19,54,22,-25,72,60,37,86,55,-24,39,-1,-41,127,-15,37,8,-10,-62,-17,37,-4,-67,-38,-24,20,16,-16,-41,-11,42,18,-47,-2,-93,3,96,-19,36,58,-19,13,-41,28, 
  /* [6][0][][] */ 48,9,20,67,8,-34,103,-46,6,55,127,100,52,30,-35,55,46,-35,-70,73,51,-69,-38,64,-82,78,79,-6,106,42,-24,6,93,-80,-105,-16,86,29,-3,-11,13,66,47,-24,57,126,29,-10, 
  /* [7][0][][] */ -107,-2,-36,26,-57,-42,19,39,76,119,-44,-60,-95,8,-26,-26,-69,95,5,123,-40,36,21,31,-23,-80,-31,-76,33,43,-1,1,-24,12,14,-26,-10,-52,127,15,7,47,19,-26,58,66,-24,4, 
  /* [8][0][][] */ -6,-92,65,-62,71,-64,70,-34,-17,-110,22,5,-31,-1,37,31,-1,3,-44,97,7,38,-15,33,65,-13,-68,-28,-127,-27,-60,-98,10,-57,5,84,1,26,104,24,13,0,72,111,-12,-64,-48,73, 
  /* [9][0][][] */ 21,-38,29,-68,34,72,-34,41,18,-34,-38,-10,22,-45,122,-17,6,-105,44,39,-80,47,49,-45,-22,-65,-27,71,53,71,-38,-26,-47,25,-19,127,-26,-38,-64,-17,-19,-1,33,100,58,77,-65,20, 
  /* [10][0][][] */ -8,26,-18,-11,29,33,-70,-44,60,43,58,-8,-32,-15,56,-52,-63,127,-4,54,-1,3,26,21,-38,46,1,95,42,3,-41,-10,82,8,-17,40,-6,-50,-39,21,-81,4,34,-14,19,42,32,36, 
  /* [11][0][][] */ -25,45,-16,31,30,52,-5,1,19,17,-127,-69,67,24,-11,-50,-6,23,-38,-40,-16,-1,97,-3,47,13,-15,32,-15,31,-8,50,26,-6,-58,6,43,86,93,23,32,-34,57,-3,-62,-22,83,11, 
  /* [12][0][][] */ -59,2,43,15,-55,-61,7,5,-41,-41,-127,13,74,-91,27,31,42,104,90,-120,-33,45,-46,-89,-3,-18,34,-25,12,19,-17,78,65,73,33,-32,-49,-21,25,-8,-35,5,56,7,30,-15,-38,-33, 
  /* [13][0][][] */ -39,-106,-42,-100,9,23,62,17,-102,29,102,-60,49,47,127,9,100,17,-6,-90,64,-64,116,-1,-65,13,-33,2,-46,-104,-111,15,44,-32,-75,69,39,-54,69,-59,8,41,77,54,58,-29,88,-65, 
  /* [14][0][][] */ 58,13,-65,8,-41,23,-82,-34,-29,49,67,57,-9,-68,8,-51,62,-103,12,2,101,-57,16,5,-7,124,-89,4,-52,-24,-81,4,127,48,91,-28,-80,18,-11,67,-18,-39,100,-32,-50,-39,-54,55, 
  /* [15][0][][] */ -70,4,47,24,94,-5,8,34,19,69,-12,61,61,-16,-36,-19,14,43,8,-44,26,-49,-55,-61,46,-78,-47,62,-34,10,27,5,-60,-6,127,-19,-98,15,57,-26,-50,-30,14,-2,-35,-31,-19,-2, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0052901445887982845, 0.0057357535697519779, 0.0052411574870347977, 0.0071154693141579628, 0.0043596071191132069, 0.006258031353354454, 0.0043595391325652599, 0.0052529918029904366, 0.0037211987655609846, 0.0036725928075611591, 0.007807265967130661, 0.0068090199492871761, 0.0046689803712069988, 0.0036270893178880215, 0.0063335010781884193, 0.0051224818453192711, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -6618, 10051, -20299, -527, 7369, -14902, -37619, -9437, -5616, 4774, -17887, -11618, 5905, -11951, -3892, 978, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00012447399785742164, 0.00013495891471393406, 0.00012332135520409793, 0.00016742281150072813, 0.00010257898975396529, 0.00014724780339747667, 0.00010257739631924778, 0.00012359980610199273, 8.7557622464373708e-05, 8.6413951066788286e-05, 0.00018370038014836609, 0.00016021223564166576, 0.00010985836706822738, 8.5343279351945966e-05, 0.00014902355906087905, 0.00012052898819092661, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 27,6,-15,49,-127,-10,91,50,48,63,-10,18,14,1,32,95, 
  /* [1][0][][] */ -34,23,-88,-2,116,127,-5,-26,-9,20,-73,18,-77,79,-58,-59, 
  /* [2][0][][] */ -52,70,84,-9,59,92,15,36,29,-16,38,-31,66,-127,-8,22, 
  /* [3][0][][] */ 127,-25,15,0,44,47,-20,-5,40,42,-62,-31,-40,48,-47,61, 
  /* [4][0][][] */ -64,-18,4,29,-122,-14,-77,-31,-3,16,-11,-41,-17,45,-34,127, 
  /* [5][0][][] */ -127,2,50,14,107,22,23,18,-64,-1,-36,7,-88,72,-77,-29, 
  /* [6][0][][] */ -127,14,-34,39,-26,-90,90,18,-4,-42,-40,51,19,-2,-54,3, 
  /* [7][0][][] */ -32,127,18,-98,91,102,127,34,53,-10,32,34,93,35,-29,36, 
  /* [8][0][][] */ -44,-34,-64,43,-38,86,-39,-71,37,-19,69,47,127,76,-127,16, 
  /* [9][0][][] */ -12,-127,-11,71,-31,-64,-17,54,45,47,-3,59,-62,11,0,-40, 
  /* [10][0][][] */ -48,-45,-86,63,-62,100,53,-65,38,-23,35,-35,39,127,-60,83, 
  /* [11][0][][] */ -49,-77,-52,30,-6,59,34,30,16,24,72,-69,17,117,-84,127, 
  /* [12][0][][] */ -38,-97,-93,85,-118,-127,19,90,80,64,-35,96,4,-68,-15,-5, 
  /* [13][0][][] */ -68,-12,-31,-7,-21,9,32,17,-24,127,-2,-27,39,36,16,-10, 
  /* [14][0][][] */ -84,-5,-36,-29,17,60,-48,-100,127,-24,72,28,66,-22,-66,-71, 
  /* [15][0][][] */ 3,-127,96,-53,-38,-43,6,59,15,-47,-107,-30,86,-34,-27,-47, 
  /* [16][0][][] */ -14,-38,19,-30,28,27,-24,-24,59,-127,37,-13,-4,-10,-71,-82, 
  /* [17][0][][] */ -17,-7,38,-56,22,-21,-35,15,112,-52,19,72,95,-52,-14,-127, 
  /* [18][0][][] */ 69,12,-9,-104,-4,-32,111,-51,28,55,-22,60,-4,60,-13,-127, 
  /* [19][0][][] */ -58,-49,-26,-74,-67,51,-13,-29,29,-29,4,-127,-2,-17,-27,-24, 
  /* [20][0][][] */ 7,63,80,-94,52,-11,-31,90,-117,-127,30,-86,-31,105,-24,-15, 
  /* [21][0][][] */ 6,-122,-127,-31,82,49,120,51,-88,-98,-20,-10,120,-113,-25,29, 
  /* [22][0][][] */ 75,-13,83,-15,13,-8,52,22,37,127,25,20,7,-9,105,-11, 
  /* [23][0][][] */ -127,-67,-8,52,54,48,31,-7,-21,0,-9,-112,19,57,64,125, 
  /* [24][0][][] */ -4,4,4,52,6,-90,-10,-55,9,116,-127,54,-6,-70,60,-68, 
  /* [25][0][][] */ 81,-33,71,127,22,1,-32,34,-123,60,62,-64,-25,21,75,11, 
  /* [26][0][][] */ -12,13,13,51,-45,107,-25,36,-52,-28,-75,38,3,19,39,-127, 
  /* [27][0][][] */ 48,7,1,-39,-52,-7,-95,11,-109,-19,-71,-36,-93,55,-10,127, 
  /* [28][0][][] */ -62,9,22,-7,5,-22,-127,18,-27,-32,1,-19,7,-65,-52,-28, 
  /* [29][0][][] */ -14,-122,-26,98,-27,10,127,0,80,55,-112,66,41,-37,-50,72, 
  /* [30][0][][] */ 29,-70,-28,-3,-127,6,46,-45,21,22,-30,-43,-14,30,-2,45, 
  /* [31][0][][] */ -127,-27,-17,74,-24,20,-48,-31,-21,-45,-4,-40,-34,-71,-31,73, 
  /* [32][0][][] */ -127,-88,-91,-17,-90,-43,19,-42,116,48,-47,-49,42,44,32,3, 
  /* [33][0][][] */ -10,24,-96,27,-119,-64,48,-19,-127,10,-50,-68,1,76,47,68, 
  /* [34][0][][] */ 32,67,-23,22,-77,-40,52,15,16,-127,-21,27,-26,-10,53,112, 
  /* [35][0][][] */ 54,-45,-69,0,-127,0,59,-32,22,40,-20,3,28,66,57,86, 
  /* [36][0][][] */ -16,-4,-67,42,127,-16,61,76,-97,11,-96,-109,29,-32,36,58, 
  /* [37][0][][] */ -127,64,2,-80,23,-102,-37,-23,-26,-31,-20,37,69,-86,15,-117, 
  /* [38][0][][] */ 26,124,19,-55,-80,-67,-127,-65,-50,-73,59,69,-82,-85,88,2, 
  /* [39][0][][] */ 19,-39,16,86,1,63,70,-41,-24,48,24,-5,0,127,60,100, 
  /* [40][0][][] */ 114,36,56,109,-46,-36,29,52,-82,51,12,-31,-46,-12,127,-12, 
  /* [41][0][][] */ -26,-6,12,48,-110,118,-3,57,-58,24,-102,6,16,33,55,-127, 
  /* [42][0][][] */ 23,-127,53,-6,108,-3,49,6,-22,-80,-110,-21,-16,-1,-1,9, 
  /* [43][0][][] */ -30,-69,-29,4,127,18,0,64,-67,-42,-121,-74,127,6,-50,72, 
  /* [44][0][][] */ -26,-58,-86,-104,21,94,58,17,-24,-127,-66,70,-67,12,18,82, 
  /* [45][0][][] */ 17,-56,-74,13,-127,50,-33,-51,65,-55,17,-54,-10,18,-16,52, 
  /* [46][0][][] */ 13,-78,-35,-27,108,-54,6,99,-14,-14,25,54,-38,-40,40,-127, 
  /* [47][0][][] */ -64,-47,-28,89,4,16,24,61,-5,127,85,78,-71,53,-16,91, 
  /* [48][0][][] */ 43,-15,-73,-81,38,-67,-1,54,48,-68,-6,29,-61,10,-41,-127, 
  /* [49][0][][] */ 41,58,0,19,-24,-16,102,70,-61,127,-69,9,-43,-18,108,125, 
  /* [50][0][][] */ -9,-8,1,-7,-127,-2,-10,-38,57,13,34,40,-30,-64,5,3, 
  /* [51][0][][] */ 17,0,-23,-127,-28,112,79,-73,-4,17,30,-72,77,91,-49,17, 
  /* [52][0][][] */ 23,-14,0,-86,87,-104,-7,-30,29,2,127,-48,41,5,-39,97, 
  /* [53][0][][] */ -77,-56,16,-61,-25,-85,38,-119,-22,92,-127,46,-27,-26,0,-50, 
  /* [54][0][][] */ 44,61,17,-29,-127,-36,-48,-91,-17,-19,35,40,-45,-50,72,25, 
  /* [55][0][][] */ 14,7,-19,68,-27,19,42,-22,0,127,13,61,13,14,-3,38, 
  /* [56][0][][] */ 29,-127,-89,40,-98,57,20,12,118,-16,5,24,-30,-32,58,118, 
  /* [57][0][][] */ 63,51,65,-101,89,-2,-4,-4,75,-42,19,125,74,-83,127,-73, 
  /* [58][0][][] */ 108,-109,34,-72,51,8,13,127,91,119,-5,71,75,19,90,-12, 
  /* [59][0][][] */ -48,60,30,-42,-5,-106,-1,9,-15,12,-127,-118,-115,-59,94,-5, 
  /* [60][0][][] */ 21,-32,21,27,21,-26,-1,-37,6,127,-23,49,-15,-13,-29,-19, 
  /* [61][0][][] */ 66,72,8,-31,-74,-127,-32,-52,-24,-9,-29,20,-47,-20,89,87, 
  /* [62][0][][] */ -16,91,-38,34,-46,127,-42,15,-47,13,-46,26,-30,44,58,-79, 
  /* [63][0][][] */ 33,-3,-75,-127,-7,-37,63,-21,2,-88,-21,36,-25,51,30,-30, 
  /* [64][0][][] */ -44,17,6,-32,56,-73,24,111,-127,-13,-85,-53,-62,74,69,49, 
  /* [65][0][][] */ -52,-7,-60,-40,66,71,-14,-66,-108,-62,17,-31,-118,127,-55,55, 
  /* [66][0][][] */ -20,54,-20,20,-48,127,-8,29,-62,9,-32,33,-29,47,44,-72, 
  /* [67][0][][] */ -1,-22,-34,-29,20,-69,67,-87,-14,25,3,127,-34,-2,-23,-80, 
  /* [68][0][][] */ 42,-127,-2,117,-4,-14,-6,104,91,72,77,45,-91,66,1,-11, 
  /* [69][0][][] */ 19,70,78,-123,77,11,-28,127,26,110,52,84,83,-103,23,-126, 
  /* [70][0][][] */ 59,41,40,-37,109,10,-127,-64,-127,-92,1,50,-29,47,-123,-14, 
  /* [71][0][][] */ -41,-68,26,-61,38,-6,30,21,-104,59,-127,-58,18,70,-15,48, 
  /* [72][0][][] */ -22,27,58,-43,-61,-16,-90,-107,-1,65,-54,2,29,86,-127,23, 
  /* [73][0][][] */ 1,-35,-31,-55,42,-104,46,-74,93,92,91,-24,34,-32,-100,127, 
  /* [74][0][][] */ -2,-5,-26,74,-66,-4,92,18,59,56,17,100,127,33,-60,20, 
  /* [75][0][][] */ -29,27,-35,28,-45,127,-8,10,-50,29,-47,39,-12,43,28,-67, 
  /* [76][0][][] */ -44,70,-46,39,-71,-4,-19,12,50,54,-45,-35,51,-45,-127,14, 
  /* [77][0][][] */ 103,99,-127,90,85,95,84,60,42,8,86,-28,71,43,52,28, 
  /* [78][0][][] */ 8,-53,-7,-79,62,-118,39,-49,39,41,122,-36,14,-28,-42,127, 
  /* [79][0][][] */ -35,53,2,18,-5,-38,-26,-10,-127,-11,35,9,104,30,-83,-42, 
  /* [80][0][][] */ -99,23,68,-1,68,63,-9,-127,-104,52,-70,-74,4,-116,28,74, 
  /* [81][0][][] */ 65,90,-25,-14,24,-8,86,79,-116,115,-54,-44,-29,43,93,127, 
  /* [82][0][][] */ 66,108,-48,-33,-19,-55,72,-97,13,13,-43,53,127,-53,64,-84, 
  /* [83][0][][] */ 1,-11,29,23,-9,28,-9,-127,53,-38,98,22,55,-53,-56,-108, 
  /* [84][0][][] */ -127,-94,-39,-25,-1,96,98,6,76,61,90,89,60,98,-66,14, 
  /* [85][0][][] */ 113,12,82,-47,55,-18,-9,98,26,72,-51,10,-51,41,127,3, 
  /* [86][0][][] */ -75,84,-21,-1,35,81,16,21,115,48,127,-14,-43,82,19,-27, 
  /* [87][0][][] */ 6,-66,15,-52,51,-127,32,-32,41,-14,75,-44,42,-46,-55,84, 
  /* [88][0][][] */ -66,58,53,-11,97,-26,46,-13,-53,-64,81,-44,84,127,98,-108, 
  /* [89][0][][] */ -23,37,-9,26,-34,127,-12,34,-43,13,-26,23,-6,62,26,-86, 
  /* [90][0][][] */ 48,-83,25,1,107,16,74,41,-13,-127,-109,-38,-7,-7,-55,38, 
  /* [91][0][][] */ -24,38,-35,-54,4,-55,-77,27,-91,2,-119,-127,-95,-69,-12,39, 
  /* [92][0][][] */ 68,54,60,41,-127,-103,8,-8,-16,39,-20,-40,-12,-87,13,-6, 
  /* [93][0][][] */ -14,-127,-89,25,-87,-76,-14,125,71,52,-14,48,-65,30,18,-49, 
  /* [94][0][][] */ 97,14,112,6,6,-44,16,37,-6,47,-9,24,13,-10,127,-4, 
  /* [95][0][][] */ -52,-37,-39,-21,127,6,33,69,-32,-13,-81,-60,8,9,-45,44, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0044846036471426487, 0.001935685402713716, 0.0038847627583891153, 0.0035209932830184698, 0.0035785408690571785, 0.0013440920738503337, 0.0038872805889695883, 0.0021487274207174778, 0.0016620514215901494, 0.0026058186776936054, 0.0018909038044512272, 0.0027223585639148951, 0.003119834465906024, 0.0066430936567485332, 0.002996781375259161, 0.0030609730165451765, 0.0056802504695951939, 0.0026814278680831194, 0.0028373992536216974, 0.0015084074111655354, 0.004602520726621151, 0.0012221394572407007, 0.0033662391360849142, 0.0022566900588572025, 0.0019874069839715958, 0.0031500379554927349, 0.0037449626252055168, 0.0037844150792807341, 0.0034155070316046476, 0.0039726598188281059, 0.0048023052513599396, 0.0025131767615675926, 0.0040194671601057053, 0.0011874535121023655, 0.002121517900377512, 0.0040807528421282768, 0.0019663043785840273, 0.0039735566824674606, 0.0020683445036411285, 0.0047663054428994656, 0.00085082923760637641, 0.0033633238635957241, 0.0028070858679711819, 0.0024056779220700264, 0.0019625413697212934, 0.0022646763827651739, 0.0019399974262341857, 0.0020027095451951027, 0.0041533824987709522, 0.003787235589697957, 0.0039810100570321083, 0.0017727974336594343, 0.0031501224730163813, 0.0026335737202316523, 0.00227748928591609, 0.0056116040796041489, 0.0030972971580922604, 0.0014736740849912167, 0.00225645094178617, 0.003048045327886939, 0.0027613930869847536, 0.0018097347347065806, 0.0033604875206947327, 0.0052088722586631775, 0.00077223108382895589, 0.0013611679896712303, 0.0039797225035727024, 0.0033401297405362129, 0.0012415116652846336, 0.0023722671903669834, 0.0030633315909653902, 0.0024008110631257296, 0.0022258081007748842, 0.0023796421010047197, 0.0048711840063333511, 0.0038799638859927654, 0.0039531639777123928, 0.0013916229363530874, 0.0028293316718190908, 0.0030823755078017712, 0.0020859437063336372, 0.0029299049638211727, 0.0024387110024690628, 0.0010801745811477304, 0.0033671623095870018, 0.0019939243793487549, 0.0028812952805310488, 0.0039981282316148281, 0.0040260376408696175, 0.0044267047196626663, 0.00280523463152349, 0.0013951878063380718, 0.003088794182986021, 0.0024800153914839029, 0.0029169244226068258, 0.0021161045879125595, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1276, 6811, 535, 1757, 2931, 11822, -346, 2529, 9665, -1113, 7147, 3188, 1705, 411, 3140, 200, 1799, 3865, -295, 9991, 611, 11030, -1131, 2199, -6528, 1152, 2352, 1541, 3968, 969, 1988, 3993, 1594, 13143, 4277, 2474, 5098, 1826, 3931, 1238, 21008, 1574, 2374, 1075, 3505, 6332, 6751, 7146, 1256, -718, 2020, 6293, 2810, -2573, 5184, 202, 1611, 10004, 963, 1727, 2732, 8635, 3127, -1, 22408, 11463, 1916, 2819, 10317, 3530, 2759, 1897, -4049, 4924, 1266, 2674, 576, 10413, 3626, 4328, 4051, 957, 3838, 14886, -385, 6025, 4097, 1733, -1045, 2081, 1708, 10762, 2902, 2384, 3149, 5513, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00026295150746591389, 0.00011349751730449498, 0.00022778025595471263, 0.00020645090262405574, 0.00020982515707146376, 7.880986959207803e-05, 0.00022792788513470441, 0.00012598908506333828, 9.7453186754137278e-05, 0.00015279029321391135, 0.00011087177699664608, 0.00015962352335918695, 0.00018292924505658448, 0.00038951300666667521, 0.00017571411444805562, 0.00017947793821804225, 0.00033305739634670317, 0.00015722359239589423, 0.0001663688599364832, 8.8444379798602313e-05, 0.00026986547163687646, 7.1659262175671756e-05, 0.00019737699767574668, 0.00013231938646640629, 0.0001165301728178747, 0.00018470019858796149, 0.00021958317665848881, 0.00022189643641468138, 0.00020026578567922115, 0.00023293403501156718, 0.00028157970518805087, 0.00014735831064172089, 0.00023567855532746762, 6.9625479227397591e-05, 0.00012439367128536105, 0.0002392719907220453, 0.00011529283801792189, 0.00023298662563320249, 0.00012127588706789538, 0.00027946886257268488, 4.9887756176758558e-05, 0.00019720607087947428, 0.00016459144535474479, 0.00014105519221629947, 0.00011507219460327178, 0.00013278766709845513, 0.00011375034955563024, 0.00011742742935894057, 0.0002435305796097964, 0.00022206181893125176, 0.00023342364875134081, 0.00010394669516244903, 0.00018470516079105437, 0.00015441769210156053, 0.00013353893882595003, 0.0003290323365945369, 0.00018160778563469648, 8.6407817434519529e-05, 0.00013230537297204137, 0.00017871992895379663, 0.00016191229224205017, 0.00010611248580971733, 0.00019703975704032928, 0.00030541844898834825, 4.5279211917659268e-05, 7.9811099567450583e-05, 0.00023334815341513604, 0.0001958460925379768, 7.2795141022652388e-05, 0.00013909616973251104, 0.00017961623962037265, 0.0001407698291586712, 0.00013050864799879491, 0.00013952859444543719, 0.00028561835642904043, 0.00022749888012185693, 0.00023179090931080282, 8.1596808740869164e-05, 0.00016589582082815468, 0.00018073286628350616, 0.00012230779975652695, 0.00017179285350721329, 0.0001429920521331951, 6.3335253798868507e-05, 0.0001974311308003962, 0.00011691231338772923, 0.00016894267173483968, 0.00023442736710421741, 0.0002360638027312234, 0.00025955663295462728, 0.0001644829026190564, 8.1805832451209426e-05, 0.00018110920791514218, 0.00014541391283273697, 0.00017103175923693925, 0.00012407626491039991, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -85,-6,10,-9,82,8,28,-20,-15,-9,-11,-44,-71,3,-4,33,-26,0,-35,-20,-6,35,18,29,3,-18,-23,-1,27,6,9,5,-8,-2,-54,-2,-8,-56,-43,15,-15,-6,45,-47,-30,39,-94,-30,4,13,8,58,-75,-14,49,-22,-3,-15,4,-33,0,-33,-10,-32,-33,-28,-60,-53,-21,25,52,-7,20,0,10,-11,-33,16,127,-16,-114,31,-97,-35,1,-30,-26,23,-23,-24,-5,-39,-4,28,-13,-1, -61,23,61,-99,-41,15,127,-49,-3,-8,-36,24,-110,1,-78,106,-17,68,58,-26,-13,127,127,105,22,2,52,39,127,29,127,-37,-107,-16,-124,-33,-36,-112,127,-19,-50,-127,16,-41,57,-29,-26,-17,61,-11,40,127,-99,1,-68,-6,-89,-3,-10,11,-14,-127,-118,-9,-80,-2,-16,-89,5,15,-119,89,-127,-15,-1,-27,-98,-38,-9,-105,-127,22,21,-87,125,82,-105,44,-127,-6,21,-17,7,127,-56,-92, -47,4,12,28,65,5,44,-32,-24,19,-17,7,-44,-1,-9,9,-17,-8,3,-22,-13,8,40,16,-13,-12,17,-12,9,10,0,8,32,5,-51,61,-12,-57,-37,-5,-22,-19,37,-33,-11,-24,-77,-41,-20,7,16,30,-1,-58,9,-20,57,-15,2,-41,1,-22,-68,3,-53,-43,127,-35,-11,23,34,4,-1,-1,-5,19,-27,41,-48,-14,-61,13,-111,-13,17,-32,-43,-25,-51,-44,-19,41,4,33,-24,-1, 
  /* [0][1][][] */ -121,8,55,-80,44,83,-43,-17,-18,-23,-12,-54,-117,22,30,123,-26,39,80,19,19,-8,95,-33,51,4,94,28,-1,12,-16,-20,-127,-14,48,3,-20,-67,-67,-127,-26,10,97,-38,-96,127,-91,-90,73,54,23,-39,-127,109,76,-39,25,-41,36,-21,15,-24,76,-72,-21,8,-40,-65,-18,-4,-110,-1,90,127,11,-74,-127,-46,-48,-53,-46,7,-11,-89,52,8,-115,69,-69,127,89,-88,127,-2,-59,-10, 67,127,127,127,-127,-127,127,-45,127,127,-54,-62,-71,127,-13,101,127,-127,127,127,127,-65,97,-127,-127,-127,127,127,-99,127,2,127,-38,127,127,-81,127,52,8,-28,127,18,-127,-101,127,-14,127,106,127,-127,127,-95,116,127,-127,127,-127,127,-127,127,-113,115,91,-127,127,127,-24,127,-105,-127,-30,-127,-5,113,127,75,21,-127,86,-127,79,127,127,127,127,78,-127,127,-67,60,8,-5,-94,-20,-127,-30, -127,-15,63,-103,16,44,-78,4,-48,-10,2,127,-127,16,26,127,-30,53,108,14,5,-16,82,-30,37,-3,67,17,-8,8,3,-17,-74,-26,74,127,-9,-90,-76,-89,-40,-16,37,-58,-76,-64,-67,-127,28,63,6,-31,119,5,94,-50,94,-37,50,-62,0,-27,-127,-20,-57,-22,-56,-66,-22,4,-127,-2,29,-89,-9,127,-96,-21,-57,13,-112,-17,-92,-98,-10,20,-108,40,-53,-79,127,127,-45,-10,-69,-14, 
  /* [0][2][][] */ -46,-29,-5,6,39,4,-9,24,-26,3,44,-49,124,0,3,-34,-10,-8,-59,-21,-21,-3,-34,-35,17,-21,16,3,18,1,-35,17,-21,-10,19,-13,-16,-34,-32,7,-37,-4,14,2,21,20,-49,-13,-31,-5,-8,-11,-20,24,35,-22,5,-25,4,-28,-10,19,-5,5,-15,-25,107,22,27,19,-17,-8,51,1,-5,-44,-33,46,-19,23,-33,25,-85,-21,5,-14,93,-9,-43,28,-9,-31,-17,-20,-25,-6, -34,-53,35,-105,-47,0,24,127,-69,75,127,-10,-33,34,127,59,-9,-33,102,-38,-21,-34,107,-6,24,21,63,7,17,13,-64,-45,1,-39,-101,-2,-109,-127,18,-87,-29,-124,-48,127,19,-25,-40,-12,26,-21,4,3,62,80,-45,-38,-63,-55,44,-77,127,49,93,21,-71,-45,-26,-70,127,26,-120,7,72,-39,32,-37,-2,-27,-1,65,-103,-15,-77,-82,47,-127,24,8,-75,-2,66,-1,12,-84,-22,127, -23,18,16,14,37,-7,-18,19,-27,8,17,57,103,6,4,-37,-11,14,14,-17,-22,-9,-3,-21,-11,-16,-13,5,17,7,-39,10,16,-1,-7,13,-18,-21,-39,4,-49,-11,-2,-18,32,-8,-49,1,-39,-3,2,-13,-7,6,24,-23,66,-16,14,-38,-5,24,-2,6,-21,-27,-20,8,28,13,-36,-11,-5,-54,-5,-2,-35,51,73,59,-22,8,-89,16,-10,-7,68,-4,-16,-15,6,35,-2,-9,-10,-15, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0034298943355679512, 0.014202991500496864, 0.0049386275932192802, 0.0074109318666160107, 0.0094843078404664993, 0.022235509008169174, 0.0051124002784490585, 0.01024292316287756, 0.013093286193907261, 0.011065337806940079, 0.01406068354845047, 0.0072025195695459843, 0.0038105982821434736, 0.0061003961600363255, 0.008068133145570755, 0.0062748510390520096, 0.014687441289424896, 0.017473148182034492, 0.0052972491830587387, 0.02182818204164505, 0.011663878336548805, 0.013515854254364967, 0.0038879306521266699, 0.007984532043337822, 0.15615759789943695, 0.0068388902582228184, 0.0064621935598552227, 0.0064134174026548862, 0.016084285452961922, 0.0070853647775948048, 0.010295677930116653, 0.017257381230592728, 0.0036773337051272392, 0.026342250406742096, 0.0074938130564987659, 0.0089448904618620872, 0.013635437004268169, 0.0037350908387452364, 0.0090105719864368439, 0.0051734228618443012, 0.018473370000720024, 0.0075912587344646454, 0.012034863233566284, 0.0056996014900505543, 0.0075056743808090687, 0.012517121620476246, 0.0066115590743720531, 0.009091806598007679, 0.0065496666356921196, 0.012441816739737988, 0.0086605474352836609, 0.011035294272005558, 0.0071391640231013298, 0.009134465828537941, 0.012164916843175888, 0.013600590638816357, 0.006421992089599371, 0.017372401431202888, 0.024222802370786667, 0.0081760426983237267, 0.015749996528029442, 0.011793212965130806, 0.0073492806404829025, 0.0059824804775416851, 0.011526629328727722, 0.019583685323596001, 0.0056622792035341263, 0.0053670960478484631, 0.012628380209207535, 0.020375045016407967, 0.0052347825840115547, 0.012050251476466656, 0.016097299754619598, 0.0094693200662732124, 0.007996533066034317, 0.0093269236385822296, 0.0031404651235789061, 0.010824926197528839, 0.0064275986514985561, 0.0067437221296131611, 0.0032490333542227745, 0.0079212337732315063, 0.004393863957375288, 0.0095244543626904488, 0.0042521273717284203, 0.016238667070865631, 0.0049035064876079559, 0.0089664189144968987, 0.0054307198151946068, 0.0093668289482593536, 0.0040609077550470829, 0.010270676575601101, 0.015177029184997082, 0.0098915724083781242, 0.0040308218449354172, 0.014585197903215885, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 14147, -2093, -8607, 7232, -42, 65, 1122, -845, 4897, -4222, -1596, -1782, 8442, -2721, -3749, -8990, 874, 245, -10473, -1170, -1182, -1135, -7009, 1866, -1, 8451, -14067, -5241, -3149, -3601, 897, -981, 11790, 7, 1735, -2884, 2498, 11697, 3918, 9822, 4152, 5398, -874, 7439, 835, -627, 9952, 5776, -6357, 250, -6017, -1139, 877, -3853, -2097, 2579, 1125, 3516, 292, 4543, -129, 809, 776, 5785, 9613, 888, 13051, 11288, -573, 151, 12383, 80, -432, 874, -3124, 388, 18095, 3914, 8399, 5880, 12701, -2281, 9000, 12230, -1243, -86, 11291, -6948, 10182, 183, -7619, -1503, 193, -496, 17209, 240, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 8.0703401181381196e-05, 0.00033418805105611682, 0.00011620300210779533, 0.00017437487258575857, 0.00022316018294077367, 0.00052318844245746732, 0.00012029177014483139, 0.00024100995506159961, 0.00030807731673121452, 0.00026036088820546865, 0.00033083962625823915, 0.00016947105177678168, 8.9661138190422207e-05, 0.00014353873848449439, 0.00018983843619935215, 0.00014764355728402734, 0.00034558685729280114, 0.00041113290353678167, 0.00012464115570764989, 0.00051360431825742126, 0.00027444420265965164, 0.00031802011653780937, 9.1480724222492427e-05, 0.0001878713519545272, 0.0036742964293807745, 0.00016091506404336542, 0.000152051608893089, 0.00015090394299477339, 0.00037845378392376006, 0.00016671446792315692, 0.00024225124798249453, 0.00040605603135190904, 8.6525498772971332e-05, 0.00061981764156371355, 0.00017632501840125769, 0.00021046801703050733, 0.00032083381665870547, 8.7884494860190898e-05, 0.00021201345953159034, 0.00012172760034445673, 0.00043466754141263664, 0.00017861786182038486, 0.00028317325632087886, 0.00013410826795734465, 0.00017660410958342254, 0.00029452051967382431, 0.00015556610014755279, 0.00021392486814875156, 0.00015410980267915875, 0.00029274864937178791, 0.0002037775848293677, 0.00025965398526750505, 0.00016798033902887255, 0.00021492861560545862, 0.00028623334947042167, 0.00032001390354707837, 0.00015110570529941469, 0.00040876239654608071, 0.00056994828628376126, 0.00019237748347222805, 0.00037058815360069275, 0.00027748735737986863, 0.00017292425036430359, 0.00014076425577513874, 0.00027121481252834201, 0.00046079259482212365, 0.0001332301035290584, 0.00012628461990971118, 0.00029713835101574659, 0.00047941284719854593, 0.00012317135406192392, 0.00028353533707559109, 0.00037876001442782581, 0.00022280753182712942, 0.00018815371731761843, 0.0002194570261053741, 7.3893301305361092e-05, 0.00025470415130257607, 0.00015123761841095984, 0.00015867581532802433, 7.6447846367955208e-05, 0.00018638197798281908, 0.00010338503489037976, 0.00022410480596590787, 0.0001000500560621731, 0.0003820862912107259, 0.00011537662794580683, 0.00021097456919960678, 0.00012778164818882942, 0.00022039597388356924, 9.5550771220587194e-05, 0.0002416629868093878, 0.00035710658994503319, 0.00023274288105312735, 9.4842871476430446e-05, 0.00034318113466724753, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 31,26,14,-4,-4,-75,-19,-3,-24,-69,4,-16,51,-73,54,39,-87,-40,39,30,78,23,-57,1,-5,64,127,70,25,79,51,-24,10,2,27,-8,19,33,-15,0,119,23,24,-13,-15,13,7,-46,46,-39,100,-4,-63,-4,29,10,6,-40,5,11,-7,50,-47,-10,24,2,63,12,13,-35,3,10,21,47,7,36,64,-30,48,25,-10,41,35,32,-59,-6,-6,78,33,4,-70,-12,28,-13,103,69, 
  /* [1][0][][] */ 13,33,-35,-30,12,-15,76,-69,-52,-33,-54,-60,10,-43,14,-45,-24,-32,-21,-5,-29,-84,112,-34,-10,18,4,45,-56,21,-50,9,-26,19,1,-11,-10,61,-41,66,15,19,-6,-59,35,-58,-3,26,-68,1,44,-105,-51,44,45,50,23,23,-67,3,-46,-8,-24,-6,31,22,86,6,-25,-127,0,-3,30,67,-14,22,-44,-28,86,-36,47,-23,63,-64,-24,-58,-14,17,-22,-54,43,-16,59,-67,-26,53, 
  /* [2][0][][] */ -12,-1,22,-27,81,53,-51,41,-54,47,23,-29,40,-5,30,36,24,-28,-127,9,-22,-22,-8,32,0,-12,-33,15,-45,-11,-40,81,-17,-29,2,33,-40,34,-27,-34,63,14,20,29,1,68,27,-11,-76,13,-12,17,-13,43,1,-61,45,23,52,19,-23,11,-4,45,44,9,-29,-11,8,-9,-7,-22,34,48,25,55,-39,-12,-25,-38,32,41,52,3,-11,-51,-3,-37,-28,-31,2,76,-12,-27,86,-46, 
  /* [3][0][][] */ 39,-20,-23,-127,-1,-47,117,-10,30,126,-75,-23,20,-31,-35,86,64,50,-38,33,-62,44,11,-1,-41,104,61,-12,-49,-6,-69,82,5,-18,56,-2,14,-61,-39,78,24,11,-29,17,59,-37,22,33,62,-46,44,-41,120,31,19,-21,13,-23,-23,-60,-44,85,87,-12,-17,-12,119,-47,-43,-32,-74,23,1,-60,-5,-59,21,-62,127,-11,-17,-65,-54,-48,-36,-53,105,92,-32,38,-48,10,10,-112,-18,51, 
  /* [4][0][][] */ -20,72,35,19,-26,15,-51,-17,3,-35,4,-25,33,32,-26,24,-15,-44,-23,-78,17,-33,-73,8,-38,-28,-8,10,-36,127,-43,-14,16,-35,16,-33,69,37,-35,10,23,13,6,-43,-57,0,66,-23,11,-31,-53,0,-61,9,33,10,-3,48,-43,15,-27,-52,-12,9,64,23,-66,-9,-3,4,-13,-65,-34,65,50,72,-42,-1,-60,24,9,61,12,-73,41,-62,-22,-59,-26,-45,-36,-19,8,5,39,-19, 
  /* [5][0][][] */ 8,-9,24,-7,-21,-22,-15,-12,30,14,-26,2,-23,-29,8,-29,-9,10,-49,-52,-27,14,-22,8,20,-49,58,-16,-7,38,28,64,-7,-90,11,-1,-36,-37,-31,5,-52,-7,-29,7,10,1,-95,19,-27,8,38,-2,18,-76,13,27,-32,-60,-9,-23,33,9,10,52,-48,-1,103,-18,-19,-24,8,14,-17,30,30,20,-12,-11,127,39,-23,-15,-29,10,39,71,-6,80,5,-32,-21,1,18,-6,-33,16, 
  /* [6][0][][] */ -1,-51,58,33,-47,105,-37,-89,-8,-61,-83,44,10,17,-44,57,19,13,6,-60,-79,-9,-78,-40,5,-49,-8,66,-127,23,-24,-28,36,52,-31,-4,-16,-30,20,-28,-44,33,43,-34,16,26,-72,-11,26,20,-69,-92,66,-22,-35,4,7,-10,16,-18,-27,-34,24,5,38,-78,-56,-36,-93,-7,2,-44,-62,-86,9,-99,70,8,-54,31,-35,70,12,-67,62,-26,-20,-2,-83,62,-71,62,23,-42,64,-92, 
  /* [7][0][][] */ -31,4,-56,66,-28,2,54,8,-100,10,92,44,11,-56,-10,-35,-22,-3,4,16,-60,5,-26,-24,63,54,12,73,-33,30,7,38,-63,-127,41,113,-14,35,-55,-11,-13,-14,24,-92,37,73,83,73,-7,52,-35,18,39,-63,44,-58,-4,25,-72,-35,43,34,25,-60,73,-47,91,-17,-47,-29,79,21,-37,-26,-90,-33,47,-55,92,-35,-3,-10,-77,-16,56,0,-61,54,-20,21,13,32,56,-32,90,-22, 
  /* [8][0][][] */ -20,-58,9,-6,-10,-2,20,13,-19,-10,62,46,6,35,-8,-7,59,0,13,-1,-10,-73,-33,-24,-28,-35,75,5,-9,53,-7,-22,-13,9,-5,-9,-38,-11,14,-38,-4,39,27,-43,10,-23,26,-12,33,9,47,-4,-3,18,-41,-5,-15,97,-39,4,-12,-57,-59,0,-80,-23,-5,7,-8,14,48,-16,-12,-127,45,-105,17,19,-43,22,-24,-2,2,51,60,-51,-38,58,-47,78,17,-7,-52,4,-3,-62, 
  /* [9][0][][] */ -19,-31,-19,12,12,7,-7,35,-40,3,46,57,-19,40,23,-45,-11,31,-20,-27,-2,34,-5,8,-22,23,10,9,42,-8,13,-3,-5,-11,20,63,-20,-12,13,4,-2,-24,3,10,0,54,20,34,-28,0,-7,24,127,20,-12,-8,21,-20,23,13,-10,-5,85,6,21,28,62,-5,29,3,-29,15,24,-115,-34,-104,-27,-19,37,-1,-1,25,-2,-43,33,11,-53,-5,9,107,33,31,53,37,-15,31, 
  /* [10][0][][] */ 20,46,9,-8,-16,1,-40,-27,65,11,-41,29,15,7,-4,-54,-34,3,25,-6,18,-22,-15,-29,24,-24,-80,34,-24,50,-12,-4,25,25,-32,0,15,10,-4,3,36,-10,54,-43,-32,0,9,28,18,10,9,-43,-21,-7,-4,36,-10,12,-2,-9,-13,-49,-11,19,-3,-1,-86,-37,-41,-20,55,-17,-12,17,33,13,60,-15,-95,19,-3,30,6,-6,-1,11,-71,-127,-29,25,3,29,48,-30,10,14, 
  /* [11][0][][] */ 13,-27,10,-16,-46,16,9,12,73,-21,-20,-47,31,0,17,-12,-39,62,13,-44,6,47,9,-18,25,28,70,7,36,-60,-35,28,17,115,-87,12,25,-7,45,12,-63,48,-20,13,-54,7,-2,-31,63,-15,-14,-7,-24,17,-89,78,-18,-4,12,-38,46,12,-8,-72,-1,-27,-127,-92,18,-14,-98,32,73,27,-22,8,38,66,-116,-36,-9,-13,-5,-1,-31,-12,62,88,34,-65,9,3,-29,18,90,24, 
  /* [12][0][][] */ 34,36,-41,-27,8,-21,-1,36,48,-34,16,-15,0,-20,-17,21,7,-34,-24,18,5,54,5,42,-29,-33,-127,-3,86,-29,37,11,-17,-77,77,-6,30,-19,-5,32,3,-50,6,46,43,3,22,-20,-64,-10,-41,100,65,-25,31,-71,10,17,-40,-32,23,58,69,4,-5,-15,31,15,105,35,8,19,2,-4,-24,7,-37,-39,43,-55,16,-50,27,-39,-5,4,14,-95,4,27,-38,14,20,64,7,49, 
  /* [13][0][][] */ -6,31,-67,26,20,6,-13,-1,39,70,-58,46,-42,-28,33,-39,26,46,59,8,-44,-40,-10,15,52,43,-26,18,25,39,65,-24,-9,54,-9,66,16,-49,-49,-36,12,-20,17,10,51,51,-19,48,-44,30,-13,-17,-5,-48,60,36,16,-42,-22,-20,44,16,11,-25,21,98,127,35,14,-7,-56,-18,43,57,-89,63,17,-70,119,-25,-25,-37,13,16,18,47,-22,-33,-2,-19,10,57,45,23,61,50, 
  /* [14][0][][] */ -19,69,30,14,-52,-43,43,46,-59,-29,79,-9,-69,7,78,-8,-35,35,-68,37,-16,39,-108,16,-68,12,-59,-109,15,4,26,98,-70,23,17,-16,-31,-51,-2,-61,36,-40,67,-19,-5,76,-64,25,-2,-36,100,40,-2,30,-35,26,-50,39,34,30,46,79,4,32,30,-43,10,-76,61,63,78,47,-42,44,31,5,32,-5,44,14,-72,124,12,-117,116,-15,-5,23,-127,-8,-13,-6,-49,-12,51,39, 
  /* [15][0][][] */ 73,-28,9,44,19,5,-16,-22,13,33,-46,-12,59,55,-17,-19,-4,18,-63,34,-3,-29,23,38,59,-26,67,13,22,-38,-23,36,58,34,-18,-73,54,45,54,56,57,33,-16,24,-46,-127,12,-38,-25,-13,-18,-1,-7,-37,-14,55,-14,5,-17,13,4,-58,-40,40,19,30,-68,42,-6,-28,-8,-12,-3,-116,-40,-90,-22,30,-115,23,72,-42,44,13,-55,4,-11,-31,31,84,-9,-66,-21,-30,26,-18, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0038743449840694666, 0.0021323221735656261, 0.0029914029873907566, 0.0028650506865233183, 0.0039655454456806183, 0.0055685862898826599, 0.0031999102793633938, 0.0026172983925789595, 0.0047963703982532024, 0.0042883311398327351, 0.0037031807005405426, 0.0036889039911329746, 0.0040829391218721867, 0.0046789343468844891, 0.0022094240412116051, 0.003060437273234129, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -28729, -573, -1842, -16393, 13617, -7234, 24023, -10450, 10104, -10828, 13860, 10224, -6757, -30125, -8229, 9185, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 9.1161062300670892e-05, 5.0172286137240008e-05, 7.0385955041274428e-05, 6.7412955104373395e-05, 9.3306953203864396e-05, 0.00013102556113153696, 7.5292009569238871e-05, 6.1583494243677706e-05, 0.000112855777842924, 0.00010090191062772647, 8.7133666966110468e-05, 8.6797743279021233e-05, 9.6069154096767306e-05, 0.00011009257286787033, 5.1986447942908853e-05, 7.2010290750768036e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -41,14,-29,-48,-19,-48,-58,-55,69,-60,6,-29,64,-127,5,-70, 
  /* [1][0][][] */ -72,88,-106,-124,-56,43,-7,51,-2,6,105,-35,47,127,38,30, 
  /* [2][0][][] */ -67,6,-99,9,5,-51,6,-48,-127,79,81,16,66,35,-64,96, 
  /* [3][0][][] */ -43,-48,21,-38,-70,-1,-49,-127,-2,16,26,-67,-69,-44,-113,-41, 
  /* [4][0][][] */ 97,8,7,27,-63,-22,-127,6,5,65,-3,41,20,30,-56,-52, 
  /* [5][0][][] */ -82,33,-105,-61,31,-64,-26,-86,66,-37,8,-19,-7,-127,-99,-46, 
  /* [6][0][][] */ -15,-25,-36,30,-84,77,50,-37,-11,-30,117,-37,13,15,-127,1, 
  /* [7][0][][] */ -29,95,127,-84,78,61,-4,-47,25,71,-92,-24,47,12,34,69, 
  /* [8][0][][] */ -75,-6,21,-13,42,54,127,103,-44,-28,-53,-102,27,53,-56,-45, 
  /* [9][0][][] */ 39,67,90,5,-127,-1,-111,-125,25,14,112,31,-39,-76,73,-50, 
  /* [10][0][][] */ -35,-115,20,-79,-107,43,27,24,-27,-40,-8,40,-34,67,-127,-7, 
  /* [11][0][][] */ 96,-39,-17,85,-73,-2,72,-12,127,122,-35,42,29,-65,-13,99, 
  /* [12][0][][] */ -68,-77,127,-22,84,-46,-15,78,57,-14,90,114,-53,17,-110,48, 
  /* [13][0][][] */ -11,-38,12,22,18,7,127,31,-80,18,10,4,-20,109,79,-52, 
  /* [14][0][][] */ 127,-97,103,-12,84,60,96,85,60,57,68,30,59,-29,30,-43, 
  /* [15][0][][] */ -10,108,5,-40,54,127,-76,48,-39,-10,-36,-11,-46,122,-30,-48, 
  /* [16][0][][] */ -27,78,127,-27,14,70,-3,-33,0,10,-12,67,59,-24,91,119, 
  /* [17][0][][] */ 2,49,24,-127,17,-43,-7,-80,-70,60,-30,74,-65,-31,76,-12, 
  /* [18][0][][] */ -90,20,-79,-99,119,109,-67,-76,28,87,127,67,0,112,-54,-18, 
  /* [19][0][][] */ 57,127,66,39,35,-15,-4,-14,-26,110,48,121,42,59,-52,51, 
  /* [20][0][][] */ 114,26,38,76,-74,-34,-36,65,-48,-44,-127,-24,78,-46,50,-31, 
  /* [21][0][][] */ -62,-64,-28,105,-13,27,-127,32,-2,14,13,17,5,30,-67,-9, 
  /* [22][0][][] */ -5,-5,-39,-53,127,5,-24,55,37,74,24,43,-17,25,-2,16, 
  /* [23][0][][] */ -73,36,-34,17,27,99,126,107,-39,127,-15,-29,3,39,-67,-32, 
  /* [24][0][][] */ 24,-66,19,-1,127,41,87,-19,29,1,30,10,-61,29,13,-10, 
  /* [25][0][][] */ 127,-77,93,26,22,-21,-24,120,117,-26,-75,-6,125,-57,94,26, 
  /* [26][0][][] */ 56,26,118,90,61,-8,-70,-24,4,73,-2,127,23,-72,21,-75, 
  /* [27][0][][] */ -81,33,-57,22,-45,103,47,-119,94,-71,121,12,36,-68,111,127, 
  /* [28][0][][] */ -47,38,-101,-102,44,-66,5,-45,-117,127,-40,47,-16,69,-36,69, 
  /* [29][0][][] */ 96,78,-56,53,7,58,-54,-19,46,20,14,65,-127,-3,-15,69, 
  /* [30][0][][] */ -16,87,-105,-53,76,-33,20,12,-47,49,-73,-11,18,49,-6,127, 
  /* [31][0][][] */ 33,-118,73,40,78,-57,-93,44,-5,10,32,-31,-83,73,27,127, 
  /* [32][0][][] */ -41,58,14,37,-98,67,45,27,59,-127,14,-69,11,30,38,31, 
  /* [33][0][][] */ -70,-16,38,77,-7,18,-40,1,-38,-60,15,-18,2,-14,-4,127, 
  /* [34][0][][] */ -14,25,-73,-80,43,-12,-2,56,21,-5,-4,-19,-36,-22,-27,127, 
  /* [35][0][][] */ 40,-14,7,-35,-1,25,-56,-18,-5,-127,-58,-8,4,-37,22,-6, 
  /* [36][0][][] */ -23,6,-127,-22,45,107,-4,50,-37,-1,41,23,-6,31,-37,52, 
  /* [37][0][][] */ 33,34,66,-90,39,-127,64,-26,-95,72,-85,-39,10,15,97,68, 
  /* [38][0][][] */ -61,127,36,-47,42,32,92,-92,40,-2,-119,27,-55,-115,-114,21, 
  /* [39][0][][] */ 107,30,-98,-116,-19,-52,-8,-66,7,12,2,-16,53,4,-127,-89, 
  /* [40][0][][] */ -43,5,-73,-83,-74,-15,3,-127,12,9,12,-59,45,72,36,61, 
  /* [41][0][][] */ -39,-91,-10,127,-11,-31,-58,-19,-5,-45,56,-58,-53,-16,5,33, 
  /* [42][0][][] */ -37,63,-32,-127,32,0,17,-12,46,9,-49,8,82,-13,-3,29, 
  /* [43][0][][] */ 6,65,-19,11,127,48,33,-8,-10,16,-5,-70,-91,-47,-34,5, 
  /* [44][0][][] */ 101,-10,33,41,-33,-10,-1,30,33,-56,19,21,127,-17,-30,-27, 
  /* [45][0][][] */ 13,-78,-51,52,-20,-93,26,45,52,1,-2,31,-102,127,30,-36, 
  /* [46][0][][] */ -19,-96,67,80,-23,-41,-101,33,5,-47,10,-11,50,66,69,127, 
  /* [47][0][][] */ -38,-55,10,59,-4,3,57,25,1,-71,-127,-45,46,-20,-53,21, 
  /* [48][0][][] */ -52,85,-9,-35,-1,70,-14,-114,10,-34,9,-33,45,-127,-32,-10, 
  /* [49][0][][] */ -64,-2,41,-26,1,-7,102,127,-25,-19,-20,8,-33,27,-46,26, 
  /* [50][0][][] */ 54,28,-91,34,27,-127,-37,4,-84,47,-40,0,19,-88,-94,-34, 
  /* [51][0][][] */ -92,35,-42,119,-6,33,-44,-68,-49,-82,-6,-59,23,46,-47,127, 
  /* [52][0][][] */ -127,0,28,-15,5,33,63,-2,42,-72,-27,-35,-109,-67,-113,6, 
  /* [53][0][][] */ -51,-53,-56,-127,-35,15,11,58,53,-48,-43,6,-22,45,59,97, 
  /* [54][0][][] */ 11,-30,4,-10,-56,62,75,-22,-8,-84,45,7,-27,-20,-127,47, 
  /* [55][0][][] */ -18,-45,-32,43,84,-43,32,100,-74,-48,-127,-31,57,-18,-30,29, 
  /* [56][0][][] */ 67,-39,-66,-47,-108,41,-127,4,-6,-19,-40,-4,109,-15,27,9, 
  /* [57][0][][] */ -63,4,13,-55,127,54,60,68,-31,65,14,-23,-62,83,-118,-30, 
  /* [58][0][][] */ 22,2,15,-24,33,-20,-39,-53,32,-127,-66,3,-59,-38,-41,50, 
  /* [59][0][][] */ -80,-27,-28,-9,11,55,-63,-7,52,127,-74,-11,-25,9,10,28, 
  /* [60][0][][] */ 11,-46,11,20,-127,-37,49,4,8,39,-13,48,-4,-47,41,45, 
  /* [61][0][][] */ 30,23,-65,-8,-18,-17,-127,-80,-38,8,22,92,73,-20,68,40, 
  /* [62][0][][] */ 62,-12,58,-13,-26,41,36,118,-63,118,17,82,67,59,49,127, 
  /* [63][0][][] */ 4,-108,-24,-18,-55,25,54,-15,-4,-13,5,-28,-28,127,106,29, 
  /* [64][0][][] */ 8,-36,-127,-32,11,71,17,-19,-21,-110,15,25,50,-54,-39,106, 
  /* [65][0][][] */ -19,-22,78,37,77,-27,86,57,-32,-2,-127,-70,16,78,-63,-4, 
  /* [66][0][][] */ -56,-86,26,-110,-35,-127,72,-47,19,-38,8,71,-61,-47,-60,73, 
  /* [67][0][][] */ -11,-71,-84,1,-74,108,-22,-127,-68,-21,-22,-80,26,-24,-57,17, 
  /* [68][0][][] */ 127,41,44,0,-72,-7,-79,-67,-58,-107,-23,0,23,-30,50,-42, 
  /* [69][0][][] */ 29,5,24,-25,-16,-32,-12,17,-8,127,-26,4,10,31,62,-14, 
  /* [70][0][][] */ 30,-27,-16,40,-127,27,-32,-93,67,92,22,53,11,-54,-12,29, 
  /* [71][0][][] */ 104,-68,111,64,-54,-68,30,-13,127,-12,-63,28,29,-63,45,46, 
  /* [72][0][][] */ -16,-74,30,105,77,-3,-127,91,75,-3,24,-4,-33,-70,-81,99, 
  /* [73][0][][] */ 46,23,51,-127,63,-90,-47,40,12,115,-33,4,24,-98,12,-24, 
  /* [74][0][][] */ 77,19,36,49,-127,-28,49,10,-88,-30,15,-58,27,-52,12,26, 
  /* [75][0][][] */ 112,118,-112,27,89,67,-28,-42,-19,-27,49,101,-127,58,59,85, 
  /* [76][0][][] */ -90,-29,17,-57,-50,-11,107,-17,-44,36,92,34,-65,-127,-19,99, 
  /* [77][0][][] */ -74,127,-30,-12,-30,-64,70,57,23,-68,-17,53,-22,50,-2,52, 
  /* [78][0][][] */ 99,26,-59,16,-70,31,-127,-38,-12,10,-82,10,41,-99,28,40, 
  /* [79][0][][] */ -86,-51,126,40,-49,-110,-65,-64,-44,47,-19,-11,-36,127,-67,111, 
  /* [80][0][][] */ 63,109,12,-127,-10,41,83,-42,-6,14,-40,34,85,-49,6,-6, 
  /* [81][0][][] */ 25,-76,3,-85,116,30,-1,127,89,30,-8,-56,-8,27,-75,-91, 
  /* [82][0][][] */ 104,37,108,21,122,-127,19,39,-10,117,-55,37,-7,-61,20,-109, 
  /* [83][0][][] */ -61,99,38,6,35,50,127,109,-5,70,-15,-86,-75,109,-48,-74, 
  /* [84][0][][] */ 26,-75,-27,115,-4,-51,-101,35,-80,47,-34,23,-127,68,4,-89, 
  /* [85][0][][] */ -61,79,18,-48,-22,-56,-35,-45,17,47,8,-66,-127,-35,-60,37, 
  /* [86][0][][] */ -12,58,90,116,57,-30,61,26,3,25,-56,-77,33,75,-127,-66, 
  /* [87][0][][] */ -35,63,120,-59,-127,-28,37,14,47,-23,-1,23,-52,18,0,9, 
  /* [88][0][][] */ -26,-91,-127,25,44,22,-19,45,-33,-112,-112,-115,115,6,38,38, 
  /* [89][0][][] */ 7,24,7,-101,-8,-43,-24,36,127,-9,14,-100,-1,-50,37,-57, 
  /* [90][0][][] */ -4,61,5,4,-40,52,41,126,-17,-80,-22,127,40,5,-33,78, 
  /* [91][0][][] */ -40,-10,-10,44,61,38,-15,-114,-12,28,-32,3,-70,-127,-49,-3, 
  /* [92][0][][] */ -51,24,-9,-40,-127,-5,-73,17,-14,60,68,47,-2,-18,47,10, 
  /* [93][0][][] */ 124,53,102,51,-127,-72,8,21,-35,-50,-30,-68,30,-45,-5,-14, 
  /* [94][0][][] */ -47,-125,19,-127,0,52,-24,27,80,-14,19,31,13,84,-48,45, 
  /* [95][0][][] */ -35,-65,-46,-65,93,116,-46,36,85,52,-88,49,-7,127,-97,57, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0021492352243512869, 0.0016637709923088551, 0.0033722613006830215, 0.0031113617587834597, 0.0014756245072931051, 0.001652868464589119, 0.0019197817891836166, 0.0023876440245658159, 0.0021059550344944, 0.0010400767205283046, 0.0037011357489973307, 0.0020588156767189503, 0.0019364911131560802, 0.0027245050296187401, 0.0029382195789366961, 0.002181139076128602, 0.0030290321446955204, 0.0018057964043691754, 0.0017151834908872843, 0.0017898161895573139, 0.0020254319533705711, 0.0013786928029730916, 0.0013350212248042226, 0.0020485161803662777, 0.0022890609689056873, 0.0027995193377137184, 0.00079568877117708325, 0.0019291375065222383, 0.0025942109059542418, 0.00213627889752388, 0.0015326455468311906, 0.0022057814057916403, 0.001557361101731658, 0.0037589045241475105, 0.0027572244871407747, 0.0026677781715989113, 0.0025563335511833429, 0.0018959240987896919, 0.0019494097214192152, 0.0027405309956520796, 0.0029256539419293404, 0.0028988488484174013, 0.0027113312389701605, 0.0031919546891003847, 0.0038339626044034958, 0.0024999452289193869, 0.0022600123193114996, 0.0024419913534075022, 0.0021003563888370991, 0.0029110114555805922, 0.0020729009993374348, 0.0031566107645630836, 0.002451807027682662, 0.0021633685100823641, 0.0045953686349093914, 0.0025813027750700712, 0.0025128298439085484, 0.0018234448507428169, 0.0021396083757281303, 0.0034075574949383736, 0.0028373613022267818, 0.0018413793295621872, 0.0024540729355067015, 0.0019930293783545494, 0.0026372962165623903, 0.0015161248156800866, 0.0016797119751572609, 0.0030143172480165958, 0.0017356495372951031, 0.0043169865384697914, 0.0017208835342898965, 0.0021280501969158649, 0.0018350161844864488, 0.0027721473015844822, 0.0022512192372232676, 0.0016668325988575816, 0.002170276828110218, 0.003033994697034359, 0.0021466168109327555, 0.0015902123413980007, 0.002129651140421629, 0.0018742919201031327, 0.0014211448142305017, 0.0019771764054894447, 0.0018768452573567629, 0.0030836057849228382, 0.0018876718822866678, 0.0029076959472149611, 0.00061079504666849971, 0.0029158287215977907, 0.0034757668618112803, 0.0029044628608971834, 0.0013468348188325763, 0.0023310016840696335, 0.0033238306641578674, 0.0020162975415587425, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 4732, 3458, 563, -770, 7471, 7092, 6827, 1418, -431, 11373, 834, -3287, 3646, 2208, 470, -610, 2395, 6326, -594, 1, 4326, 8496, 9985, -1767, -3336, -403, 16387, -316, 1232, 1457, 8186, -1828, 7085, 1671, 3318, -3381, 1125, -4541, -240, 1493, 1619, 997, 1956, -728, 998, 2172, 3435, 3768, 4122, 2058, 5080, 2015, -2486, 1801, 615, 2069, 1762, 3113, 4831, 752, -930, 5427, 3437, 4694, 2662, 6858, -5397, 2113, 4926, -552, 5979, 2038, 3503, 2090, 3284, 2322, -884, 1769, 2669, 5705, 2811, 3455, 7342, 782, 2931, 2851, 1542, -927, 22890, -801, 825, -959, 8972, 2315, -25, -752, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00015178155445028096, 0.00011749748955480754, 0.0002381531085120514, 0.00021972808463033289, 0.00010421036131447181, 0.00011672754044411704, 0.00013557728379964828, 0.0001686182658886537, 0.00014872505562379956, 7.3451461503282189e-05, 0.00026137862005271018, 0.00014539601397700608, 0.00013675731315743178, 0.00019240779511164874, 0.00020750057592522353, 0.00015403464203700423, 0.00021391386690083891, 0.00012752749898936599, 0.00012112830154364929, 0.00012639895430766046, 0.00014303841453511268, 9.7364929388277233e-05, 9.4280789198819548e-05, 0.00014466865104623139, 0.0001616562221897766, 0.00019770539074670523, 5.6192489864770323e-05, 0.00013623798440676183, 0.0001832062698667869, 0.00015086655912455171, 0.00010823725460795686, 0.00015577492013107985, 0.00010998269863193855, 0.00026545830769464374, 0.00019471847917884588, 0.0001884016819531098, 0.00018053132225759327, 0.00013389241939876229, 0.00013766964548267424, 0.00019353957031853497, 0.00020661317103076726, 0.0002047201560344547, 0.00019147744751535356, 0.00022541964426636696, 0.0002707590174395591, 0.00017654911789577454, 0.00015960476594045758, 0.00017245634808205068, 0.00014832966553512961, 0.00020557909738272429, 0.00014639073924627155, 0.00022292361245490611, 0.00017314954311586916, 0.00015277967031579465, 0.00032453041058033705, 0.00018229467968922108, 0.00017745903460308909, 0.00012877385597676039, 0.00015110168897081167, 0.0002406457788310945, 0.00020037783542647958, 0.00013004041102249175, 0.00017330955597572029, 0.00014075011131353676, 0.00018624900258146226, 0.00010707054025260732, 0.00011862326209666207, 0.00021287468553055078, 0.00012257363414391875, 0.00030487074400298297, 0.00012153084389865398, 0.00015028544294182211, 0.00012959103332832456, 0.00019577234343159944, 0.00015898379206191748, 0.00011771370918722823, 0.00015326753782574087, 0.00021426432067528367, 0.00015159664326347411, 0.00011230268864892423, 0.00015039849677123129, 0.00013236473023425788, 0.00010036294406745583, 0.00013963055971544236, 0.00013254504301585257, 0.00021776791254524142, 0.00013330964429769665, 0.00020534495706669986, 4.3135074520250782e-05, 0.00020591930660884827, 0.00024546281201764941, 0.00020511663751676679, 9.5115079602692276e-05, 0.00016461811901535839, 0.00023473288456443697, 0.0001423933426849544, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 64,124,12,28,-41,5,42,47,81,-77,-92,56,-16,-35,33,-28,-98,23,-6,36,34,72,40,89,10,-6,-60,28,2,15,24,-32,-39,14,-31,89,4,82,-15,-9,18,-39,-5,45,-127,8,2,-32,-7,-116,-17,2,22,55,-39,-13,-55,-82,-49,-125,-127,-9,-88,10,-31,48,-11,-19,-18,62,32,2,-35,5,31,19,-12,-33,-127,15,21,-80,57,-13,-110,-44,1,16,-127,18,-102,48,75,-3,87,-5, -48,-45,11,65,-19,85,-35,3,70,9,-127,55,-26,-42,-88,86,-105,77,35,106,127,14,83,127,30,8,9,72,11,127,5,-127,65,86,12,31,78,104,-20,-127,127,-21,101,127,-70,-30,127,-79,-15,-127,-113,-20,16,127,-23,-127,11,30,-127,-61,-55,-124,-20,106,-33,71,33,-51,-6,127,127,-1,-81,21,-38,-87,32,-62,-72,127,10,-59,127,-59,-106,-8,127,44,74,82,-109,6,127,-25,127,12, 24,-127,9,18,-14,-10,-1,43,73,20,-49,9,-21,20,18,-80,-46,14,13,38,32,35,22,83,26,-30,16,47,15,22,13,-77,-34,-71,-28,42,-11,20,-1,48,-9,30,-22,37,-91,7,-2,-9,42,-94,12,-7,10,9,-6,-11,90,-106,-8,-87,-75,24,-53,-5,61,25,-51,-25,-11,29,23,28,-12,-38,2,29,-9,-15,-86,1,27,-64,38,5,-28,-42,10,-48,-92,9,-51,29,40,41,54,-16, 
  /* [0][1][][] */ 125,-22,69,127,-8,-47,102,51,-10,-127,-92,127,-5,-127,-55,53,-52,-57,103,19,-100,8,-127,-68,-16,58,-127,127,-81,73,127,51,5,64,11,127,-118,25,-25,-115,44,-127,16,65,-91,-67,-8,-127,-127,-95,-126,25,127,-37,51,-4,-127,-4,-55,39,-84,-54,-21,51,-85,-17,82,-72,-41,35,-54,-127,-127,66,127,-100,120,67,-112,-48,127,-112,-14,103,-54,-22,-15,116,-5,7,-51,54,-9,-82,68,-22, -127,6,-39,122,-98,-127,-127,-127,68,0,-33,47,-77,-107,-31,127,-127,-127,127,127,19,-127,-103,80,-127,127,20,87,-86,-23,-100,50,-127,85,127,-34,27,62,127,-98,-47,34,25,25,-8,-127,-68,-102,-8,-97,-47,127,1,70,59,-34,10,17,76,-19,-39,-11,-127,127,18,-127,127,127,7,29,-108,-95,-37,42,-102,-127,127,127,124,-69,-86,-29,-67,63,-127,-69,95,127,113,81,-127,-127,-122,-52,64,127, 58,-13,127,97,2,-23,24,48,-22,82,-75,67,-13,-27,-127,59,26,-28,65,-14,-106,4,-98,-68,4,40,114,-19,127,99,36,-99,-23,-127,-22,107,-127,-27,-39,-31,7,93,13,77,-9,-50,-10,-70,127,-83,-127,2,53,-51,-127,43,93,-18,-103,100,-18,-50,0,47,127,-39,-5,-31,-62,9,-29,-45,-95,-127,6,-39,-6,-21,-121,-42,-68,-127,-3,127,-125,6,-4,-13,-32,2,4,47,1,127,18,-25, 
  /* [0][2][][] */ 37,-109,71,-5,8,10,20,86,-20,-66,-10,-29,15,-11,8,51,-8,19,6,34,0,46,5,-30,11,37,-7,27,-15,22,12,9,-17,-4,-28,75,58,66,16,-63,-13,35,-22,-83,-22,-106,-14,-7,-44,32,-1,26,-1,9,-70,-17,-10,-2,21,94,-59,-10,78,-5,-32,45,-34,-30,41,43,10,58,-11,30,7,-8,-29,-30,-24,-14,15,-12,-13,-29,-67,57,-37,-62,-94,71,-22,51,-17,6,-1,-18, -77,45,120,-2,127,71,-25,31,-127,-14,-72,-5,127,-19,-62,29,-14,58,9,-29,-15,13,43,50,50,-62,-10,70,13,98,3,18,-38,36,31,34,73,127,46,-125,-30,13,-127,-50,-78,-18,-7,-42,-26,-50,10,99,84,-31,-55,-80,-21,127,-13,22,58,-127,96,50,-36,27,-39,-20,127,-3,-3,90,-68,33,-23,-65,15,-90,-19,-32,-3,-49,-2,-73,-60,127,39,-79,76,127,32,30,-45,-12,-9,-1, 6,106,64,-17,8,-7,-2,49,21,26,5,-3,-1,-11,18,42,-7,5,21,20,-17,45,-14,-34,-2,46,13,64,12,27,1,-71,-20,-33,-26,31,16,-20,13,5,-5,3,-4,-51,-61,-72,-4,-2,23,48,-4,-18,7,-8,-8,19,-30,-17,23,127,-34,6,41,-29,47,10,-43,9,23,24,24,63,11,-14,-16,-8,-36,-8,-45,-10,-7,-87,-16,0,-67,36,-36,-68,-90,76,-2,38,5,7,-4,-28, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0079478966072201729, 0.0072647836059331894, 0.0054940851405262947, 0.0054611163213849068, 0.015532526187598705, 0.015679337084293365, 0.015318307094275951, 0.0077962158247828484, 0.0084209451451897621, 0.0077119111083447933, 0.0044584856368601322, 0.013121439144015312, 0.012731706723570824, 0.0041925078257918358, 0.0065623940899968147, 0.0066649792715907097, 0.0043229809962213039, 0.011032048612833023, 0.0070947096683084965, 0.0044954880140721798, 0.0075656971894204617, 0.01283715758472681, 0.011249013245105743, 0.0082689104601740837, 0.031421493738889694, 0.0067574162967503071, 0.011273267678916454, 0.0042739701457321644, 0.0085474234074354172, 0.0031519955955445766, 0.014847084879875183, 0.01114333514124155, 0.0081286691129207611, 0.0079488577321171761, 0.01173500157892704, 0.014087619259953499, 0.0084474068135023117, 0.0092376274988055229, 0.011728527955710888, 0.0048666591756045818, 0.0092709995806217194, 0.010584140196442604, 0.010413099080324173, 0.006792719941586256, 0.0037437982391566038, 0.0043088505044579506, 0.010811633430421352, 0.004343841690570116, 0.0071736881509423256, 0.0026758115272969007, 0.005964301060885191, 0.0058497148565948009, 0.0079629495739936829, 0.0069270133972167969, 0.0087696714326739311, 0.0068212961778044701, 0.0078358910977840424, 0.0081796878948807716, 0.0068417373113334179, 0.0049914312548935413, 0.0059267370961606503, 0.0078713521361351013, 0.0069668600335717201, 0.0045972177758812904, 0.0058194948360323906, 0.011749081313610077, 0.017618529498577118, 0.010660886764526367, 0.010597558692097664, 0.0068928510881960392, 0.013574090786278248, 0.0090534137561917305, 0.0047339447773993015, 0.0086192982271313667, 0.013398096896708012, 0.0048054857179522514, 0.0065816380083560944, 0.010689262300729752, 0.0047644330188632011, 0.011192986741662025, 0.0095880646258592606, 0.0032705087214708328, 0.011353390291333199, 0.0073104840703308582, 0.0033706936519593, 0.0090951435267925262, 0.0067060492001473904, 0.0074193831533193588, 0.0089656580239534378, 0.0055876313708722591, 0.0036283654626458883, 0.014677305705845356, 0.010111805982887745, 0.012416119687259197, 0.0045781834051012993, 0.014130458235740662, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { -1583, -726, -4334, -6113, 1032, 2399, 198, -2296, -2877, 4095, 9550, -2481, 153, 9983, 7428, -4614, 13988, 1440, -5548, 279, 18, -1174, 4936, -2256, 464, -4388, 396, -5769, -1355, -9543, -4035, 664, 8054, -1138, -1641, -481, -256, -2277, -669, 8550, 519, -796, 1620, -2117, 14267, 14246, -612, 14095, 34, 9461, 10505, -3135, -549, -2628, 2000, 8617, -532, 1968, 10892, 2158, 8796, 11464, 4294, -7213, -1442, 667, -1320, 4320, -2907, -2847, 1019, 2644, 11719, -25, -373, 10365, -482, 626, 12502, 1074, -2557, 16725, -4109, 1532, 19090, -1292, -4041, -823, 3678, -6054, 14728, -1009, -553, -798, -4601, -2318, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00018700934015214443, 0.00017093609494622797, 0.0001292725937673822, 0.00012849686027038842, 0.0003654712054412812, 0.00036892559728585184, 0.0003604307712521404, 0.00018344038107898086, 0.00019813989638350904, 0.00018145673675462604, 0.00010490554996067658, 0.00030873974901624024, 0.0002995695685967803, 9.864724415820092e-05, 0.00015440928109455854, 0.00015682305092923343, 0.00010171720350626856, 0.00025957761681638658, 0.00016693434736225754, 0.00010577619104878977, 0.000178016402060166, 0.00030205078655853868, 0.00026468266150914133, 0.00019456259906291962, 0.00073932926170527935, 0.00015899803838692605, 0.00026525335852056742, 0.00010056400788016617, 0.00020111585035920143, 7.4164607212878764e-05, 0.00034934317227452993, 0.00026219611754640937, 0.00019126280676573515, 0.00018703195382840931, 0.00027611770201474428, 0.00033147339127026498, 0.00019876251462846994, 0.00021735594782512635, 0.00027596537256613374, 0.00011450963211245835, 0.00021814116917084903, 0.00024903859593905509, 0.00024501408915966749, 0.00015982870536390692, 8.8089371274691075e-05, 0.00010138472134713084, 0.00025439137243665755, 0.00010220803960692137, 0.00016879267059266567, 6.2960272771306336e-05, 0.00014033650222700089, 0.00013764035247731954, 0.00018736351921688765, 0.00016298855189234018, 0.00020634521206375211, 0.00016050109115894884, 0.00018437391554471105, 0.00019246325246058404, 0.00016098206106107682, 0.00011744544462999329, 0.00013945263344794512, 0.00018520829326007515, 0.00016392611723858863, 0.00010816983558470383, 0.00013692928769160062, 0.00027644899091683328, 0.00041455365135334432, 0.00025084440130740404, 0.00024935431429184973, 0.00016218473319895566, 0.00031939038308337331, 0.00021302149980328977, 0.00011138693662360311, 0.00020280701573938131, 0.00031524934456683695, 0.00011307025124551728, 0.0001548620784888044, 0.00025151207228191197, 0.00011210430966457352, 0.00026336440350860357, 0.00022560152865480632, 7.6953147072345018e-05, 0.0002671385882422328, 0.00017201139417011291, 7.9310440924018621e-05, 0.0002140033757314086, 0.00015778939996380359, 0.0001745737245073542, 0.00021095667034387589, 0.00013147368736099452, 8.5373307229019701e-05, 0.00034534838050603867, 0.00023792484716977924, 0.00029214398819021881, 0.00010772196401376277, 0.0003324813733343035, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -120,45,59,-27,-45,-35,-96,3,-40,1,2,-23,20,55,35,-49,30,-1,103,5,37,-53,127,72,41,15,-1,34,-56,-111,-103,-18,-48,-42,32,57,-3,36,-16,42,-28,-3,-117,44,-66,-33,8,118,-22,12,-74,-28,-40,-9,21,-49,-108,9,-26,93,49,10,11,-2,-31,-74,-72,31,-46,-42,30,2,-4,-11,-91,-63,-62,35,-63,26,-53,95,99,-94,7,71,11,49,31,-33,6,-9,-43,-51,-71,9, 
  /* [1][0][][] */ 34,28,6,-48,-68,-52,-14,6,-34,13,48,-63,-9,-4,-78,-47,-4,-4,-79,12,-22,-79,10,57,-14,-60,-10,-41,56,-110,102,-70,57,29,-16,38,51,39,-10,-43,12,20,5,-22,1,60,-127,-63,-64,-56,0,-25,55,-62,-16,41,8,-6,-19,12,40,69,5,-103,-20,-25,-54,8,24,-45,-83,-15,-61,-21,16,-73,23,13,43,-82,-31,-42,-88,-42,37,-65,-28,9,-75,-17,-77,28,15,63,-63,48, 
  /* [2][0][][] */ 83,-32,-8,17,50,-95,47,12,21,-22,-4,-4,-78,-27,-15,-52,-89,-53,-58,26,23,-59,-47,42,-6,-66,-3,-3,-47,66,-50,109,-49,116,-37,43,-6,2,-23,-2,-127,82,68,59,-57,-11,-27,-12,32,12,-42,-66,41,-32,-27,74,58,-9,35,7,-6,42,-4,17,70,16,-34,12,63,52,-34,31,40,34,56,34,37,-72,63,57,104,-10,-42,5,-60,66,-2,38,14,29,-44,46,-63,46,-33,25, 
  /* [3][0][][] */ 7,-13,-31,4,43,-11,-2,-52,2,60,58,62,15,-5,-68,31,12,-27,20,-3,30,127,33,-46,10,22,-27,9,78,-25,61,-25,-26,30,-33,0,2,71,28,12,-91,-34,-57,54,-32,40,23,4,-18,-53,-19,-35,31,-87,-38,-45,34,93,-36,5,-11,-22,-26,1,45,47,-67,2,-5,23,16,-54,-31,-45,29,-18,2,4,-46,-11,-14,7,-50,0,-1,-16,20,-41,-3,21,31,-5,43,23,-38,47, 
  /* [4][0][][] */ 26,6,-27,6,27,36,-47,25,-34,78,112,-5,2,-3,0,-45,-7,-9,-29,63,41,-48,57,74,-68,7,-127,23,-26,-46,30,12,-63,-53,3,72,-16,48,26,18,-49,-38,25,-12,-15,19,-21,61,-33,60,-6,13,31,-23,-75,24,59,-14,9,-9,46,-14,15,8,-30,15,-53,10,-45,47,-45,50,39,-54,-34,-53,12,-45,-12,31,-33,89,-58,9,-25,41,38,-54,35,-2,20,30,-69,-35,25,16, 
  /* [5][0][][] */ -88,28,63,-12,9,1,75,-61,-48,46,-18,-40,42,-28,2,-31,-4,-45,60,38,-127,-11,-77,17,-41,-12,51,-1,37,-78,-16,51,52,105,-3,3,-10,-3,51,-27,-10,82,90,-78,-13,78,46,-5,-6,14,-23,43,26,-22,30,-103,19,-58,-47,-80,75,89,-69,-25,60,-40,-51,-72,-81,-33,-64,-28,-8,13,-32,-41,20,-41,-29,-30,86,-34,20,-63,-84,-5,24,-4,-44,31,32,-19,-7,46,12,99, 
  /* [6][0][][] */ 27,-26,-64,34,-73,-86,90,101,-79,53,-4,66,-92,-61,68,54,-22,-39,9,22,-19,-31,-57,-61,-34,52,60,20,28,17,84,-43,34,13,16,-118,1,-27,45,68,13,-1,-59,-49,-7,-48,-86,16,21,-92,-15,63,68,16,-6,-76,55,29,18,3,-74,63,-101,-11,0,21,6,65,12,8,-23,-79,-37,28,84,45,68,-44,64,-89,-28,-57,-70,86,9,-48,38,12,-37,76,44,38,-32,6,-25,127, 
  /* [7][0][][] */ 37,78,-59,-59,2,-22,12,20,-32,22,-48,-48,-47,11,-5,-18,-56,-35,-46,47,7,120,18,45,-9,-4,13,41,54,51,82,-31,54,37,-25,30,14,12,-4,33,-76,-19,7,-26,31,-61,69,-29,41,-71,-84,-33,-47,3,-5,-18,42,11,-99,21,-28,127,41,-16,-5,4,-40,30,-23,-4,-89,50,20,54,-40,52,-45,55,2,-60,-9,-43,58,-88,53,17,-21,-6,-13,97,-93,44,50,-41,-56,1, 
  /* [8][0][][] */ -5,97,-67,33,-40,-26,-80,27,-97,-23,15,-3,-42,31,18,86,3,-54,5,6,30,-12,4,4,-43,68,4,46,-25,-13,-46,-22,-20,-53,-39,-63,-33,24,54,11,-15,-24,18,20,-31,-42,7,-14,-13,-18,67,70,10,-35,-70,100,-33,34,-4,-49,-31,24,16,63,-31,-67,-42,6,-42,3,3,23,-35,-44,-123,-18,-39,14,-62,-32,-29,-3,-37,-49,-7,-6,23,13,16,72,-74,-7,-98,-127,10,-57, 
  /* [9][0][][] */ -21,14,-86,57,0,-49,71,59,1,51,-16,102,-50,-19,15,127,26,15,69,0,32,20,44,-111,-50,7,21,-9,26,-8,50,52,-33,-4,7,-99,1,-1,-27,-10,-30,28,41,-6,-17,12,14,25,32,76,11,-23,-91,-85,14,3,20,0,89,-13,-89,46,-47,-38,105,-16,-39,-2,-49,38,66,56,-4,98,-22,-18,-44,42,-72,7,60,-24,75,-8,40,-20,-8,-45,-64,14,7,16,75,28,-52,-14, 
  /* [10][0][][] */ 71,9,-63,-4,-48,-29,63,-8,-9,-21,-12,-6,-78,-15,-5,-12,-61,-43,14,17,27,23,23,15,-37,78,35,2,-41,-59,-33,-9,71,-37,30,11,72,-88,86,127,10,-41,9,-1,-11,-91,-14,54,39,80,-44,-40,-7,13,7,53,20,-63,53,29,3,61,-58,-16,4,-51,21,57,8,-27,-18,50,95,37,16,-80,35,-51,52,-16,-46,27,29,5,-38,-26,9,38,-38,-11,32,51,33,62,-45,-3, 
  /* [11][0][][] */ -47,-30,14,-49,40,-26,-38,-41,63,-36,6,-3,-19,1,2,-2,-48,-12,39,-11,-34,14,-54,-61,1,-2,-45,39,19,-25,21,-33,17,-4,10,7,-63,33,-88,5,-65,61,-38,66,23,11,-6,-22,22,-35,-59,-28,-14,16,47,-42,-2,-52,6,-44,-30,-58,6,-99,7,-67,26,69,127,24,77,12,-25,-27,51,-32,61,35,8,50,23,2,-22,54,72,0,-18,-26,-47,-73,-15,33,42,29,40,50, 
  /* [12][0][][] */ 42,-27,9,-32,52,109,-9,38,59,58,2,54,15,41,19,8,-63,49,16,32,127,4,54,-79,29,16,-70,-78,-10,63,6,-5,30,-12,14,-23,34,16,-26,-39,28,-26,39,66,4,43,3,-2,-67,14,-7,11,-38,-14,6,23,-31,67,3,57,15,-103,18,-94,-9,71,-15,-43,3,-18,63,11,-1,13,-3,46,-20,52,-78,-13,-14,29,102,31,-6,79,-28,-59,59,3,-60,56,80,9,-5,-92, 
  /* [13][0][][] */ -8,19,-16,-38,2,-21,2,-25,43,-40,-21,-62,55,-98,-50,-87,-16,-22,-86,-15,-75,-37,13,93,-30,2,95,-6,26,-30,66,42,27,-5,-116,127,-61,-33,27,-59,103,6,-2,60,-3,-85,53,-26,64,-14,-62,2,7,-1,1,68,85,-50,-42,6,39,29,24,-95,0,31,-49,32,-41,-23,-70,9,-65,30,-43,-82,-115,27,28,89,-9,70,42,-81,64,60,39,-30,-22,-18,-1,38,-62,14,-17,-2, 
  /* [14][0][][] */ -9,34,-118,-27,123,86,-119,-9,68,-60,80,-6,6,-22,-62,-96,-71,44,31,127,16,-42,-1,35,-7,37,-35,96,-3,-19,-47,9,67,6,-40,19,1,88,94,15,65,-1,22,29,-2,-66,61,-50,28,-15,-20,-37,49,23,-45,21,27,68,-112,-11,-29,-74,-14,-113,3,-55,-63,9,-67,68,-6,48,-5,-50,-36,-33,56,-32,-56,-28,40,10,-9,-26,-17,85,-21,-39,-20,102,74,11,4,-51,-35,-68, 
  /* [15][0][][] */ -90,-48,61,-44,26,-2,-19,-81,-7,26,-21,63,3,-24,33,82,-107,-15,12,-66,11,-42,-10,-102,52,-3,39,-67,-51,-99,-37,31,-41,41,72,-121,-19,-46,27,-35,-9,-13,58,-40,-4,15,49,101,-62,-14,21,-59,-51,61,15,-48,-93,-35,84,22,-15,10,-95,15,-76,-3,16,5,47,-74,75,-17,63,-32,-33,-47,-5,14,49,-2,-40,72,50,49,20,-14,-127,11,-19,-51,-82,26,46,-25,-22,64, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0016134841134771705, 0.0032493718899786472, 0.0030484080780297518, 0.0032235949765890837, 0.0032341340556740761, 0.0037981641944497824, 0.0021377501543611288, 0.0028569011483341455, 0.0041199675761163235, 0.0027660692576318979, 0.0029375108424574137, 0.0034780921414494514, 0.0027880084235221148, 0.0027072271332144737, 0.0033087213523685932, 0.0030889355111867189, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 11719, 19442, -1077, 2049, -3368, 10426, 200, 2424, 16159, -5281, -5825, 7344, -16107, 8502, 3714, 10530, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 3.7964331568218768e-05, 7.6455813541542739e-05, 7.1727248723618686e-05, 7.5849296990782022e-05, 7.6097276178188622e-05, 8.9368571934755892e-05, 5.0300004659220576e-05, 6.7221204517409205e-05, 9.6940413641277701e-05, 6.5083986555691808e-05, 6.9117901148274541e-05, 8.1837461038958281e-05, 6.5600201196502894e-05, 6.3699466409161687e-05, 7.7852266258560121e-05, 7.2680835728533566e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ 1,92,-81,51,58,-37,89,78,-72,14,11,-72,95,127,-54,12, 
  /* [1][0][][] */ -35,-4,-79,-33,-11,60,27,-127,15,-42,-18,-75,2,-37,-79,25, 
  /* [2][0][][] */ -13,-18,37,76,14,30,-106,127,-14,6,69,-45,-27,-67,-32,46, 
  /* [3][0][][] */ 62,-65,68,-3,-2,-25,-14,127,-14,51,61,45,-19,33,8,0, 
  /* [4][0][][] */ -19,-15,-7,55,-72,10,-51,-127,13,-10,30,11,57,42,116,98, 
  /* [5][0][][] */ 109,21,-42,-24,-79,35,29,62,8,-6,39,79,127,32,-90,12, 
  /* [6][0][][] */ 16,-47,-82,-63,-66,17,-9,-63,-77,-56,-40,22,111,70,127,-5, 
  /* [7][0][][] */ -43,42,-19,-69,12,-59,-84,22,-93,63,-62,-68,-127,-34,12,82, 
  /* [8][0][][] */ 97,69,86,48,90,38,63,0,90,-12,23,25,-127,-17,-114,-7, 
  /* [9][0][][] */ -31,66,40,-48,-27,-22,23,-15,-40,51,-38,30,51,127,20,26, 
  /* [10][0][][] */ 58,53,-44,40,-18,-5,61,-55,-56,-37,-52,-111,-127,-70,-3,99, 
  /* [11][0][][] */ 50,26,66,6,-20,-26,15,113,-95,26,-30,6,-14,4,89,127, 
  /* [12][0][][] */ -37,-29,-19,-14,6,12,110,18,-66,17,4,-4,9,62,-76,127, 
  /* [13][0][][] */ 7,36,57,52,103,15,123,127,-7,87,-70,-56,28,91,-91,-28, 
  /* [14][0][][] */ -127,116,8,-27,-15,4,61,-4,-37,17,90,-25,-86,10,-46,49, 
  /* [15][0][][] */ -17,-13,-127,-39,68,-29,-73,-37,-34,-9,-16,-63,8,-61,-69,46, 
  /* [16][0][][] */ 100,-5,16,-10,20,-33,44,-23,-27,15,127,49,23,4,-24,20, 
  /* [17][0][][] */ 2,9,-20,-93,-10,-60,122,-127,17,-29,-43,38,28,67,8,53, 
  /* [18][0][][] */ 39,119,-15,-54,65,-93,-8,-55,-38,127,-21,0,-48,41,9,-19, 
  /* [19][0][][] */ -74,-127,98,-94,62,-92,14,-64,32,69,52,124,63,30,79,-55, 
  /* [20][0][][] */ -10,103,51,14,17,13,26,-23,65,2,94,-26,-127,-6,-71,-17, 
  /* [21][0][][] */ -76,63,48,32,60,17,81,80,-127,70,-41,45,-45,13,-60,-50, 
  /* [22][0][][] */ 33,-99,54,33,33,-127,102,23,22,-38,-57,-60,41,-63,-37,-75, 
  /* [23][0][][] */ -60,-109,51,75,47,-10,26,-52,21,-31,75,9,19,97,101,127, 
  /* [24][0][][] */ -13,5,33,75,44,18,-38,-127,92,16,-38,23,-17,-15,-23,-35, 
  /* [25][0][][] */ -3,26,28,-45,-15,-15,4,-38,-37,65,-57,14,48,127,24,2, 
  /* [26][0][][] */ -56,106,26,31,31,-107,-18,-28,14,23,17,97,14,17,-74,127, 
  /* [27][0][][] */ -35,-125,-60,-8,-61,109,12,-67,0,-39,59,-49,34,-45,-127,-5, 
  /* [28][0][][] */ -30,16,53,82,28,4,-42,-127,-103,54,100,-2,64,-2,-34,-34, 
  /* [29][0][][] */ -106,87,-40,-20,-15,33,-127,-60,-59,-24,-13,-3,23,-43,-116,54, 
  /* [30][0][][] */ 56,70,-54,71,-109,-91,-76,0,-62,-26,8,-106,127,24,-13,93, 
  /* [31][0][][] */ 127,6,-98,-52,-65,39,118,20,-74,-18,59,38,59,24,-53,26, 
  /* [32][0][][] */ -24,-20,127,10,-18,70,68,18,-26,-9,-28,38,24,79,69,34, 
  /* [33][0][][] */ -11,3,-84,-62,-12,24,127,8,-13,-23,13,-80,103,111,-77,78, 
  /* [34][0][][] */ -118,-12,100,4,19,-53,127,-12,-99,22,49,-59,27,46,-34,-25, 
  /* [35][0][][] */ 2,1,-71,24,-95,119,-50,-10,-28,125,-16,127,-62,45,29,35, 
  /* [36][0][][] */ -23,-82,127,-60,-58,17,-32,-12,17,13,-55,71,-6,-95,-36,54, 
  /* [37][0][][] */ 76,-10,82,-39,127,-78,-37,48,-68,120,-73,-11,-92,-50,109,-9, 
  /* [38][0][][] */ 68,48,34,-98,-23,-69,-123,45,-92,57,-94,-36,-78,-127,-95,59, 
  /* [39][0][][] */ -109,46,-48,-51,-94,-112,105,4,-127,-48,33,90,23,-23,3,73, 
  /* [40][0][][] */ 127,46,0,-112,-67,33,22,-43,-40,-27,-57,-100,23,59,32,46, 
  /* [41][0][][] */ 117,-74,-52,-41,2,-13,-76,-6,110,-14,22,-57,127,-104,106,-62, 
  /* [42][0][][] */ -30,-112,-58,127,11,-109,-104,24,23,4,8,52,-98,75,-72,4, 
  /* [43][0][][] */ -92,-28,-34,-127,-64,-4,1,71,47,-119,-31,31,-31,-58,-20,83, 
  /* [44][0][][] */ -71,83,36,-68,-21,-3,58,127,121,-101,64,90,125,63,-26,15, 
  /* [45][0][][] */ 46,56,-65,106,127,-97,-44,-59,119,-67,51,-41,-35,-7,-56,49, 
  /* [46][0][][] */ -11,-36,29,5,94,-40,39,37,12,127,-16,-97,13,64,-25,52, 
  /* [47][0][][] */ 76,-41,-39,-15,76,-8,-33,-52,9,127,-29,32,-29,-119,-72,13, 
  /* [48][0][][] */ -15,17,-24,-117,-9,-22,127,-79,35,-16,-1,23,9,13,-26,57, 
  /* [49][0][][] */ -35,117,-103,56,71,-63,88,74,-21,21,11,-104,-21,81,127,-98, 
  /* [50][0][][] */ 17,39,-16,8,-127,-10,-74,-60,66,80,42,39,-36,-38,-2,31, 
  /* [51][0][][] */ 127,-61,-72,-49,-80,106,-94,-20,45,-56,-56,45,-42,-95,3,71, 
  /* [52][0][][] */ -8,-13,45,65,-54,-85,-127,17,-75,-57,-45,-58,24,-44,30,55, 
  /* [53][0][][] */ 15,107,68,-127,6,103,110,-18,-1,-16,-2,-49,72,-117,6,65, 
  /* [54][0][][] */ -7,127,6,-48,5,-79,-73,37,12,-45,-37,127,62,65,17,66, 
  /* [55][0][][] */ -55,4,54,24,43,-33,114,91,-82,-10,6,-3,127,67,3,-1, 
  /* [56][0][][] */ 127,25,33,32,-38,84,-53,-60,-16,36,-76,21,-59,90,3,17, 
  /* [57][0][][] */ -26,-31,-25,-13,-73,-96,39,-2,-127,-15,55,63,29,50,15,23, 
  /* [58][0][][] */ 37,-54,49,15,-1,-59,-19,2,31,-20,-127,-27,19,-43,-28,44, 
  /* [59][0][][] */ 61,5,-127,72,14,42,77,-44,-74,-36,14,-97,-92,-59,1,100, 
  /* [60][0][][] */ 9,38,-8,26,-17,-24,-39,3,-41,-72,58,127,-37,-109,-31,-13, 
  /* [61][0][][] */ -56,32,98,-113,-53,57,26,116,19,-115,38,44,66,-11,5,127, 
  /* [62][0][][] */ 81,45,2,-127,-10,-6,9,-52,3,28,-40,61,20,-29,-79,-84, 
  /* [63][0][][] */ 5,-22,21,0,-62,-86,-63,12,-58,-16,-38,-14,127,-9,76,-23, 
  /* [64][0][][] */ 42,-8,-41,63,-83,-8,-36,-77,29,127,16,9,59,-47,-63,93, 
  /* [65][0][][] */ -51,20,0,-26,-90,73,49,-38,87,-127,124,-68,59,49,-125,78, 
  /* [66][0][][] */ -127,82,-103,-94,45,-19,-78,-77,-81,86,74,-19,-105,-64,10,68, 
  /* [67][0][][] */ 12,-32,-127,-103,66,77,0,-28,-38,-2,56,-8,37,45,25,41, 
  /* [68][0][][] */ 61,3,-14,-26,-48,22,4,36,-54,71,104,1,3,-45,-127,-13, 
  /* [69][0][][] */ 51,-116,22,-57,20,-105,-16,127,14,54,71,74,-38,53,-41,-12, 
  /* [70][0][][] */ 75,18,127,57,127,-17,104,10,27,45,-76,78,-37,70,-76,21, 
  /* [71][0][][] */ 9,39,96,-60,-127,-77,13,12,-15,-6,24,-99,-76,2,22,26, 
  /* [72][0][][] */ -35,-99,7,-96,69,-13,-8,38,-80,23,-127,8,76,113,-65,105, 
  /* [73][0][][] */ 24,19,38,-2,113,-86,-45,12,-25,76,-78,23,-72,-57,127,-12, 
  /* [74][0][][] */ -126,-2,-117,-82,52,-59,-29,25,-75,-6,-127,-45,-54,-76,-27,92, 
  /* [75][0][][] */ 90,-16,55,-34,14,-3,-127,-10,-8,-94,54,22,-7,-14,4,-17, 
  /* [76][0][][] */ 26,-35,-7,125,53,62,62,-36,93,-86,50,127,19,-74,-44,10, 
  /* [77][0][][] */ -51,-32,127,-43,30,-21,-23,-121,10,11,38,87,50,47,23,8, 
  /* [78][0][][] */ -64,30,26,-44,-11,-63,47,-2,40,-20,34,-108,-127,-72,-124,-55, 
  /* [79][0][][] */ -61,-52,-15,46,127,28,-39,35,20,50,-41,66,-18,-54,-44,-33, 
  /* [80][0][][] */ 19,-95,52,127,-29,-33,-91,97,-15,24,61,13,-75,4,0,39, 
  /* [81][0][][] */ 115,73,-29,82,13,50,36,127,43,16,113,57,103,16,67,-23, 
  /* [82][0][][] */ -44,6,27,-30,32,-127,-108,-80,13,71,-34,-17,-46,92,-54,-34, 
  /* [83][0][][] */ 95,-6,60,-42,-50,-2,-110,0,10,-127,6,-65,-5,-15,20,3, 
  /* [84][0][][] */ 2,-74,-127,17,125,47,55,28,-119,11,-126,-39,52,-53,-96,30, 
  /* [85][0][][] */ 24,116,56,-51,85,6,49,-108,127,-31,14,-13,117,-59,40,-7, 
  /* [86][0][][] */ 127,-31,124,51,4,-52,81,58,-80,-62,-112,-51,44,22,-69,9, 
  /* [87][0][][] */ -9,21,31,-74,63,-33,-36,11,43,-38,79,-33,-93,-127,3,17, 
  /* [88][0][][] */ -65,-46,28,-5,34,32,-55,-38,0,6,-66,-127,-50,-36,-22,-12, 
  /* [89][0][][] */ -63,7,20,-51,31,6,-127,44,71,23,-73,-7,-13,-66,-34,-33, 
  /* [90][0][][] */ -6,-11,-31,-82,127,12,-75,36,46,63,30,-8,41,4,-80,-28, 
  /* [91][0][][] */ -41,-92,51,88,-79,-43,-29,127,-56,-68,7,-39,-6,92,80,126, 
  /* [92][0][][] */ -33,70,10,-13,-16,60,-76,55,-17,-5,62,-12,-42,127,50,20, 
  /* [93][0][][] */ -5,71,-33,-52,64,73,-71,16,69,71,77,58,-127,34,-25,64, 
  /* [94][0][][] */ 41,72,116,31,-127,-48,-1,4,23,-9,36,-13,-61,-22,19,-43, 
  /* [95][0][][] */ -19,45,19,-23,127,18,-107,57,1,11,-106,86,15,50,98,-40, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0019947935361415148, 0.002969993744045496, 0.0023188644554466009, 0.0020843264646828175, 0.0018249086569994688, 0.0024490128271281719, 0.0015825568698346615, 0.0026477663777768612, 0.0015203965594992042, 0.0027241846546530724, 0.0019542975351214409, 0.0021717492491006851, 0.0023322731722146273, 0.0011859767837449908, 0.0024187515955418348, 0.0032105366699397564, 0.0030778246000409126, 0.0022139295469969511, 0.0021439313422888517, 0.0017181854927912354, 0.002114489208906889, 0.0020906473509967327, 0.0020150949712842703, 0.0026497370563447475, 0.0021256809122860432, 0.0023064981214702129, 0.0019881033804267645, 0.0025944162625819445, 0.0012784246355295181, 0.0020141217391937971, 0.0015203225193545222, 0.0025896925944834948, 0.0033727791160345078, 0.0017472389154136181, 0.001526252250187099, 0.0017621486913412809, 0.0025125725660473108, 0.0024826386943459511, 0.0017437237547710538, 0.0011672605760395527, 0.0024427333846688271, 0.0022830003872513771, 0.0017126448219642043, 0.0014155467506498098, 0.0028751238714903593, 0.0019214393105357885, 0.0022097032051533461, 0.0021568429656326771, 0.0012677415506914258, 0.0015241404762491584, 0.0021067019551992416, 0.0013356312410905957, 0.0014275448629632592, 0.001701336121186614, 0.0023652988020330667, 0.002172740176320076, 0.0021655135788023472, 0.0024279591161757708, 0.0033748045098036528, 0.0021313992328941822, 0.0024616937153041363, 0.0017987113678827882, 0.002667668741196394, 0.0015988560626283288, 0.0013464661315083504, 0.0023089700844138861, 0.0021409899927675724, 0.0016207009321078658, 0.002455950016155839, 0.0026250795926898718, 0.0015762044349685311, 0.0014504961436614394, 0.0018121915636584163, 0.0031773687805980444, 0.0011780495988205075, 0.0015162390191107988, 0.0020747792441397905, 0.0017278586747124791, 0.0019066388485953212, 0.0026620374992489815, 0.0010268086334690452, 0.0018253265880048275, 0.0021792617626488209, 0.0022065225057303905, 0.0020918524824082851, 0.0018568544182926416, 0.0022830269299447536, 0.0025158554781228304, 0.0024186600930988789, 0.0039585237391293049, 0.0019560409709811211, 0.001616064109839499, 0.0026928042061626911, 0.0017873139586299658, 0.0028177651111036539, 0.0021693420130759478, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1484, -73, 3132, 4752, 4576, -1799, 4272, -1085, -2505, -600, 3677, -2156, 2391, 5766, 1681, 1214, -304, -410, -1708, 4773, 2752, -432, 2517, -360, -778, 3487, 1721, 1242, 7145, 2641, 4439, 924, 1240, 3944, 4836, 3732, -200, 2011, 2353, -5119, -309, 1500, -94, 2339, -508, 1094, -1131, 1270, -6008, 1871, 1424, -4335, 6573, -1451, 2106, 1375, 1428, 2416, -242, -1577, 720, 1597, 717, 4827, 6507, 2209, 1954, 5550, 3496, -117, 4332, 6385, 2981, -955, 7475, 6643, 1046, -3700, 974, 1134, 10597, 1952, -51, -1927, 1624, 1055, 1745, -1677, 2966, 74, 3961, 2314, -132, -2313, 163, 1320, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00017153330554720014, 0.00025539126363582909, 0.00019940032507292926, 0.00017923228733707219, 0.0001569248124724254, 0.0002105918392771855, 0.00013608486915472895, 0.00022768275812268257, 0.00013073965965304524, 0.00023425401013810188, 0.00016805103223305196, 0.00018674980674404651, 0.00020055334607604891, 0.00010198273957939819, 0.00020798966579604894, 0.00027607567608356476, 0.00026466368581168354, 0.00019037691527046263, 0.00018435773381497711, 0.00014774763258174062, 0.00018182599160354584, 0.00017977581592276692, 0.00017327902605757117, 0.00022785222972743213, 0.00018278836796525866, 0.00019833692931570113, 0.00017095801013056189, 0.00022309516498353332, 0.00010993237810907885, 0.00017319533799309283, 0.00013073330046609044, 0.00022268896282184869, 0.000290026975562796, 0.00015024594904389232, 0.00013124319957569242, 0.00015152806008700281, 0.00021605737856589258, 0.00021348334848880768, 0.00014994367666076869, 0.00010037332685897127, 0.00021005187591072172, 0.0001963163522304967, 0.00014727118832524866, 0.00012172357673989609, 0.00024723334354348481, 0.00016522553050890565, 0.0001900134957395494, 0.00018546801584307104, 0.0001090137375285849, 0.00013106160622555763, 0.00018115635612048209, 0.00011485160212032497, 0.00012275530025362968, 0.00014629875659011304, 0.00020339323964435607, 0.00018683502275962383, 0.00018621359777171165, 0.00020878142095170915, 0.00029020113288424909, 0.0001832800917327404, 0.00021168228704482317, 0.00015467210323549807, 0.00022939417976886034, 0.0001374864368699491, 0.00011578330304473639, 0.00019854950369335711, 0.00018410480697639287, 0.00013936488539911807, 0.00021118838049005717, 0.00022573191381525248, 0.00013553861936088651, 0.00012472888920456171, 0.00015583126514684409, 0.00027322352980263531, 0.00010130107693839818, 0.00013038216275162995, 0.00017841131193563342, 0.0001485794346081093, 0.00016395283455494791, 0.0002289099502377212, 8.8295790192205459e-05, 0.00015696075570303947, 0.0001873958099167794, 0.00018973997794091702, 0.00017987945466302335, 0.00015967185026966035, 0.00019631863688118756, 0.00021633968572132289, 0.00020798179320991039, 0.00034039546153508127, 0.00016820094606373459, 0.00013896616292186081, 0.0002315555902896449, 0.00015369203174486756, 0.000242301044636406, 0.00018654280574992299, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 11,49,22,-88,-82,3,-12,63,-26,-40,-121,-92,-110,102,-62,54,29,82,11,-6,-47,-108,-48,20,85,-112,-8,97,46,-90,61,-7,-82,79,18,-70,-34,4,-99,-21,-108,-55,98,-77,57,-27,-90,93,-103,84,-96,13,-32,73,-7,44,-79,-92,-9,27,-23,81,25,-127,61,-124,-108,42,41,-89,-20,107,-64,27,-54,101,-57,-65,-40,-24,-117,40,57,22,-54,-79,-62,-59,19,30,20,53,-103,-98,-58,42, 
  /* [1][0][][] */ 78,-24,94,63,50,-59,24,104,42,87,-55,88,-91,-60,18,-61,-22,-52,33,-3,103,110,-55,-41,59,23,-3,-64,102,56,4,-44,-41,-69,-52,-43,47,-35,-17,-4,18,119,16,22,50,28,-11,54,-58,-66,21,-21,17,-109,-19,-44,59,69,107,-7,77,-56,-9,-1,127,-18,7,98,92,106,73,120,18,47,59,57,84,-42,100,16,-43,124,-36,95,25,34,-64,7,-32,-28,78,9,-9,29,57,40, 
  /* [2][0][][] */ -6,-74,-95,-127,-48,4,64,-3,16,-55,-72,-56,44,67,-78,-120,-101,29,-53,24,-100,-61,20,18,-90,60,-50,-56,-33,-41,-90,23,42,-75,42,-5,-85,11,-83,60,52,-41,100,69,-71,-26,43,16,-23,-70,-5,82,-95,-84,-5,-85,-55,17,72,103,84,75,-74,91,101,83,-81,-85,-6,8,56,-29,27,-2,-24,-79,84,107,-111,-87,-95,102,70,25,-81,29,34,16,63,66,71,106,-59,-37,73,68, 
  /* [3][0][][] */ -58,107,40,-85,81,110,65,69,59,9,34,-65,89,32,83,123,-106,55,-56,67,-86,59,-87,-15,74,58,-82,43,43,57,-32,102,-108,32,11,-75,-95,-49,-57,-53,-69,-49,-67,25,-97,-97,-20,-22,-77,68,-36,-67,0,46,71,-67,-72,-84,42,-66,-82,13,-63,-32,8,88,-36,-19,-19,-49,48,-15,87,59,-31,-77,-111,-55,59,-62,33,70,-73,-86,88,-127,67,-97,-25,-99,91,70,-84,-39,16,-50, 
  /* [4][0][][] */ -49,-21,110,42,89,-29,22,40,45,99,-38,7,-30,118,48,-84,100,42,22,-3,-37,114,-38,24,22,-41,112,2,47,-73,113,12,-13,50,12,-17,101,36,-28,-72,99,115,-29,-47,5,115,13,-6,18,49,127,64,114,-85,45,82,-51,36,120,-67,112,12,23,105,-6,13,-62,-28,50,119,79,47,-20,45,59,0,16,105,-1,79,74,-35,85,50,24,118,59,-84,29,52,96,99,116,20,-53,-33, 
  /* [5][0][][] */ -85,127,-60,-65,6,-26,-54,51,-24,-94,42,13,-67,15,96,102,-117,116,68,-24,83,-6,-55,73,-116,27,-49,-31,-40,29,41,-4,-82,62,48,35,81,-69,-68,-28,61,-24,-29,-36,77,79,-4,-23,77,74,65,30,-92,-19,21,-47,77,-51,-73,73,33,53,-20,41,46,-30,35,37,70,-71,13,-10,-88,58,15,-95,-64,39,38,-19,47,75,-97,-59,55,-40,-97,10,61,74,-41,79,-32,73,-14,72, 
  /* [6][0][][] */ 65,-17,21,-28,-42,-17,62,-68,34,52,27,104,32,-55,-25,82,-34,70,43,103,-69,75,79,39,7,31,-72,-67,-8,-59,19,39,-48,6,46,77,-52,-6,14,50,-58,67,92,4,-57,74,-80,30,53,78,34,44,-30,-81,-6,-63,-34,1,15,59,61,-30,82,28,127,56,-10,35,8,-11,-11,3,43,1,64,113,-10,68,-38,-12,52,22,-2,-33,55,11,18,95,-9,-42,-64,-20,-61,5,110,-33, 
  /* [7][0][][] */ 77,33,-49,-114,93,-13,-34,-57,17,-78,-16,-31,-46,98,87,52,78,-12,-45,45,62,-94,-19,-58,92,-76,47,97,-95,-33,-18,16,-127,-41,52,-41,101,-8,-6,-100,-105,29,-62,73,6,-64,-78,-59,46,-49,-38,98,-49,30,52,26,46,-110,-9,-104,13,-73,-53,-58,-12,-55,-110,-97,42,-108,-124,0,-100,62,-38,58,-73,-52,-79,-13,-105,33,-3,61,-55,-84,-25,-85,38,102,99,-75,33,-76,77,-113, 
  /* [8][0][][] */ -16,-82,-55,31,84,4,12,-88,88,-48,112,-49,-11,-41,-127,6,58,41,108,-26,101,99,105,-13,-28,-48,56,-90,-25,-38,-55,10,9,10,-41,126,-79,-55,-9,-85,-1,52,64,-27,13,-13,22,108,-6,109,2,-1,126,-14,27,-30,24,33,13,3,-54,-3,-51,113,17,-50,9,-26,-21,67,-47,69,75,101,120,108,105,35,-30,18,64,121,32,82,84,-24,19,22,72,81,-16,101,-63,118,122,-10, 
  /* [9][0][][] */ -34,-6,0,47,2,42,46,43,38,30,79,29,101,33,8,-24,-27,-31,-71,-78,-38,56,31,-23,-93,-68,-28,53,39,-105,-50,32,-92,-49,93,-39,-3,-18,-69,-50,88,53,-11,31,47,38,17,-39,7,-53,-98,-88,-112,54,2,43,-14,-84,10,24,2,-46,20,49,-127,93,71,46,69,-71,-116,34,21,1,63,-114,107,-75,54,-67,-116,-54,61,-94,23,-34,-101,65,-55,87,12,-6,-78,22,24,28, 
  /* [10][0][][] */ -81,34,-66,-58,-29,56,-110,-74,102,-71,87,64,1,29,87,-33,86,27,-49,55,31,-53,-9,87,52,101,-14,-43,-93,-87,-18,-104,79,32,109,-91,127,-43,26,110,70,29,53,67,21,39,1,-1,-45,123,100,52,96,-63,98,56,29,-11,87,-8,82,76,68,47,-23,95,8,41,-7,9,86,52,-95,-74,20,45,89,92,105,8,21,54,19,5,-15,97,-67,71,-2,47,-60,84,66,75,34,18, 
  /* [11][0][][] */ 88,110,-79,-92,76,13,-43,-86,-61,30,42,-24,38,-67,51,-25,-116,76,-34,-64,-34,-42,67,-89,-93,84,57,127,1,72,2,50,27,91,-112,-66,22,93,-55,-58,49,-122,88,-81,82,9,-93,-9,96,61,-73,105,43,-48,-57,-93,-25,72,-108,88,-45,5,119,-61,58,-1,92,6,90,77,-72,6,-50,-53,36,-108,-9,51,-35,2,-102,-33,-114,72,56,-75,-51,52,-62,18,-1,-64,65,23,105,-6, 
  /* [12][0][][] */ -88,-49,-92,104,-4,-55,-69,-89,-31,-7,-60,29,-86,-104,-59,57,24,-54,18,105,-110,-43,53,37,-24,81,-95,-11,89,-99,67,65,19,-46,-15,-92,-5,-101,63,56,74,76,38,-93,18,-25,-75,74,-97,89,-67,46,-72,-118,77,34,-12,-96,-99,-111,38,-41,102,-31,-91,-16,-7,-76,-126,-118,26,-35,-124,-80,-27,-32,-125,-32,74,-70,12,67,85,-26,57,-81,-30,-81,-87,-100,-11,-8,-118,-100,-127,76, 
  /* [13][0][][] */ 50,38,95,-26,105,3,35,-42,37,-71,49,36,3,91,57,45,71,59,24,95,125,-6,15,-50,103,-46,13,-81,34,-102,-53,-19,20,-86,47,13,79,-65,75,38,-6,-30,90,97,71,9,60,66,-75,105,-18,-11,-5,-69,34,95,51,-46,95,-63,-69,14,84,-32,-64,42,-23,-96,-81,-34,-58,108,-46,-1,99,14,-1,96,12,-33,103,70,13,127,60,-10,-77,82,-27,-6,22,-14,91,118,-17,-42, 
  /* [14][0][][] */ -58,-71,73,44,40,-98,3,-25,-19,54,-45,-81,-14,95,-40,23,-103,-39,-33,-111,-21,25,-64,-53,-54,-38,54,9,60,-96,62,-54,-54,81,102,11,15,59,-103,-101,92,101,100,7,66,-83,-19,-61,-115,-3,-44,-79,-28,-127,74,-119,14,-102,-53,-109,-103,-111,7,1,-21,48,-6,-26,-119,-23,19,-75,-118,-86,37,-28,-102,-24,55,-9,104,-45,99,24,-89,-74,-75,62,39,-24,-84,-45,-30,-113,-86,-68, 
  /* [15][0][][] */ 17,39,-1,-70,-106,89,2,53,-122,-51,99,-44,-23,-64,-55,-53,-40,86,-111,12,-35,-94,-64,-34,-9,-16,96,100,-17,-89,-127,17,55,96,-49,-29,-35,103,-39,-100,-74,108,111,-70,76,47,-87,-97,19,-40,-39,-91,-86,-14,28,9,51,-21,91,-58,-116,-105,-101,-67,-54,20,-25,-91,-26,-75,-91,7,60,55,-10,82,-38,98,-117,-33,-31,-72,-51,-53,-62,-49,102,-44,52,-102,-92,96,-1,-45,111,-82, 
  /* [16][0][][] */ -4,42,-112,104,73,-65,87,95,-53,31,73,-83,-54,79,-124,-23,22,67,-69,-42,-127,-29,-117,-2,93,-77,-87,33,-62,98,100,30,-99,-48,7,2,-29,78,-127,51,37,15,67,-67,-111,-26,-95,-68,-37,31,81,60,-54,-122,42,-3,30,81,-56,-63,25,-38,-12,50,-22,33,60,-52,-5,-68,59,2,75,-16,41,-96,62,-65,-107,-64,-42,11,-21,-118,102,-83,-14,-125,98,-113,91,-119,34,16,61,-111, 
  /* [17][0][][] */ -19,53,-48,9,-3,19,-28,80,56,-5,89,8,-27,95,45,-70,36,71,12,81,49,2,-15,17,-53,24,-8,-82,-7,26,61,-88,89,-32,-2,49,57,-10,-9,39,-32,117,20,-53,119,51,-60,-44,44,-46,19,-77,-31,19,62,38,-22,68,-18,-60,106,98,66,84,-23,28,-72,54,-51,-10,49,14,-39,1,-4,67,-52,-28,114,-38,-10,34,97,-13,32,60,-10,113,22,127,-22,69,-40,-25,79,14, 
  /* [18][0][][] */ 58,-78,-42,30,70,19,-53,-60,-3,37,-44,-27,1,85,19,35,47,68,-33,17,-32,51,43,44,69,-1,45,-61,21,-62,45,-73,-4,64,92,-11,58,11,-9,-49,-64,67,120,-31,4,62,75,13,69,23,19,-1,1,3,25,36,87,30,-55,45,-24,-4,83,108,26,20,-59,-62,99,19,-21,86,-61,121,12,127,47,108,9,29,-3,13,-35,105,18,-14,94,50,69,57,-1,94,-57,1,49,-35, 
  /* [19][0][][] */ 73,59,-63,93,114,84,-13,15,67,-27,12,-5,65,87,76,-5,56,-91,-11,127,-88,-46,35,92,87,8,35,2,94,68,124,-70,49,-8,-63,94,-81,5,-28,7,73,61,65,34,-46,67,-75,110,75,33,103,15,88,-83,101,108,68,35,-57,-33,-12,50,116,-3,111,-6,-42,99,120,24,-56,-2,40,102,38,106,12,95,-90,124,-62,-22,113,-47,66,2,104,-101,-45,13,7,25,-14,-30,104,-66, 
  /* [20][0][][] */ 6,-56,-40,39,60,3,54,63,-23,-65,38,-24,-4,-81,36,-86,-38,-33,87,18,74,-108,87,-25,-116,89,-73,23,-16,-91,-70,-9,41,113,89,-73,90,0,-114,31,84,-123,-97,2,41,-2,-28,-61,95,-12,89,-99,-17,116,4,-86,-68,-127,56,40,-43,92,49,53,5,115,39,-71,8,56,-82,25,-89,-106,-16,86,4,-101,72,-83,-4,75,64,-68,33,21,-95,-76,117,8,-119,-89,54,-45,5,47, 
  /* [21][0][][] */ 70,101,101,-89,-39,-53,-91,-51,-35,100,18,-96,-58,-81,-100,-106,-35,-26,-82,-112,-44,52,101,-58,89,26,71,-23,-67,-110,96,-1,-100,23,91,100,-117,-88,-119,19,-1,43,-48,8,-81,87,-127,63,62,-124,-15,-77,54,-54,-117,-63,-38,-71,78,83,6,-46,-13,56,-52,41,-73,-7,-11,-62,-18,2,-41,-105,-62,-1,-96,101,103,83,-51,96,-9,-26,-126,-75,13,24,-51,39,-76,79,-37,-81,98,-35, 
  /* [22][0][][] */ -5,-74,87,14,-11,-116,115,62,23,15,-11,60,-36,51,-27,-76,3,-29,-34,100,39,108,19,91,-19,58,-1,26,1,-42,-13,-69,-37,93,47,52,29,-38,-9,-84,-7,65,-13,-10,23,36,106,-32,-127,18,-9,34,-7,63,53,64,103,116,-21,48,16,-24,28,61,105,-96,-66,-1,78,115,-31,-4,24,105,-40,43,-53,-1,27,3,119,-21,-31,48,42,72,20,20,47,120,102,58,-53,81,95,94, 
  /* [23][0][][] */ -54,-10,-4,-49,-101,-5,45,-2,4,-112,41,-115,-123,67,48,-58,18,27,35,8,34,79,42,-19,36,-66,-81,-74,-109,61,-18,96,62,-78,85,-34,-17,90,58,-94,98,30,82,-110,-110,-15,-108,87,21,75,-59,-26,-98,92,54,-8,20,-16,37,-37,-60,40,63,-124,89,-107,-2,-27,76,91,-87,91,81,24,7,-57,-124,7,-108,-29,-120,0,-106,-92,-67,-126,95,-127,-53,-87,-48,-89,-7,-65,-84,99, 
  /* [24][0][][] */ 6,50,123,112,80,-10,-68,91,20,-61,-55,100,31,25,-5,-57,6,32,-28,98,122,2,7,58,2,77,-24,-59,100,108,105,-11,127,-32,13,2,35,-14,-48,-67,16,119,-44,36,-11,94,61,-29,-99,-21,49,3,-24,54,122,-11,74,-14,10,-31,114,53,69,7,-72,-16,-45,113,83,-45,19,51,14,-65,1,-5,54,-25,-21,90,82,-15,72,-17,-69,-32,13,-57,-54,93,-21,5,-40,-44,84,118, 
  /* [25][0][][] */ -2,4,21,93,21,4,-60,50,7,81,71,48,-53,89,94,-86,-34,7,-36,31,82,102,5,91,68,-29,-31,-44,75,54,-73,49,-37,-35,101,106,-66,77,-57,90,-64,122,88,22,18,-28,-61,-57,-30,52,-32,-64,26,15,-50,-50,52,-19,114,17,-28,103,-51,49,-40,-52,-56,86,21,35,56,79,15,71,0,41,49,17,52,-41,-27,24,-16,57,58,44,8,51,-47,127,-32,9,16,80,89,80, 
  /* [26][0][][] */ 83,-108,25,22,99,-82,112,-20,53,-2,-63,30,-23,-33,33,-15,116,-4,-43,-38,57,-19,84,106,24,-3,71,32,45,13,-19,-29,5,54,61,119,18,106,-73,83,97,36,0,-87,2,77,127,34,-60,72,103,-4,116,71,84,55,96,28,-25,-27,39,112,-48,-72,71,-31,-84,-9,23,-17,58,59,-73,-31,-55,-36,6,45,-22,80,121,40,-13,11,0,-17,22,-114,44,45,101,122,-22,65,62,-11, 
  /* [27][0][][] */ 53,15,-51,127,16,-5,43,-6,-42,86,-10,26,-83,81,56,-38,75,-94,23,-43,5,65,99,-44,-45,81,-5,42,109,-32,85,-66,109,-64,47,115,112,79,-22,-20,45,92,14,46,78,-29,92,-6,-22,-26,87,118,125,30,-48,-47,101,6,8,7,67,-45,-45,-38,67,80,36,-54,69,30,63,-54,33,-25,11,-21,-31,41,49,61,-10,-26,104,40,-75,-40,79,-40,105,52,74,108,87,41,91,-45, 
  /* [28][0][][] */ -101,117,-66,46,-3,57,-126,10,33,-57,-75,41,65,-88,41,-105,-90,78,16,57,77,46,-8,-80,39,-80,64,101,-74,1,-49,22,-26,24,-38,-75,27,67,-50,113,-77,-48,-26,73,86,67,-30,-22,110,-13,-123,-35,29,-16,-4,40,62,39,26,86,23,-10,-18,-127,-103,10,80,-52,-110,31,34,112,-114,28,105,4,33,-56,11,43,-86,32,30,-47,3,4,-93,-42,-91,0,48,-78,36,36,-42,73, 
  /* [29][0][][] */ 36,10,25,-13,-16,29,34,-67,-87,-23,-26,-85,71,1,-58,11,69,76,-64,44,-12,-35,-73,-104,38,-38,-66,-11,-22,97,-23,39,-119,107,89,11,-36,-114,42,-15,100,-45,-47,36,-89,38,-65,12,-49,32,-6,49,-58,0,42,78,42,2,-51,25,73,78,-38,39,69,-48,-70,47,71,-42,-52,-66,7,-127,2,-80,-55,0,-7,53,-18,-58,24,-49,47,-114,-49,33,9,10,-33,-37,-90,-9,-80,-94, 
  /* [30][0][][] */ -59,-93,-43,-19,83,93,70,9,-40,49,46,76,86,71,-89,-80,103,95,86,33,13,-44,126,-37,40,70,2,14,93,-6,33,58,28,-21,43,48,-47,-6,91,0,7,-50,-34,-68,91,127,-24,2,-56,111,-54,-4,-67,-30,102,-60,104,73,22,-5,-16,-66,66,91,125,74,38,81,108,92,122,-41,43,-69,-50,46,76,-2,5,0,66,69,106,58,79,-22,80,43,108,54,73,-72,23,81,-34,-31, 
  /* [31][0][][] */ 44,70,68,-5,-17,7,90,-43,-58,-11,50,-16,-42,-37,57,29,16,8,-1,39,-13,-7,77,7,66,81,-3,-33,8,73,62,56,69,36,54,85,38,94,11,-69,14,93,-42,23,11,91,52,12,-127,3,-16,54,42,-67,15,19,22,49,41,73,15,-79,96,-46,38,-60,60,-27,-54,44,96,-10,71,-25,-9,61,5,78,27,-35,20,9,-51,-28,-1,54,104,-108,-29,77,43,11,-19,-15,-56,64, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018544115591794252, 0.0021294269245117903, 0.0018144190544262528, 0.0021994910202920437, 0.0024543425533920527, 0.002137952484190464, 0.002629963681101799, 0.0019009257666766644, 0.00216115009970963, 0.0020516195800155401, 0.0021136486902832985, 0.0019244779832661152, 0.0018575523281469941, 0.0021148701198399067, 0.0018179178005084395, 0.001809361157938838, 0.0018181264167651534, 0.0023438199423253536, 0.0025919664185494184, 0.0020920245442539454, 0.0019667500164359808, 0.0018136653816327453, 0.0026183577720075846, 0.0018764411797747016, 0.0021649720147252083, 0.0023623013403266668, 0.0021011608187109232, 0.0023237613495439291, 0.0020733650308102369, 0.0024055435787886381, 0.0021935105323791504, 0.0026610619388520718, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -459, 1148, -460, -529, 2235, -624, 1173, -408, 1383, -598, 569, -298, -451, 1283, -537, -353, -645, 1251, 1266, 1158, -654, -498, 1658, -558, 1051, 1551, 1033, 1583, -907, 270, 1239, 746, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.3633215682348236e-05, 5.0104164984077215e-05, 4.2692212446127087e-05, 5.1752729632426053e-05, 5.774923920398578e-05, 5.0304766773479059e-05, 6.188150291563943e-05, 4.4727665226673707e-05, 5.0850590923801064e-05, 4.827340308111161e-05, 4.9732912884792313e-05, 4.5281834900379181e-05, 4.370711394585669e-05, 4.976164927938953e-05, 4.2774536268552765e-05, 4.2573203245410696e-05, 4.2779447539942339e-05, 5.5148706451291218e-05, 6.0987447795923799e-05, 4.9224108806811273e-05, 4.6276472858153284e-05, 4.2674480937421322e-05, 6.1608421674463898e-05, 4.4151558540761471e-05, 5.0940518121933565e-05, 5.5583561334060505e-05, 4.943908061250113e-05, 5.4676736908731982e-05, 4.878505933447741e-05, 5.6601027608849108e-05, 5.1612012612167746e-05, 6.2613224145025015e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -33,106,-38,8,127,-40,-66,-62,74,-11,-10,-89,68,54,-25,-9,-33,-7,-47,53,21,-76,104,-39,7,40,72,-7,18,7,-25,95, 
  /* [1][0][][] */ 80,-80,-74,-4,-21,41,-127,-58,-87,111,68,5,89,69,-6,-51,83,8,-112,-105,106,-8,-27,38,-91,47,-40,-48,70,-31,-83,-53, 
  /* [2][0][][] */ -16,-111,97,107,-31,63,-101,49,-54,42,-115,100,8,-94,88,42,86,-113,-109,72,1,23,-5,43,-127,-79,-25,-40,11,106,-68,37, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.0047396980226039886, 0.0036849486641585827, 0.0035249295178800821, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 192, -341, -304, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.00019539358618203551, 0.00015191164857242256, 0.0001453148724976927, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10840042680501938, } };
const TfArray<1, int> quant46_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.073870636522769928, } };
const TfArray<1, int> quant50_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.082282230257987976, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.097565397620201111, } };
const TfArray<1, int> quant54_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.058634277433156967, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.054943099617958069, } };
const TfArray<1, int> quant61_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.070621192455291748, } };
const TfArray<1, int> quant62_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.056381095200777054, } };
const TfArray<1, int> quant65_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.085990503430366516, } };
const TfArray<1, int> quant66_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.041224900633096695, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15220034122467041, } };
const TfArray<1, int> quant69_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
