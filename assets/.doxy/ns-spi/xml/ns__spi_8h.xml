<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__spi_8h" kind="file" language="C++">
    <compoundname>ns_spi.h</compoundname>
    <includes local="yes">am_bsp.h</includes>
    <includes local="yes">am_mcu_apollo.h</includes>
    <includes local="yes">am_util.h</includes>
    <includedby refid="ns__spi_8c" local="yes">neuralSPOT/neuralspot/ns-spi/src/ns_spi.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h</label>
        <link refid="ns__spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>am_bsp.h</label>
      </node>
      <node id="3">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="4">
        <label>am_util.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h</label>
        <link refid="ns__spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>neuralSPOT/neuralspot/ns-spi/src/ns_spi.c</label>
        <link refid="ns__spi_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structns__spi__cfg" prot="public">ns_spi_cfg</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___neural_s_p_o_t-spi_1ga96fd99e5d14b6ad4bc3bd0a725059eae" prot="public" static="no" strong="no">
        <type></type>
        <name>ns_spi_status_e</name>
        <enumvalue id="group___neural_s_p_o_t-spi_1gga96fd99e5d14b6ad4bc3bd0a725059eaea185528e8cf1aa5ba304bde78254c05d1" prot="public">
          <name>NS_SPI_STATUS_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___neural_s_p_o_t-spi_1gga96fd99e5d14b6ad4bc3bd0a725059eaeaaa0beea9599dec83121fc718fda9c28c" prot="public">
          <name>NS_SPI_STATUS_ERROR</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="23" column="1" bodyfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" bodystart="23" bodyend="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___neural_s_p_o_t-spi_1ga26a42325496912d007eb947043d01bd6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ns_spi_cb) (struct ns_spi_cfg *)</definition>
        <argsstring>)(struct ns_spi_cfg *)</argsstring>
        <name>ns_spi_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="25" column="9" bodyfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___neural_s_p_o_t-spi_1gad8b32cb0ea049d61839e2b02f8150024" prot="public" static="no">
        <type>struct <ref refid="structns__spi__cfg" kindref="compound">ns_spi_cfg</ref></type>
        <definition>typedef struct ns_spi_cfg ns_spi_config_t</definition>
        <argsstring></argsstring>
        <name>ns_spi_config_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="35" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1gab4c9d48804b63f87c952773e2445f7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_spi_handle_iom_isr</definition>
        <argsstring>(void)</argsstring>
        <name>ns_spi_handle_iom_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IOM ISRs Take over correct IOM ISR. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="38" column="6" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="33" bodyend="44" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1ga2afc99e5bc3d12e54f9dfc879774bf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_spi_interface_init</definition>
        <argsstring>(ns_spi_config_t *cfg, uint32_t speed, am_hal_iom_spi_mode_e mode)</argsstring>
        <name>ns_spi_interface_init</name>
        <param>
          <type><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>am_hal_iom_spi_mode_e</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize the SPI interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI Configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus speed in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI mode (CPOL, CPHA) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="48" column="10" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="142" bodyend="181" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1gaf1c458dc2a954200ef12fd098a8d8d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_spi_read</definition>
        <argsstring>(ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin)</argsstring>
        <name>ns_spi_read</name>
        <param>
          <type><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>csPin</declname>
        </param>
        <briefdescription>
<para>Read from a SPI device. The SPI device is selected by the csPin parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI Configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Register length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>CS pin number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="61" column="10" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="183" bodyend="207" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1ga26470c9a15ec6ab256db16b9c1667661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_spi_write</definition>
        <argsstring>(ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin)</argsstring>
        <name>ns_spi_write</name>
        <param>
          <type><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>csPin</declname>
        </param>
        <briefdescription>
<para>Write to a SPI device. The SPI device is selected by the csPin parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI Configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Register length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>CS pin number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="76" column="10" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="249" bodyend="275" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1ga6a3e9375d7b8f17200f0576c663deed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_spi_transfer</definition>
        <argsstring>(ns_spi_config_t *cfg, const void *txBuf, const void *rxBuf, uint32_t size, uint32_t csPin)</argsstring>
        <name>ns_spi_transfer</name>
        <param>
          <type><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>txBuf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>rxBuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>csPin</declname>
        </param>
        <briefdescription>
<para>Transfer data to/from a SPI device. The SPI device is selected by the csPin parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI Configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the transfer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>CS pin number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Full-duplex transfer !NOTE: Do not use for now</para>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="90" column="10" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="277" bodyend="299" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___neural_s_p_o_t-spi_1gaa690be9c6f7bba845a52a98f8ca8cf2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_spi_read_dma</definition>
        <argsstring>(ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin)</argsstring>
        <name>ns_spi_read_dma</name>
        <param>
          <type><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>csPin</declname>
        </param>
        <briefdescription>
<para>Issure DMA read, the cfg-&gt;callback will be called when the transfer is complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufLen</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regLen</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csPin</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" line="104" column="10" bodyfile="neuralSPOT/neuralspot/ns-spi/src/ns_spi.c" bodystart="218" bodyend="247" declfile="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h" declline="104" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic SPI driver. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Adam Page </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2022-08-26</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>NS_SPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS_SPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_bsp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_mcu_apollo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>NS_SPI_STATUS_SUCCESS<sp/>=<sp/>0,<sp/>NS_SPI_STATUS_ERROR<sp/>=<sp/>1<sp/>}<sp/>ns_spi_status_e;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structns__spi__cfg" kindref="compound">ns_spi_cfg</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ns_spi_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structns__spi__cfg" kindref="compound">ns_spi_cfg</ref><sp/>*);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPI<sp/>Driver<sp/>Configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structns__spi__cfg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structns__spi__cfg" kindref="compound">ns_spi_cfg</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>iom;<sp/></highlight><highlight class="comment">//<sp/>Apollo4<sp/>IOM<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iomHandle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AmbiqSuite<sp/>IOM<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>am_hal_iom_config_t<sp/>sIomCfg;<sp/></highlight><highlight class="comment">//<sp/><sp/>AmbiqSuite<sp/>IOM<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ns_spi_cb<sp/>cb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ISR<sp/>Handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___neural_s_p_o_t-spi_1gab4c9d48804b63f87c952773e2445f7d7" kindref="member">ns_spi_handle_iom_isr</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">uint32_t<sp/><ref refid="group___neural_s_p_o_t-spi_1ga2afc99e5bc3d12e54f9dfc879774bf9f" kindref="member">ns_spi_interface_init</ref>(<ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>speed,<sp/>am_hal_iom_spi_mode_e<sp/>mode);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">uint32_t<sp/><ref refid="group___neural_s_p_o_t-spi_1gaf1c458dc2a954200ef12fd098a8d8d15" kindref="member">ns_spi_read</ref>(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>bufLen,<sp/>uint64_t<sp/>reg,<sp/>uint32_t<sp/>regLen,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>csPin);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">uint32_t<sp/><ref refid="group___neural_s_p_o_t-spi_1ga26470c9a15ec6ab256db16b9c1667661" kindref="member">ns_spi_write</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>bufLen,<sp/>uint64_t<sp/>reg,<sp/>uint32_t<sp/>regLen,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>csPin);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">uint32_t<sp/><ref refid="group___neural_s_p_o_t-spi_1ga6a3e9375d7b8f17200f0576c663deed3" kindref="member">ns_spi_transfer</ref>(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*txBuf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*rxBuf,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>csPin);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">uint32_t<sp/><ref refid="group___neural_s_p_o_t-spi_1gaa690be9c6f7bba845a52a98f8ca8cf2b" kindref="member">ns_spi_read_dma</ref>(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__spi__cfg" kindref="compound">ns_spi_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>bufLen,<sp/>uint64_t<sp/>reg,<sp/>uint32_t<sp/>regLen,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>csPin);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NS_SPI</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-spi/includes-api/ns_spi.h"/>
  </compounddef>
</doxygen>
