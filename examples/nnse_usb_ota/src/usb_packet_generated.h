// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USBPACKET_WEB_USB_H_
#define FLATBUFFERS_GENERATED_USBPACKET_WEB_USB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace web {
namespace usb {

struct UsbPacket;
struct UsbPacketBuilder;

enum UsbDataType : int8_t {
  UsbDataType_NONE = 0,
  UsbDataType_SET_SE_MODE = 1,
  UsbDataType_SE_LATENCY = 2,
  UsbDataType_OPUS_LATENCY = 3,
  UsbDataType_AUDIO_DATA = 4,
  UsbDataType_MODEL_DATA = 5,
  UsbDataType_MIN = UsbDataType_NONE,
  UsbDataType_MAX = UsbDataType_MODEL_DATA
};

inline const UsbDataType (&EnumValuesUsbDataType())[6] {
  static const UsbDataType values[] = {
    UsbDataType_NONE,
    UsbDataType_SET_SE_MODE,
    UsbDataType_SE_LATENCY,
    UsbDataType_OPUS_LATENCY,
    UsbDataType_AUDIO_DATA,
    UsbDataType_MODEL_DATA
  };
  return values;
}

inline const char * const *EnumNamesUsbDataType() {
  static const char * const names[7] = {
    "NONE",
    "SET_SE_MODE",
    "SE_LATENCY",
    "OPUS_LATENCY",
    "AUDIO_DATA",
    "MODEL_DATA",
    nullptr
  };
  return names;
}

inline const char *EnumNameUsbDataType(UsbDataType e) {
  if (::flatbuffers::IsOutRange(e, UsbDataType_NONE, UsbDataType_MODEL_DATA)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUsbDataType()[index];
}

enum Platform : int8_t {
  Platform_APOLLO3 = 0,
  Platform_APOLLO4 = 1,
  Platform_APOLLO5 = 2,
  Platform_MIN = Platform_APOLLO3,
  Platform_MAX = Platform_APOLLO5
};

inline const Platform (&EnumValuesPlatform())[3] {
  static const Platform values[] = {
    Platform_APOLLO3,
    Platform_APOLLO4,
    Platform_APOLLO5
  };
  return values;
}

inline const char * const *EnumNamesPlatform() {
  static const char * const names[4] = {
    "APOLLO3",
    "APOLLO4",
    "APOLLO5",
    nullptr
  };
  return names;
}

inline const char *EnumNamePlatform(Platform e) {
  if (::flatbuffers::IsOutRange(e, Platform_APOLLO3, Platform_APOLLO5)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPlatform()[index];
}

enum Command : int8_t {
  Command_SEND_DATA = 0,
  Command_CHECK_MAILBOX = 1,
  Command_GET_DATA = 2,
  Command_CHECK_HEARTBEAT = 3,
  Command_MIN = Command_SEND_DATA,
  Command_MAX = Command_CHECK_HEARTBEAT
};

inline const Command (&EnumValuesCommand())[4] {
  static const Command values[] = {
    Command_SEND_DATA,
    Command_CHECK_MAILBOX,
    Command_GET_DATA,
    Command_CHECK_HEARTBEAT
  };
  return values;
}

inline const char * const *EnumNamesCommand() {
  static const char * const names[5] = {
    "SEND_DATA",
    "CHECK_MAILBOX",
    "GET_DATA",
    "CHECK_HEARTBEAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommand(Command e) {
  if (::flatbuffers::IsOutRange(e, Command_SEND_DATA, Command_CHECK_HEARTBEAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommand()[index];
}

struct UsbPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UsbPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLATFORM = 4,
    VT_VERSION = 6,
    VT_TYPE = 8,
    VT_DATA = 10
  };
  web::usb::Platform platform() const {
    return static_cast<web::usb::Platform>(GetField<int8_t>(VT_PLATFORM, 0));
  }
  int8_t version() const {
    return GetField<int8_t>(VT_VERSION, 0);
  }
  web::usb::UsbDataType type() const {
    return static_cast<web::usb::UsbDataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PLATFORM, 1) &&
           VerifyField<int8_t>(verifier, VT_VERSION, 1) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct UsbPacketBuilder {
  typedef UsbPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_platform(web::usb::Platform platform) {
    fbb_.AddElement<int8_t>(UsbPacket::VT_PLATFORM, static_cast<int8_t>(platform), 0);
  }
  void add_version(int8_t version) {
    fbb_.AddElement<int8_t>(UsbPacket::VT_VERSION, version, 0);
  }
  void add_type(web::usb::UsbDataType type) {
    fbb_.AddElement<int8_t>(UsbPacket::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(UsbPacket::VT_DATA, data);
  }
  explicit UsbPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UsbPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UsbPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UsbPacket> CreateUsbPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    web::usb::Platform platform = web::usb::Platform_APOLLO3,
    int8_t version = 0,
    web::usb::UsbDataType type = web::usb::UsbDataType_NONE,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  UsbPacketBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_type(type);
  builder_.add_version(version);
  builder_.add_platform(platform);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UsbPacket> CreateUsbPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    web::usb::Platform platform = web::usb::Platform_APOLLO3,
    int8_t version = 0,
    web::usb::UsbDataType type = web::usb::UsbDataType_NONE,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return web::usb::CreateUsbPacket(
      _fbb,
      platform,
      version,
      type,
      data__);
}

}  // namespace usb
}  // namespace web

#endif  // FLATBUFFERS_GENERATED_USBPACKET_WEB_USB_H_
