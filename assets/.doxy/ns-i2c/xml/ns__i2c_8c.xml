<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__i2c_8c" kind="file" language="C++">
    <compoundname>ns_i2c.c</compoundname>
    <includes refid="ns__i2c_8h" local="yes">ns_i2c.h</includes>
    <includes local="yes">am_bsp.h</includes>
    <includes local="yes">am_mcu_apollo.h</includes>
    <includes local="yes">am_util.h</includes>
    <includes local="yes">ns_core.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ns_i2c.h</label>
        <link refid="ns__i2c_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c</label>
        <link refid="ns__i2c_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>am_bsp.h</label>
      </node>
      <node id="4">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="5">
        <label>am_util.h</label>
      </node>
      <node id="6">
        <label>ns_core.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__ns-i2c_1ga33f2e94badf28606cf9400124a3d3b17" prot="public" static="no" mutable="no">
        <type>const ns_core_api_t</type>
        <definition>const ns_core_api_t ns_i2c_V0_0_1</definition>
        <argsstring></argsstring>
        <name>ns_i2c_V0_0_1</name>
        <initializer>= {.apiId = NS_I2C_API_ID, .version = NS_I2C_V0_0_1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="18" column="21" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-i2c_1ga729a5e2f7e5baa81a87a8cab7a780ca4" prot="public" static="no" mutable="no">
        <type>const ns_core_api_t</type>
        <definition>const ns_core_api_t ns_i2c_V1_0_0</definition>
        <argsstring></argsstring>
        <name>ns_i2c_V1_0_0</name>
        <initializer>= {.apiId = NS_I2C_API_ID, .version = NS_I2C_V1_0_0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="19" column="21" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-i2c_1gac22b7bd535e474d696aa860117f6dece" prot="public" static="no" mutable="no">
        <type>const ns_core_api_t</type>
        <definition>const ns_core_api_t ns_i2c_oldest_supported_version</definition>
        <argsstring></argsstring>
        <name>ns_i2c_oldest_supported_version</name>
        <initializer>= {
    .apiId = NS_I2C_API_ID, .version = NS_I2C_V0_0_1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="20" column="21" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-i2c_1gaa772fbf579700bd97bb3cb44e9d3dc90" prot="public" static="no" mutable="no">
        <type>const ns_core_api_t</type>
        <definition>const ns_core_api_t ns_i2c_current_version</definition>
        <argsstring></argsstring>
        <name>ns_i2c_current_version</name>
        <initializer>= {.apiId = NS_I2C_API_ID, .version = NS_I2C_V1_0_0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="22" column="21" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ns-i2c_1gaabcf91f33f95dec449ea8d5f1a9adef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_interface_init</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint32_t speed)</argsstring>
        <name>ns_i2c_interface_init</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
<para>Initialize I2C on one of the IOM (IO managers) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C speed in Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="30" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="30" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1ga822cc31eb17394f82c159e6df0c0d67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_read</definition>
        <argsstring>(ns_i2c_config_t *cfg, const void *buf, uint32_t size, uint16_t addr)</argsstring>
        <name>ns_i2c_read</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Perform low-level I2C read using IOM transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store read bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="67" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="67" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1ga5757f76f1bb7b4bc298f6dfb21ef15c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_write</definition>
        <argsstring>(ns_i2c_config_t *cfg, const void *buf, uint32_t size, uint16_t addr)</argsstring>
        <name>ns_i2c_write</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Perform low-level I2C write using IOM transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="97" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="97" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1ga1d8814cf1501280bd5eff6d0772c00a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_write_read</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint16_t addr, const void *writeBuf, size_t numWrite, void *readBuf, size_t numRead)</argsstring>
        <name>ns_i2c_write_read</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>writeBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numWrite</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>readBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numRead</declname>
        </param>
        <briefdescription>
<para>Perform low-level I2C write followed by immediate read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Write buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Read buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numRead</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="129" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1ga44c2009f6720856edc6b5bc2f7aac4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_transfer</definition>
        <argsstring>(ns_i2c_config_t *cfg, ns_i2c_msg_t *msgs, size_t numMsgs)</argsstring>
        <name>ns_i2c_transfer</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="structns__i2c__msg__t" kindref="compound">ns_i2c_msg_t</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numMsgs</declname>
        </param>
        <briefdescription>
<para>Perform sequence of low-level I2C transfers (similar to Linux) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C messages to transfer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numMsgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of I2C messsages </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" line="142" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c" bodystart="142" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic i2c driver. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Adam Page </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2022-08-26</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ns__i2c_8h" kindref="compound">ns_i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_bsp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_mcu_apollo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;am_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ns_core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ns_core_api_t<sp/>ns_i2c_V0_0_1<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_I2C_API_ID,<sp/>.version<sp/>=<sp/>NS_I2C_V0_0_1};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ns_core_api_t<sp/>ns_i2c_V1_0_0<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_I2C_API_ID,<sp/>.version<sp/>=<sp/>NS_I2C_V1_0_0};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ns_core_api_t<sp/>ns_i2c_oldest_supported_version<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>.apiId<sp/>=<sp/>NS_I2C_API_ID,<sp/>.version<sp/>=<sp/>NS_I2C_V0_0_1};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ns_core_api_t<sp/>ns_i2c_current_version<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_I2C_API_ID,<sp/>.version<sp/>=<sp/>NS_I2C_V1_0_0};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1gaabcf91f33f95dec449ea8d5f1a9adef6" kindref="member">ns_i2c_interface_init</ref>(<ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>speed)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NS_DISABLE_API_VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ns_core_check_api(cfg-&gt;<ref refid="structns__i2c__config__t_1af9e40141faf3981a9a6bf547125c7904" kindref="member">api</ref>,<sp/>&amp;ns_i2c_oldest_supported_version,<sp/>&amp;ns_i2c_current_version))<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_VERSION;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>local<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0<sp/>+<sp/>cfg-&gt;<ref refid="structns__i2c__config__t_1a5f0329cb52c3983d5c6257b23b0f88a9" kindref="member">iom</ref>));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg-&gt;sIomCfg.eInterfaceMode<sp/>=<sp/>AM_HAL_IOM_I2C_MODE;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg-&gt;sIomCfg.pNBTxnBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg-&gt;sIomCfg.ui32NBTxnBufLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg-&gt;sIomCfg.ui32ClockFreq<sp/>=<sp/>speed;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(am_hal_iom_initialize(cfg-&gt;<ref refid="structns__i2c__config__t_1a5f0329cb52c3983d5c6257b23b0f88a9" kindref="member">iom</ref>,<sp/>&amp;(cfg-&gt;iomHandle))<sp/>||</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>am_hal_iom_power_ctrl(cfg-&gt;iomHandle,<sp/>AM_HAL_SYSCTRL_WAKE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>am_hal_iom_configure(cfg-&gt;iomHandle,<sp/>&amp;(cfg-&gt;sIomCfg))<sp/>||</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>am_hal_iom_enable(cfg-&gt;iomHandle))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_ERROR;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>IOM<sp/>pins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>am_bsp_iom_pins_enable(cfg-&gt;<ref refid="structns__i2c__config__t_1a5f0329cb52c3983d5c6257b23b0f88a9" kindref="member">iom</ref>,<sp/>AM_HAL_IOM_I2C_MODE);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1ga822cc31eb17394f82c159e6df0c0d67b" kindref="member">ns_i2c_read</ref>(<ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>size,<sp/>uint16_t<sp/>addr)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>am_hal_iom_transfer_t<sp/>Transaction;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui8Priority<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32InstrLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AM_PART_APOLLO4B)<sp/>||<sp/>defined(AM_PART_APOLLO4P)<sp/>||<sp/>defined(AM_PART_APOLLO4L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui64Instr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32Instr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.eDirection<sp/>=<sp/>AM_HAL_IOM_RX;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32NumBytes<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.pui32RxBuffer<sp/>=<sp/>(uint32_t<sp/>*)buf;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.bContinue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui8RepeatCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32PauseCondition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32StatusSetClr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.uPeerInfo.ui32I2CDevAddr<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(am_hal_iom_blocking_transfer(cfg-&gt;iomHandle,<sp/>&amp;Transaction))<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_ERROR;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1ga5757f76f1bb7b4bc298f6dfb21ef15c9" kindref="member">ns_i2c_write</ref>(<ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>size,<sp/>uint16_t<sp/>addr)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>am_hal_iom_transfer_t<sp/>Transaction;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui8Priority<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32InstrLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AM_PART_APOLLO4B)<sp/>||<sp/>defined(AM_PART_APOLLO4P)<sp/>||<sp/>defined(AM_PART_APOLLO4L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui64Instr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32Instr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.eDirection<sp/>=<sp/>AM_HAL_IOM_TX;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32NumBytes<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.pui32TxBuffer<sp/>=<sp/>(uint32_t<sp/>*)buf;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.bContinue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui8RepeatCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32PauseCondition<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.ui32StatusSetClr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Transaction.uPeerInfo.ui32I2CDevAddr<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(am_hal_iom_blocking_transfer(cfg-&gt;iomHandle,<sp/>&amp;Transaction))<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_ERROR;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_I2C_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1ga1d8814cf1501280bd5eff6d0772c00a4" kindref="member">ns_i2c_write_read</ref>(</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint16_t<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*writeBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numWrite,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*readBuf,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numRead)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-i2c_1ga5757f76f1bb7b4bc298f6dfb21ef15c9" kindref="member">ns_i2c_write</ref>(cfg,<sp/>writeBuf,<sp/>numWrite,<sp/>addr);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ns-i2c_1ga822cc31eb17394f82c159e6df0c0d67b" kindref="member">ns_i2c_read</ref>(cfg,<sp/>readBuf,<sp/>numRead,<sp/>addr);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1ga44c2009f6720856edc6b5bc2f7aac4c0" kindref="member">ns_i2c_transfer</ref>(<ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/><ref refid="structns__i2c__msg__t" kindref="compound">ns_i2c_msg_t</ref><sp/>*msgs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numMsgs)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__msg__t" kindref="compound">ns_i2c_msg_t</ref><sp/>*msg;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>msg_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numMsgs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>&amp;msgs[i];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;flags<sp/>==<sp/>NS_I2C_XFER_RD)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ns-i2c_1ga822cc31eb17394f82c159e6df0c0d67b" kindref="member">ns_i2c_read</ref>(cfg,<sp/>msg-&gt;buf,<sp/>msg-&gt;len,<sp/>msg-&gt;addr);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_len<sp/>+=<sp/>msg-&gt;len;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;flags<sp/>==<sp/>NS_I2C_XFER_WR)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ns-i2c_1ga5757f76f1bb7b4bc298f6dfb21ef15c9" kindref="member">ns_i2c_write</ref>(cfg,<sp/>msg-&gt;buf,<sp/>msg-&gt;len,<sp/>msg-&gt;addr);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_len<sp/>+=<sp/>(msg-&gt;len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg_len;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c.c"/>
  </compounddef>
</doxygen>
