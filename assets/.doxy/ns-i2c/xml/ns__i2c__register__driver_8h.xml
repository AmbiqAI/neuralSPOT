<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__i2c__register__driver_8h" kind="file" language="C++">
    <compoundname>ns_i2c_register_driver.h</compoundname>
    <includes refid="ns__i2c_8h" local="yes">ns_i2c.h</includes>
    <includedby refid="ns__i2c__register__driver_8c" local="yes">neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c</includedby>
    <includedby refid="ns__mpu6050__i2c__driver_8c" local="yes">neuralSPOT/neuralspot/ns-i2c/src/ns_mpu6050_i2c_driver.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>ns_i2c.h</label>
        <link refid="ns__i2c_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h</label>
        <link refid="ns__i2c__register__driver_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>am_bsp.h</label>
      </node>
      <node id="4">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="5">
        <label>am_util.h</label>
      </node>
      <node id="6">
        <label>ns_core.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h</label>
        <link refid="ns__i2c__register__driver_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c</label>
        <link refid="ns__i2c__register__driver_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ns-i2c_1gab7550497c4b76abb7cb964632b0bc39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_read_reg</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint32_t devAddr, uint8_t regAddr, uint8_t *value, uint8_t mask)</argsstring>
        <name>ns_i2c_read_reg</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Read 8-bit register over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Register Value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Read mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained from ns_i2c_interface_init </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Register value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Read mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" line="32" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c" bodystart="89" bodyend="100" declfile="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1gabb9e32d516ca511624b2e50480e34ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_write_reg</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint32_t devAddr, uint8_t regAddr, uint8_t value, uint8_t mask)</argsstring>
        <name>ns_i2c_write_reg</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Write 8-bit register over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Register Value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Write mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle obtained from ns_i2c_interface_init </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Register value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Write mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" line="45" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c" bodystart="113" bodyend="126" declfile="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1gaa8ccff053b2fcd4bc386d4a39735741d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_read_sequential_regs</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint32_t devAddr, uint32_t regAddr, void *buf, uint32_t size)</argsstring>
        <name>ns_i2c_read_sequential_regs</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read sequential 8-bit registers over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>First register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store register values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of registers to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>First 8-bit register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store register values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of registers to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" line="58" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c" bodystart="27" bodyend="45" declfile="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" declline="58" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-i2c_1ga778d58af078c2b77c2175a82ed80b9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_i2c_write_sequential_regs</definition>
        <argsstring>(ns_i2c_config_t *cfg, uint32_t devAddr, uint32_t regAddr, void *buf, uint32_t size)</argsstring>
        <name>ns_i2c_write_sequential_regs</name>
        <param>
          <type><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write sequential 8-bit registers over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>First register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of values to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>First 8-bit register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer of values to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" line="71" column="10" bodyfile="neuralSPOT/neuralspot/ns-i2c/src/ns_i2c_register_driver.c" bodystart="58" bodyend="76" declfile="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h" declline="71" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic i2c driver for register-based i2c devices. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Carlos Morales </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2022-08-26</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NS_I2C_REGISTER_DRIVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS_I2C_REGISTER_DRIVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ns__i2c_8h" kindref="compound">ns_i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1gab7550497c4b76abb7cb964632b0bc39d" kindref="member">ns_i2c_read_reg</ref>(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>devAddr,<sp/>uint8_t<sp/>regAddr,<sp/>uint8_t<sp/>*value,<sp/>uint8_t<sp/>mask);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1gabb9e32d516ca511624b2e50480e34ebd" kindref="member">ns_i2c_write_reg</ref>(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>devAddr,<sp/>uint8_t<sp/>regAddr,<sp/>uint8_t<sp/>value,<sp/>uint8_t<sp/>mask);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1gaa8ccff053b2fcd4bc386d4a39735741d" kindref="member">ns_i2c_read_sequential_regs</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>devAddr,<sp/>uint32_t<sp/>regAddr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-i2c_1ga778d58af078c2b77c2175a82ed80b9ee" kindref="member">ns_i2c_write_sequential_regs</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structns__i2c__config__t" kindref="compound">ns_i2c_config_t</ref><sp/>*cfg,<sp/>uint32_t<sp/>devAddr,<sp/>uint32_t<sp/>regAddr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NS_I2C_REGISTER_DRIVER</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-i2c/includes-api/ns_i2c_register_driver.h"/>
  </compounddef>
</doxygen>
