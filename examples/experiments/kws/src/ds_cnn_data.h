#ifndef DS_CNN_DATA_H
#define DS_CNN_DATA_H

#include <stdint.h>
#include "arm_nnfunctions.h"

//------------------------------------------------------------------------------
// Dimension macros (to be updated by the Python generator based on the TFLite file)
//------------------------------------------------------------------------------
#define INPUT_HEIGHT 49
#define INPUT_WIDTH  40

#define CONV1_KERNEL_H 10
#define CONV1_KERNEL_W 4
#define CONV1_STRIDE_H 2
#define CONV1_STRIDE_W 2
// For 'same' padding
#define CONV1_PAD_H  ((CONV1_KERNEL_H - 1) / 2)
#define CONV1_PAD_W  ((CONV1_KERNEL_W - 1) / 2)

#define CONV1_OUT_CH    64
#define CONV1_OUT_HEIGHT ((INPUT_HEIGHT + CONV1_STRIDE_H - 1) / CONV1_STRIDE_H)
#define CONV1_OUT_WIDTH  ((INPUT_WIDTH + CONV1_STRIDE_W - 1) / CONV1_STRIDE_W)

#define FC_IN_FEATURES  64
#define FC_OUT_FEATURES 12
#define FC_BIAS_SHIFT   0   // (to be filled in by the Python script)
#define FC_OUT_SHIFT    0   // (to be filled in by the Python script)

//------------------------------------------------------------------------------
// Declarations for conv1 layer weights and quantization parameters
extern const int8_t conv1_weights[];
extern const int32_t conv1_bias[];
extern const int32_t conv1_multiplier[];
extern const int32_t conv1_shift[];
extern const int32_t conv1_bn_multiplier[];
extern const int32_t conv1_bn_shift[];

//------------------------------------------------------------------------------
// Declarations for separable block weights and BN parameters (blocks 1-4)
// Block 1:
extern const int8_t block1_dw_weights[];
extern const int32_t block1_dw_bias[];
extern const int32_t block1_dw_bn_multiplier[];
extern const int32_t block1_dw_bn_shift[];

extern const int8_t block1_pw_weights[];
extern const int32_t block1_pw_bias[];
extern const int32_t block1_pw_bn_multiplier[];
extern const int32_t block1_pw_bn_shift[];

// Block 2:
extern const int8_t block2_dw_weights[];
extern const int32_t block2_dw_bias[];
extern const int32_t block2_dw_bn_multiplier[];
extern const int32_t block2_dw_bn_shift[];

extern const int8_t block2_pw_weights[];
extern const int32_t block2_pw_bias[];
extern const int32_t block2_pw_bn_multiplier[];
extern const int32_t block2_pw_bn_shift[];

// Block 3:
extern const int8_t block3_dw_weights[];
extern const int32_t block3_dw_bias[];
extern const int32_t block3_dw_bn_multiplier[];
extern const int32_t block3_dw_bn_shift[];

extern const int8_t block3_pw_weights[];
extern const int32_t block3_pw_bias[];
extern const int32_t block3_pw_bn_multiplier[];
extern const int32_t block3_pw_bn_shift[];

// Block 4:
extern const int8_t block4_dw_weights[];
extern const int32_t block4_dw_bias[];
extern const int32_t block4_dw_bn_multiplier[];
extern const int32_t block4_dw_bn_shift[];

extern const int8_t block4_pw_weights[];
extern const int32_t block4_pw_bias[];
extern const int32_t block4_pw_bn_multiplier[];
extern const int32_t block4_pw_bn_shift[];

//------------------------------------------------------------------------------
// For CMSIS-NN calls in depthwise and pointwise conv layers,
// common quantization parameters (assumed constant per layer) are declared.
extern const int32_t dw_conv_multiplier[];
extern const int32_t dw_conv_shift[];
extern const int32_t pw_conv_multiplier[];
extern const int32_t pw_conv_shift[];
extern const int32_t bn_multiplier[]; // used in both depthwise and pointwise BN (for simplicity)
extern const int32_t bn_shift[];

// Input and output scale and zero points
extern const float input_scale;
extern const int32_t input_zero_point;
extern const float output_scale;
extern const int32_t output_zero_point;

//------------------------------------------------------------------------------
// Fully connected layer parameters
extern const int8_t fc_weights[];
extern const int32_t fc_bias[];
extern const cmsis_nn_per_channel_quant_params fc_quant_params;

//------------------------------------------------------------------------------
// Unit test arrays (pre-generated from Keras inference)
// These arrays should be generated by the Python script.
extern const int8_t test_input[];
extern const int8_t expected_output[];

#endif // DS_CNN_DATA_H
