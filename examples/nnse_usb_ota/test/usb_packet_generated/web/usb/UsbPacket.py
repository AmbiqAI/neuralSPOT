# automatically generated by the FlatBuffers compiler, do not modify

# namespace: usb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UsbPacket(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UsbPacket()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUsbPacket(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UsbPacketBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x55\x53\x42\x31", size_prefixed=size_prefixed)

    # UsbPacket
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UsbPacket
    def Platform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # UsbPacket
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # UsbPacket
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # UsbPacket
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # UsbPacket
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # UsbPacket
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UsbPacket
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def UsbPacketStart(builder):
    builder.StartObject(4)

def Start(builder):
    UsbPacketStart(builder)

def UsbPacketAddPlatform(builder, platform):
    builder.PrependInt8Slot(0, platform, 0)

def AddPlatform(builder, platform):
    UsbPacketAddPlatform(builder, platform)

def UsbPacketAddVersion(builder, version):
    builder.PrependInt8Slot(1, version, 0)

def AddVersion(builder, version):
    UsbPacketAddVersion(builder, version)

def UsbPacketAddType(builder, type):
    builder.PrependInt8Slot(2, type, 0)

def AddType(builder, type):
    UsbPacketAddType(builder, type)

def UsbPacketAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    UsbPacketAddData(builder, data)

def UsbPacketStartDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDataVector(builder, numElems):
    return UsbPacketStartDataVector(builder, numElems)

def UsbPacketEnd(builder):
    return builder.EndObject()

def End(builder):
    return UsbPacketEnd(builder)
