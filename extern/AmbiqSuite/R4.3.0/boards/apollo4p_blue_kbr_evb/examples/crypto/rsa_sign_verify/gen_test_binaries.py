import random
import string
import textwrap
import os
import subprocess
import shlex

# Options
REMOVE_TEMPFILES = False

def main():

    # Generate a binary.
    binary = generate_random_binary(1024)

    # Calculate the hash and the RSA signature.
    rsa_signature, sha256_hash = get_signature(binary)

    write_c_files(binary, sha256_hash, rsa_signature)


def generate_random_binary(num_bytes):
    return list(random.randint(0, 255) for x in range(num_bytes))


def get_signature(b):
    with open("tempfile.bin", "wb") as tempfile:
        tempfile.write(bytes(b))

    try:
        subprocess.run(shlex.split("openssl dgst -sha256 -binary -out shafile.bin tempfile.bin"))
        subprocess.run(shlex.split("openssl dgst -sha256 -sign private_key.pem -out signature_file.sha256 tempfile.bin"))

        with open("shafile.bin", "rb") as shafile:
            sha_value = shafile.read()

        with open("signature_file.sha256", "rb") as signature_file:
            signature = signature_file.read()

        return signature, sha_value
    finally:
        if REMOVE_TEMPFILES:
            os.remove("tempfile.bin")
            os.remove("shafile.bin")
            os.remove("signature_file.sha256")


def write_c_files(binary, bin_hash, rsa_signature):

    mapping = {
        'binary': convert_to_hex(binary),
        'bin_hash': convert_to_hex(bin_hash),
        'rsa_signature': convert_to_hex(rsa_signature)
    }

    output_text = output_template.substitute(**mapping)

    with open('src/crypto_test_data.h', 'w') as o:
        o.write(output_text)


def convert_to_hex(b):
    hex_bytes = ', '.join('0x{:02X}'.format(x) for x in b)
    line_size = len('0x00, ') * 8
    return textwrap.indent(textwrap.fill(hex_bytes, width=line_size), ' ' * 4)


output_template = string.Template('''\
//*****************************************************************************
//
// crypto_test_data.h
//
// Autogenerated test helper file.
//
//*****************************************************************************
#ifndef CRYPTO_TEST_DATA_H
#define CRYPTO_TEST_DATA_H

#include <stdint.h>

const uint8_t pui8TestBinary[] =
{
${binary}
};

const uint8_t pui8TestHash[] =
{
${bin_hash}
};

const uint8_t pui8TestSignature[] =
{
${rsa_signature}
};

#define TEST_BIN_SIZE                sizeof(pui8TestBinary)
#define TEST_HASH_SIZE               sizeof(pui8TestHash)
#define TEST_HASH_SIGNATURE_SIZE     sizeof(pui8TestSignature)

#endif // CRYPTO_TEST_DATA_H
''')

if __name__ == '__main__':
    main()
