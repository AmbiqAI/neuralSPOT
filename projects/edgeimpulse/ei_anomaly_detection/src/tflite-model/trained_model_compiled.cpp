/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.10.2022 23:37:59

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 832;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.074757181107997894, } };
const TfArray<1, int> quant0_zero = { 1, { -61 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*600] = { 
  -54, -70, -57, 14, -33, -4, -64, -80, -75, 15, 52, -51, -52, 50, 22, 80, 53, -37, 56, -72, 57, -71, 53, -69, -44, -66, -83, 36, -47, -38, -47, -90, 5, 72, 1, -43, -38, 32, 13, -4, 34, 70, 56, 18, -72, 26, -39, 30, -34, -8, 31, 65, -89, 55, 13, -4, 2, -14, -34, -5, 11, -44, -49, -21, -61, -31, 40, 10, -9, -58, 42, -54, -5, -19, -21, 77, 22, 52, -4, 21, 45, 39, -14, 45, -2, -2, -38, 29, -32, 46, 68, -79, 1, 45, -15, -36, 20, 12, -7, 80, -94, -51, 55, -57, -24, -61, 10, -73, 14, 1, 5, -9, -62, -18, -20, -20, 35, 14, -57, -24, 64, 12, 33, 75, 43, -83, 66, -68, 49, -54, 51, -84, -18, -57, 45, -22, -44, 72, 14, 31, 47, -25, -93, 31, 28, 56, -4, -53, -10, 31, 52, 13, -17, 36, 45, 49, 7, -8, -22, 67, -44, -46, -70, 32, -62, -74, 14, -76, -55, 52, -15, -14, -73, 43, 73, -78, 0, 34, -1, 66, 47, -79, 67, -59, -39, -74, -56, 35, -52, 30, 46, 71, -54, 54, -15, 48, -47, 28, 24, -55, -26, -62, 47, 40, 73, -33, 65, -64, -53, -59, 28, -40, -2, -33, -9, -24, -30, 4, -85, -59, -8, -81, 24, 48, 30, -47, -12, -28, 79, 60, -41, -12, 28, 37, 18, -6, 38, 21, 46, 49, -33, 13, -14, 17, -5, 63, 41, -32, 3, 69, -82, -74, -27, -14, -91, 8, -18, -17, 22, -19, 28, 43, -10, -12, 1, 58, -23, -23, -71, 30, 60, 56, -78, -61, 37, -67, 45, -47, 30, -32, -63, 73, 10, 52, -66, 81, 39, -74, 44, 32, 26, -38, -83, 69, 30, 40, 10, 13, 9, 13, -74, -43, -10, -37, -70, -24, -31, 1, -22, 19, -10, -84, 77, -38, 15, 2, -82, -39, -20, 56, 61, 50, 32, -64, 62, 10, 17, 33, -43, 1, 56, -69, -43, 50, -30, 55, 65, -63, -58, 61, 30, -71, -54, -85, -73, -12, -45, -50, 11, -65, 15, 13, -61, -89, -24, -25, 26, -7, -30, -36, 24, -7, 12, 47, -69, -6, -58, 16, -68, 74, -91, -45, -67, -16, 65, 81, -89, -43, 71, -74, -65, 82, -31, -47, 34, -70, -16, 55, -32, -24, -1, -56, 38, 67, 4, -67, -42, -91, 2, 25, -54, -5, -23, -81, 44, 79, 22, -46, -14, 55, -76, -68, 36, -89, 62, -47, -29, -52, 27, 29, -21, -67, -72, -33, -54, 69, -74, -78, 11, -11, -68, -59, -48, -67, -59, -23, 47, 20, 77, -33, -13, -48, 20, -25, 20, 32, 39, 23, -96, -5, -76, 3, -51, -27, 21, -10, -28, -85, 28, 25, 48, -63, -16, 24, -19, -75, 2, 18, 33, 65, -47, 27, -45, 26, -71, -18, -18, -2, -27, -34, 31, 21, -20, -37, -79, -23, 47, -59, 12, 40, -11, 33, 76, -16, -56, 3, -5, -36, -14, -52, 70, -6, -29, -6, -56, 57, -9, 51, 28, -40, -17, -23, 47, 9, 15, -12, 78, -79, -65, -48, 43, -10, 41, -19, 1, -76, -55, 5, -39, 1, 55, 45, -88, -90, -51, -85, -16, -5, -26, 43, 56, -14, 16, -72, 12, 18, 64, -80, -61, 69, -87, 62, 69, -91, -79, 82, 14, -16, -71, 14, 54, 10, -91, 65, 75, -71, -59, -12, -14, 32, 48, -48, -63, -9, -92, 18, 34, -57, -78, 20, 35, 17, 82, -92, -8, -31, 46, -36, 42, -90, 17, 0, 52, 22, -49, -32, 23, 42, -13, -63, 
  10, 17, 0, -31, 16, 74, 50, 65, -65, 52, 41, -38, -18, -68, -46, -33, -31, -67, 55, 35, -6, -44, -64, -46, 25, -46, 19, 37, -43, 4, 63, 72, -78, -14, -74, 69, -27, 43, 55, -40, -41, 13, 15, 2, -67, -75, 20, -4, -15, -44, 49, 78, -73, -39, 72, -13, -72, 78, -17, -60, 67, 5, -45, 48, -28, -41, 27, -54, 47, -20, -81, 40, -22, -45, 41, 8, -62, -71, 44, -73, 60, -47, -69, -80, -37, -12, -65, 62, -29, -74, 66, -5, -69, -57, -82, 67, 2, 67, -80, -77, -11, 63, -48, 55, -47, 67, -61, 14, -26, -37, -39, 7, 36, -20, 57, -64, -70, -79, -66, 6, 36, -6, 11, -48, 28, -72, -79, 58, 45, -40, 5, -56, -60, -8, -23, 51, 35, 57, -26, 22, 28, 25, -5, 21, -59, -9, -79, 16, 19, 32, 27, -41, -47, 62, -23, -5, -64, -5, 28, -49, -3, -73, 30, 25, -39, 1, 60, -60, 30, 75, 73, -73, 51, -30, -48, 8, -41, 29, -54, -38, -10, 56, -55, 43, -22, 44, 10, -72, 49, -82, 56, 55, -60, 65, -76, -24, -53, 3, 65, 65, -21, -40, -77, -21, 21, -30, -42, 21, -42, 61, -44, 72, 22, 16, -48, -54, 53, -62, 15, -35, 50, -36, 69, -27, -26, 68, 25, -13, -3, 52, 77, -13, -57, -19, 67, -42, 7, -22, -77, 47, 36, -60, 43, 76, 52, 35, -31, -79, -37, 61, -55, 30, -13, 59, 43, -78, -58, 11, 13, 31, 52, 39, 72, -29, 31, 27, 6, 74, 68, 75, 49, -37, -52, -54, -10, 24, 69, -7, -21, -8, 43, -74, 75, 1, 5, -80, -5, 73, 11, -77, 47, 7, 14, 10, -50, 34, -73, -50, -1, 56, 80, 65, -36, 48, 20, 44, 21, 44, 16, -67, -34, -63, 16, -57, 80, 25, -53, -28, 8, -78, 38, -21, 62, 75, -68, -8, -46, 7, -26, 79, 73, -27, -43, -20, 33, 32, -75, -80, -77, 72, 50, 39, -16, 31, 49, -40, -9, 44, 16, -42, 75, -14, 76, -49, -54, 74, -77, -18, 35, -30, 25, 41, 6, 57, -80, -70, -54, -13, 24, -24, 13, -77, 78, 21, -18, -40, -6, -16, 34, -38, -67, 74, -56, 66, -66, 23, -66, -64, -12, 38, -27, -12, -36, 23, 51, 28, 29, -26, 7, -36, -7, -53, 7, 23, 55, -61, 74, 42, 10, 42, 19, -66, -18, -34, -51, -37, 26, -49, -19, 34, -11, 49, 75, -77, 30, -15, -33, 75, 19, -35, 8, -72, -47, -74, -9, -5, -51, 57, -52, -25, 57, -11, 45, 20, -56, -54, -76, -70, -51, -15, -36, -4, -77, 66, 13, -35, 60, -18, 15, -54, 34, -63, 68, 36, -74, -42, -41, 55, 77, 73, -60, 60, -34, -45, -24, -20, -44, -25, 56, 9, 13, -67, -43, 58, -77, -17, -50, 72, 54, 27, -62, -3, 40, 0, 36, -81, -9, 4, 38, 60, 67, 60, -38, -25, 70, 11, 3, 32, 20, -56, -26, 74, 72, -51, 67, 31, -44, -71, -6, 46, 58, 52, -48, -42, -70, 17, -1, 46, 60, 75, 68, -78, 3, -29, 7, -72, 9, 10, -33, -33, 65, 7, 11, -59, -40, 79, -77, 4, -56, -45, 58, -15, 52, -15, 79, 53, -2, 34, -3, 62, -15, -52, 31, 22, 29, 61, 74, -79, 16, 22, -67, 76, 60, 13, 43, 68, -8, 70, 14, 32, 42, 77, -53, 33, 34, 6, 29, 40, -46, -68, -18, 69, 29, 42, -54, -42, -49, -7, 64, 49, 
  -4, -59, -51, 31, 24, 31, -78, 6, -37, 7, -3, -6, -60, 7, 55, -68, -31, -6, 66, -53, 67, -12, -15, 29, -37, 90, 20, -43, 9, -36, -54, 83, -58, 31, -28, 38, 17, 14, -27, -52, 91, -3, -5, 21, -10, 8, 81, -11, 79, -38, 84, -3, 40, -46, 50, 66, 58, 21, 49, 69, 27, -52, -61, 28, 62, -48, -39, 35, 51, 72, 86, 44, -31, 105, -18, 45, -27, -10, -60, 10, 29, -39, -30, 35, 63, 105, 3, 40, -33, 47, -28, 43, -64, -28, 100, 39, 51, 15, 50, -16, -35, 30, 48, 7, 58, 61, -27, 81, -12, -28, 7, 29, 44, -20, 71, 40, 66, -53, -28, -54, 79, 92, 57, 67, -37, -22, -23, -36, -50, -13, 63, 2, 2, 55, 51, -10, -7, -18, 9, 73, 1, -29, 33, -4, 67, -42, -65, -25, -14, 27, 55, -48, -40, -19, -26, -2, 19, -50, -65, 23, 34, 28, 64, -14, 49, 56, -39, -42, 18, 60, -16, -14, 90, 58, -67, 44, -67, -29, 29, 7, 6, 37, 91, -19, -46, 13, -47, 85, 63, -41, 24, -50, 23, -35, 59, -36, -15, 74, -77, 7, 79, -62, 98, 43, 36, -17, 87, -16, 60, 66, -19, -38, 37, 67, 82, -63, 6, 27, 16, 47, -1, -51, 64, 28, -3, -17, -58, 74, -7, 77, -65, -63, 15, 33, 6, -39, 10, 20, 57, 17, -3, 98, 52, -39, -33, 7, -2, -48, 68, -10, 44, 47, -80, -46, -8, -44, 68, 0, 18, 16, 6, 4, 33, 12, -23, -2, 53, 55, -51, 56, 66, -61, -49, -22, 64, -53, 59, 21, 81, -5, 29, 91, 27, 94, -38, 14, -13, -51, 12, -58, 64, 78, 67, 15, 69, 83, 66, 29, 71, 86, -35, -31, 28, 11, 17, -47, -52, 82, 44, -70, 73, -61, 41, 81, -14, -48, -18, 37, 62, 57, -61, 19, 25, 63, 5, 6, -14, -66, 85, -18, -4, 44, -17, -21, -59, 12, -35, 77, 62, -47, -11, 41, 1, 102, -8, 1, 82, -69, -60, -27, -49, 18, 21, 82, -65, 45, 82, -45, 31, 28, 40, -8, -24, 3, -63, 10, 70, 49, 16, -7, 66, 53, -81, -53, 41, 63, 68, 59, -59, 7, -23, 55, -6, -28, 78, -18, -19, 26, 81, -66, -10, 51, 82, 25, 60, 51, -53, 43, 89, 74, 56, 38, -55, 94, 2, -78, -12, -24, 8, -46, 81, 9, 39, -22, 0, 26, 20, -68, 89, -28, -31, 44, 23, -43, 35, 39, -54, 70, 30, -27, 36, 88, 31, 37, 3, -14, 3, 2, -40, 75, 62, 40, 73, 32, -44, 102, 48, 14, 99, -31, 39, -32, 32, 60, -34, -17, -25, 65, 65, -72, 82, -57, 32, -56, 15, -32, 14, 77, -49, -28, 46, -17, -37, 42, -12, 5, 69, -13, 63, 86, -4, 71, -65, 9, -36, -53, 39, 4, -23, -74, 29, -55, 31, 54, -17, -47, 10, -42, -20, 41, 62, -73, -19, 30, -12, -32, 52, -83, 95, 2, 24, 108, -23, -3, 33, 58, 2, -23, 31, 47, -37, 74, -48, 36, -2, 54, -16, -29, 34, -1, 86, -6, 77, -23, 47, 7, 83, 77, -25, 59, -37, 98, 79, -7, 3, -36, -44, -15, -37, 35, 21, 44, 69, -56, -20, -60, 3, -31, 9, -11, -37, 15, -1, -62, -25, 40, -67, -69, 10, 81, -38, -21, -59, 17, 83, 39, -32, -29, -8, -9, 53, -44, -81, 102, 84, -71, -28, 13, -46, 86, -34, -36, 67, 25, 3, 76, -41, 0, 52, 4, 
  -78, -22, -64, 33, 21, 23, -56, 12, 12, 69, 0, -69, 13, 36, 7, -39, -21, -17, 75, 47, -80, -50, 80, -7, -11, 73, 5, -26, 61, 15, 0, 59, 5, -65, -18, 60, 19, -16, -59, 4, 5, -15, -19, 44, -60, -50, 59, -60, 45, 49, 67, -46, -31, 72, -73, -47, 43, 2, 51, -55, -74, -43, -17, 51, -44, 23, -25, -79, -77, 29, 37, -28, 0, -48, 10, -58, -68, 32, -39, 46, 47, -45, -44, 10, 42, 43, 61, -41, 68, -25, -3, -53, -31, 50, 47, -66, -61, -33, 45, -7, -16, -49, -61, 33, 14, 22, -5, -53, 32, -64, 34, -49, -27, -8, 18, 53, -7, 16, 15, 4, 32, -77, 80, -44, -18, -56, -51, 68, -75, -41, -42, -34, 62, 26, -58, -29, 64, 12, -67, 50, 22, 70, 10, -29, -40, 62, 43, -10, 72, 14, 49, 32, 21, -26, 75, -18, -6, -60, -40, -74, -3, 49, -62, 43, 69, -17, 16, 5, 66, 38, -59, 68, -68, 81, 70, 39, -48, 38, 68, -13, 70, -5, -42, 61, -49, 49, 69, -27, 0, -34, 0, -64, 36, 28, -28, -80, 44, 36, -29, -44, -50, -44, 73, -14, 12, 29, 49, 80, -27, 33, -66, -4, 57, -66, -72, -77, -66, -16, 47, -36, -6, -49, -74, 10, -77, 3, -21, -25, 39, 50, 73, 30, -35, -26, 41, 12, 66, -77, -58, -40, -59, -23, -6, 14, 51, -53, 9, 32, -73, 72, -36, -6, -62, -1, 56, -13, -13, 46, -47, -63, 76, 70, 11, 5, -59, 66, -80, -61, -70, -50, 78, -1, -26, 65, 9, 11, 20, 64, 22, -15, 1, 44, 58, 24, 80, -66, 6, -48, -63, 47, -39, 46, 28, 75, 49, 80, 27, -71, -60, 69, 42, -33, -69, 21, -3, -14, -15, 81, 16, 24, 38, -68, 14, 65, 69, -20, -11, -8, -5, -60, -80, -56, -29, 22, -43, -39, 20, -35, -54, 19, -27, 61, -53, 12, -60, -2, -8, -35, -19, -57, -52, 64, -33, 21, 34, -40, 28, -29, 55, 77, -56, -22, -48, 65, 70, 64, 16, 12, -63, -25, 3, 58, 0, 28, -37, 14, 23, 46, -28, -78, 6, 53, 25, 13, 11, -72, 18, 41, -52, 64, -7, -43, -24, -65, 53, -19, -39, 40, 21, -23, -62, 75, -45, -77, 22, 75, 48, 19, -52, -80, -50, 28, 32, -17, 0, 41, -25, 66, 5, 30, -15, 22, 35, 50, 6, 55, -6, 80, -72, -47, -73, 49, 42, -47, -38, -45, -24, -51, 19, 5, -24, -29, 69, -52, -35, 37, -61, 19, 1, 53, 67, -2, 76, -45, -80, 0, -16, 73, 58, 54, -5, -66, 76, 29, -80, 65, -79, 80, -43, -17, 1, 48, 68, -13, -10, -29, 81, -25, -58, 18, 48, -28, 69, 54, 7, 39, -73, -26, -35, 46, -39, 71, -73, -44, 71, -76, 40, -38, 29, 60, -38, 78, 2, -66, -26, -26, 3, 1, 54, 53, 4, 63, 34, 30, -65, 37, -34, -31, 16, 54, -55, -23, -65, -9, -74, 15, 41, -62, -39, -37, -32, 25, 38, -20, -55, 64, 75, -66, 1, 11, -8, 78, -39, -51, -58, -60, 43, -66, 58, -32, -68, -43, -48, 75, 79, 68, 30, -66, -15, 0, 80, 19, 13, 22, 64, -45, 40, -2, 44, -50, 1, 6, 78, 27, -44, 41, -65, 28, 38, 65, -45, -69, 19, -49, 26, -12, 13, -62, -15, -33, -14, -48, -16, 40, -48, 2, 49, -53, -8, -76, 48, 78, -16, 28, -21, -11, -17, -19, 5, -68, 
  4, 74, -40, 55, 64, 81, -55, 9, 25, 31, 65, 12, 1, 22, -59, 4, -4, -26, 26, 53, 23, -26, 6, 27, -3, -3, 77, 37, 104, 7, 10, -7, -32, 51, 0, -22, 51, 79, -51, -36, 70, -59, -47, 22, -71, 3, 106, 65, 50, 65, 39, -64, 57, -39, 59, 24, 51, -52, 78, 27, -48, 61, -21, -35, 124, 2, 23, -2, -12, -68, 19, -2, -2, 65, 21, 38, 74, 24, 2, 122, -14, 46, 91, -45, 55, 42, -8, -31, -21, 77, -49, 67, 37, -27, 105, 8, -44, 66, 87, 13, -10, -5, -42, 115, -18, 22, -25, -16, -14, 87, 41, 62, 3, 80, -29, 58, 53, 83, -23, 69, -38, 39, -58, -5, 114, 75, 85, -27, 1, 31, -13, 27, 13, 61, 48, -51, -27, -75, 83, 51, 23, 75, 43, 80, -16, 57, -22, 65, 107, -42, -32, 56, 19, -7, 93, -36, -5, -35, -10, 3, 26, 70, -12, -20, -20, 29, 100, 53, 38, -18, 85, 82, 69, 39, 35, 127, 71, -64, 59, -65, 12, 97, 83, -14, -19, -65, 20, 117, 59, 37, 8, 4, -20, 25, -30, 53, 40, 53, -26, 88, -17, 55, 67, 1, -71, -28, 81, 18, 82, 0, 32, 104, -67, -2, 34, -36, 47, 44, -11, 66, 40, 39, 54, -52, -45, -35, 13, -33, 24, -27, -11, -70, 93, -33, 20, 55, -65, 80, 35, 11, 14, 20, -69, 67, -16, 5, -53, 40, -19, -4, 79, 28, 41, 39, 66, 15, 1, -38, 13, -32, -24, 69, 82, -58, 22, -5, -65, 33, 59, -68, -30, 19, -55, 63, -25, 43, -53, 36, 76, -57, -50, 1, 74, 81, -46, -51, 68, -17, -46, -5, -29, -37, 87, -45, -49, 81, 10, -6, 7, -3, -37, 84, 11, -8, 29, -23, -63, 17, -8, 4, -32, 16, -23, -5, 1, 73, 22, -7, 26, 27, -21, 59, 107, -55, 52, 83, 17, -2, -46, 40, -11, -42, 32, -71, 75, 44, 60, 20, 41, 34, 84, 38, -48, 77, -41, 34, 13, -72, 58, 73, 54, -73, 71, -63, -4, 14, 84, -7, 107, -19, 72, 47, -75, 46, 86, 39, -7, 22, 63, 30, 87, 51, 68, -23, 21, -50, 110, -5, -8, -1, -24, 77, 33, 27, -15, 17, 33, -66, -41, -9, 33, -41, -62, -40, 70, -66, -16, 32, -16, -57, 18, 36, 51, -3, 0, 38, 75, -23, -69, 41, 77, 0, 100, 50, 7, -17, 16, -7, -30, -38, 47, -35, 70, 11, 64, 41, 11, 9, 1, 82, 82, -13, 81, 95, 87, 50, 62, -62, 7, -24, -14, 5, 112, 45, 24, 63, -40, 42, 89, 52, -20, 43, 57, -27, 55, -53, -48, 24, 10, -20, -22, -58, -9, 89, 46, 16, 68, 36, -53, 83, -38, -3, -35, 47, 44, 11, 61, 3, 1, -29, 8, -41, -41, -19, 88, 45, -59, 19, -6, 2, 9, -33, -45, 9, 72, -2, -38, -36, -13, 117, -55, 7, 37, -63, 85, 86, 78, 31, 59, -19, 55, 45, 3, -69, 91, -54, -9, 111, -67, -15, 120, 81, 83, 34, -41, 40, 82, -40, 82, -42, 50, -26, 35, -36, -3, 66, -62, 64, -11, 10, 34, 80, 7, 78, 11, 52, -18, 64, -22, -17, -6, -27, 1, 38, -14, -6, -29, -13, -57, 8, 79, 9, 62, -19, 38, 54, -46, 27, 71, 15, -29, 103, 80, 10, -44, 18, 24, -13, -40, 88, -34, 45, 15, 18, 85, -69, 25, 30, 33, -30, -12, -24, 14, 16, -29, 42, 41, 59, 55, 44, 
  38, -48, -18, -16, -4, 27, 17, 24, -4, -69, -42, -52, 71, -40, 56, 12, -44, 26, 51, 65, -42, -77, -18, -28, -57, 34, 11, -34, 41, 24, 34, 73, 1, 69, -26, 47, -11, 19, 75, -46, -5, 18, 66, 41, -26, 48, -77, 46, -15, -10, -15, 0, -29, -37, -15, 47, 19, -33, 48, 6, -19, -3, 63, 1, 14, -4, 47, 29, 12, -61, -80, -36, -43, -76, -42, -76, 17, 77, 26, 33, -74, 16, 19, 0, 76, 72, -28, 19, -60, -25, 22, 19, -73, 14, -60, 1, 32, 71, -59, 30, -4, -9, 11, 44, 52, -47, -6, -59, -32, 1, 3, 59, 47, -15, 29, -49, 5, -37, 44, -75, -56, -20, 14, 53, 11, 38, 38, -47, -41, 70, -32, 38, -43, -47, 60, -75, -30, 18, -10, 16, -15, -5, -55, -51, 53, 69, -24, -54, -23, -42, -10, 54, -57, 55, -65, -66, 10, -66, -32, -69, 13, 32, 7, -79, -10, 67, 5, 26, -77, -67, 15, 60, 73, 45, 65, 65, 61, -22, -82, 71, 1, 44, -27, 57, 30, 60, -31, -14, 23, -11, -33, -65, -51, 62, 74, -9, 57, 71, 72, -82, -67, -76, 23, -51, 75, -3, -47, -58, -44, 20, -51, -26, -50, -64, 62, -69, -15, -50, 55, 75, 46, 36, 73, 53, -56, 47, -32, -10, -30, 55, 1, -24, -1, -11, -41, 7, 25, -69, 31, -53, 74, 56, 38, -51, 53, -14, -13, -32, 67, -19, -72, 70, 20, 44, -17, 49, 46, 2, -73, -35, -54, 72, -6, -66, -31, -51, -47, 64, 25, -52, -27, 0, -58, 20, 10, -65, -48, 12, -76, 29, 46, -53, -46, -47, -5, 17, -24, 0, 43, -11, -78, -11, -78, -38, 78, -64, 2, -42, 65, 78, -83, 59, -83, 40, 38, -1, 45, 58, -19, -60, 65, -62, -23, -61, -48, -75, 56, -13, -77, -64, 59, -67, -63, -7, 37, -19, 34, 39, -20, -59, -54, -21, -1, 28, 22, -60, -3, 21, -59, 14, 71, 13, 18, -13, 2, -19, 37, -2, -46, -53, 70, -35, 54, 38, 26, 20, -6, -47, 67, 4, -37, -41, -20, -53, 10, 54, -4, -67, 32, 9, 4, 72, -57, 76, -81, 45, -9, -50, -41, -74, 26, 73, -8, 74, -31, -80, 5, 72, 30, -13, -74, 40, -76, 10, 55, -68, -80, -2, -67, 40, -18, 13, 64, 66, 31, -3, -11, -62, -75, -80, 19, -26, -44, 17, -54, -47, 38, 45, 65, -4, 23, 33, 34, 51, -27, -11, 21, 41, -36, 23, 64, -61, 24, 29, -57, -51, 58, -16, 21, -34, -24, -1, 28, 6, -82, -48, 7, -37, 5, -66, 74, -17, 68, -18, -53, 6, 68, -68, 22, -83, -68, -55, 76, 16, -53, -13, -55, -62, -5, 61, 60, -22, -14, 6, 55, 71, -26, 60, 8, 64, -23, 0, 3, -29, -31, -64, 41, 11, 65, 26, 48, -37, 51, 30, -22, -22, 63, -69, -3, 22, -65, 5, -70, 25, -18, -38, 27, 24, 5, 77, 60, 60, -52, -73, -9, 38, -65, 77, -10, 41, -23, -27, -75, -19, -34, 43, 11, -65, 61, 4, 58, -49, -81, 13, -9, 44, -83, 67, 5, 35, 65, 43, 70, 73, 28, -65, 14, 14, 21, 64, -36, 42, -35, 29, -58, 78, 32, 16, 52, 21, -71, 30, 11, -69, 36, 37, -73, 28, -81, -34, -38, 13, -5, 54, 50, -48, -22, -70, 59, -77, 61, 0, 47, 1, -56, -23, -30, -6, 3, 17, -39, -63, -31, 25, -13, 11, -67, 21, 45, -50, 
  -63, 75, -13, -32, -28, 21, 20, -15, -40, 40, -64, -63, -82, -54, 66, 16, -14, 35, 19, -26, 12, -13, 76, -63, 17, 4, -42, 10, 23, -25, 32, -21, -53, -10, -26, -37, 15, 58, 4, -34, 66, 0, -73, -40, -15, -6, 61, 65, 39, 39, 26, 7, 57, -31, -78, 42, -48, 33, 9, 9, 28, -19, 9, -29, -30, -71, 23, -19, -39, -14, -69, 39, -17, 38, -34, -47, 22, 20, 60, 20, 35, 8, -24, -1, 36, -39, -37, 59, 74, 3, -33, -9, -1, 59, -69, 10, 48, -53, 71, 64, 29, -12, 45, 25, -12, -65, 39, -75, -64, -11, 70, 32, 46, 39, -50, 50, -70, -80, 20, -23, 49, -14, 2, -7, -51, 12, 71, -24, -24, -34, -31, -54, -21, -12, 47, 54, -46, -75, 18, 11, 43, -49, -61, -72, 64, 54, -21, 21, 78, 17, -17, 1, -4, -22, 25, 24, -24, 34, -73, 75, -73, 53, -29, 1, 75, -42, -75, -56, -66, 41, -56, -3, -52, -7, 73, 36, -77, 0, -50, 69, 63, -61, 73, -13, -58, 61, -14, -58, -37, -8, -43, 46, -66, -55, 43, 64, -11, 49, 46, -13, -25, 65, 52, -27, -58, 71, -55, -28, -46, 77, -61, 55, -54, 50, 16, 36, -67, 49, -16, -50, -67, 58, 12, -43, 78, -57, -71, -19, 43, -59, -44, 26, -31, 38, -41, 0, -31, 6, -45, 25, -76, 39, -44, -22, 3, 44, 14, -63, 7, -42, -12, -35, 34, -62, 51, 17, 42, 34, -57, -71, 38, 35, -44, -11, 25, 75, -16, 7, 59, 14, -38, 63, 61, -13, -37, -51, 28, -9, 72, 24, 60, 44, -60, 5, -38, 14, 70, 11, 19, 66, 28, -63, 73, 78, -8, 0, 29, 15, -6, 39, -40, 80, -13, 10, 22, 61, -17, 6, 56, 51, -21, 27, -35, 29, 14, 23, 56, 21, 13, -44, -65, -5, -20, -25, -77, 78, -79, 53, 10, -3, -40, 67, -39, -42, -78, 47, -49, 39, 77, 73, -4, -54, 54, -1, -15, -22, -44, -58, 45, 60, -17, -44, -73, -27, -47, -41, -18, -47, 77, 45, -14, 44, 64, -6, -34, 10, -73, -30, 26, 76, -47, 7, 51, -20, -54, 27, 22, -22, 8, -16, -71, -64, -66, 28, -24, 77, 0, 8, 1, 20, 77, -68, 71, 45, 65, -70, 70, -77, -24, -66, -2, -24, -16, 61, -68, 22, -27, -70, -49, -20, -42, 9, -4, -60, 61, -52, 6, 34, -6, 37, 61, -36, 10, -53, -67, -81, -13, 61, -35, -3, -43, 8, -32, 8, -60, 70, -56, 39, 57, -55, 2, -1, 47, -66, -74, 45, 62, -73, -37, -63, 37, -6, 57, 45, 37, -11, 4, -45, -61, -13, 82, 62, -14, 79, 11, -82, -10, 61, 73, 77, -69, -57, 14, 50, -45, 83, -59, -34, 63, -33, 48, 72, 51, -8, -2, 55, -9, -41, 4, -12, 61, -42, 30, -28, -3, 2, -46, -30, 51, -70, 17, -17, 2, -54, -28, 51, -7, 42, -24, -75, -71, 6, -36, 73, -70, -33, -52, -1, -58, 56, 57, -53, 56, 50, 46, -42, 81, -71, -75, -24, 4, 17, -57, 21, 17, -24, -67, 36, -4, 19, 76, -13, -68, 51, 76, -39, 56, -69, -4, 43, 29, 28, -42, -53, 27, -31, 61, 39, 21, 72, -65, -4, 14, 70, -23, 82, -41, 6, -13, -36, -42, 0, 6, -84, -17, -51, -11, 59, -20, -11, 34, 46, 19, 69, -6, 34, 44, -17, 53, -19, 71, 33, 3, 46, 63, -55, 60, -25, 3, -72, 
  -27, 78, -54, -19, -66, 74, 12, -74, 64, -62, 50, -43, -58, -35, -44, -8, -2, -63, 5, -23, -25, -63, -77, -16, -13, -69, 56, 24, 29, 56, -71, 67, -70, -41, 8, 25, -79, 18, 34, 27, 9, -72, 50, -53, -53, 60, 35, 62, 17, 2, 72, 25, -37, 73, 32, 9, 0, 70, -26, -46, -12, 40, 23, 60, -71, 25, 33, -55, 50, -47, -76, 67, -26, 77, 28, 38, 12, 5, 64, 62, 56, 69, -9, -6, -47, 26, 54, -64, -61, 73, -72, -67, -78, -72, -58, -49, -80, -60, -52, 44, -73, -1, -72, 23, -4, 19, -9, 54, 44, -14, 68, 10, 54, -34, -9, 43, 2, 64, -41, 23, 16, 72, -75, -45, -61, 70, -35, -33, -32, 56, -8, -72, -70, 2, 77, -48, 53, -17, 62, 30, -54, -2, -50, -27, 22, 24, -32, -70, 31, 53, -79, -26, 9, 35, -31, 2, 15, -17, -57, 20, 30, 56, -2, -38, -69, -78, 33, 48, -18, -47, 27, -40, 39, -51, 49, -24, 71, 8, -49, 4, -49, 1, 28, 9, 12, -48, -25, -6, 42, -79, -10, 2, 28, 28, 72, 75, 30, -36, 63, -46, -14, 73, 67, -27, -54, -74, 62, 8, -10, 26, 20, -74, -67, 30, -71, -8, 79, -8, 78, 11, 81, 49, 66, -24, 54, 36, -75, -80, 56, -23, -1, 9, 68, 39, -73, 24, -77, -21, -53, -63, -80, 64, 46, -11, 36, -67, 36, -30, 62, -12, 47, -6, 17, -53, -75, 3, 13, 45, 23, 52, 33, 72, 44, -71, 63, -46, 1, -62, -71, -17, -62, -33, 76, 76, 24, 65, 31, 19, 15, 58, 67, 14, 20, 63, 26, 58, -78, 22, -32, 48, 33, -54, 4, 28, -16, 20, 38, -52, 46, 19, 64, 66, 39, 14, -50, -23, -57, 49, 69, 55, -29, 57, -4, -33, -37, 31, -75, 24, -5, 79, -19, -4, -41, -25, 50, 25, -14, 56, -42, -29, 52, 70, -74, -18, -78, 19, 5, -34, -18, 80, -53, -74, -8, 37, 15, -71, 63, -69, -7, -17, -47, 73, 13, 21, -32, -53, -45, -6, 10, 46, -71, -74, -5, 16, -9, -27, -32, -15, -15, 57, 0, -20, 52, -51, 63, 12, 5, -43, 59, 18, -30, 29, -6, -58, -56, -57, -58, -20, -16, 38, 33, -31, 79, -34, 79, 36, 35, 74, -48, 70, 64, -40, 2, 28, 57, 56, 39, 37, -65, -6, -11, -77, -6, 66, 0, 33, 78, -42, -21, -46, 28, 48, 64, -70, 18, 77, 8, 77, 74, 50, 37, -56, -29, -77, 40, 57, 9, 74, 19, -46, -73, 76, 33, 9, -20, 21, -30, 54, -21, 40, -10, -34, -40, -79, 4, 40, 10, 60, -75, -11, 1, -64, -61, -63, -70, -70, 79, -62, -60, 41, -53, -43, 60, -52, 78, 0, -2, 61, -77, 80, -45, 22, -54, 11, 23, 40, 35, 68, -78, -58, 78, -30, 1, -80, 31, -63, 64, 30, 31, 78, 29, 5, -51, 2, -46, -15, 57, -67, -76, 41, -60, -49, -9, 55, 24, -57, 41, 14, -73, -29, -69, -80, 7, 47, 58, 12, 47, 75, -2, -45, -12, -15, 81, -13, -46, -43, -62, 7, 57, 48, -77, 60, -19, 49, -24, -69, -26, 9, 15, -16, 17, -34, -25, 78, 51, 36, 32, -55, -78, -7, 7, 11, -28, 4, 43, -68, -24, 31, -9, 12, 2, 40, 67, -23, 19, -18, -2, 52, -64, -35, 33, 46, -33, 27, -3, 22, 6, -48, -69, -28, 21, -11, -68, 3, -68, -5, -73, -73, 51, -9, 
  22, 30, 27, -79, 47, 34, -28, -19, 31, -66, -82, 73, 3, -34, -83, -52, 11, -16, 55, -3, -12, -25, -17, -45, -37, 68, -71, 16, 61, -4, -31, 27, -37, 29, 53, 22, -15, 6, -70, 17, 37, -68, -59, 51, -25, 2, 60, 36, -58, 65, -83, -62, 14, -58, -26, -3, -70, 25, 44, 21, -16, 56, -45, 76, 66, 68, -82, 9, 1, -83, 28, -56, 33, 76, -58, 70, 31, 41, 64, -14, -39, -23, 52, -30, 38, -10, 33, 26, 29, -18, 61, -16, -78, -23, 2, 29, -19, -75, 71, -61, 61, 49, 31, -78, -55, 32, 12, -67, -3, 30, -8, -22, -64, -31, 66, -54, 42, -81, 44, 36, -31, 5, 58, -66, 50, -59, -50, -37, 47, 73, -35, -74, -27, 27, 23, -55, 48, 6, 30, -44, 26, -49, -10, -47, 34, 25, 43, 64, -37, -42, 61, 76, 7, -11, -39, 59, -58, 36, -11, -52, -21, -28, 10, -27, -3, 47, -29, 17, -54, -20, -47, -28, -63, 34, -12, -56, -63, 66, 16, 57, 58, 40, 34, 61, 56, 8, -17, -63, 66, 31, -40, -49, -18, -38, 31, -39, -18, -60, 73, 77, 48, 9, 21, 25, -14, -20, -9, -4, -69, 72, -80, 26, 28, 61, 1, 39, 13, -19, 73, -26, -20, 69, -5, -42, -49, -31, -44, -80, -47, 59, 64, -33, 10, 78, 56, 11, 15, -54, -51, 36, 74, -44, 25, -65, 39, -39, 30, -22, 59, -65, -28, -50, -70, 19, 37, -60, 19, 0, 24, -6, -12, -32, -71, -72, 48, 72, -44, 6, 54, -1, 16, 12, -19, -69, -2, 55, -61, 66, -49, 47, -38, -30, 14, -2, 78, 0, 10, -10, -25, -28, 60, 71, -3, -4, 41, 16, 40, 20, -5, 68, -71, -75, 36, 65, 58, -45, 67, -60, 73, -68, -8, -44, -64, -46, 24, -34, -7, -38, 44, 69, -12, -68, -62, 28, -62, -67, 51, -62, -41, -19, 77, -35, 74, -46, -28, -6, -74, 77, -53, 23, 13, 58, 10, -24, -46, 70, -2, 10, -75, 49, 45, -12, -68, -51, 45, 58, 18, 14, -34, 58, -67, 67, -60, -21, -37, 13, -18, -83, -74, -17, -10, -61, -38, 1, -6, -80, 39, 39, 43, 5, 68, -10, 15, -16, 16, -62, 41, -17, -57, 1, 5, -39, 70, 38, -50, -28, -37, 47, 29, 35, 26, -13, 59, -16, 27, -73, -42, 70, 23, -45, 24, -61, 28, 7, 72, 70, -3, -56, -11, -65, -39, 11, 5, 69, 40, -33, -40, -24, -24, -10, -28, -12, 44, 70, 37, -35, -26, 64, -24, -34, 23, 28, 27, 39, -29, 5, 43, -12, 59, 73, -1, 76, 56, -15, -53, -60, 0, -63, -59, -25, 15, 44, -30, -7, -40, -31, -29, -76, 9, 64, -12, -7, 76, 1, 46, 10, 60, -64, -78, 29, -45, -5, 72, -49, 46, 65, -71, 2, -59, 78, 42, 4, 66, 29, -5, -67, 26, 61, -70, -48, -43, -5, 75, -83, -6, 46, 35, -23, 74, -74, -64, 78, 32, -37, -59, -49, -77, 32, 44, -48, 28, 33, -49, 52, -55, 72, -1, -66, -3, 60, -15, -47, 22, -20, 21, -81, -43, -70, 39, -45, 38, -40, 26, 12, -33, -8, -41, -71, 65, -35, -61, 48, 62, -65, -64, -6, -53, 78, 31, 62, -44, -69, 49, 60, -52, -83, -51, -80, -53, -77, 66, -37, -52, 42, -2, 5, 42, 3, 71, 5, -17, 13, -38, -29, -45, 61, 74, -56, 17, -42, -49, 50, 57, 12, -31, -83, -32, -11, 38, -66, 
  -4, 15, 7, 39, -70, -4, -6, -30, 40, -14, 3, -26, -38, -3, 6, -34, 21, 71, 65, -65, 50, -51, -6, 67, 61, -59, -27, -50, 70, 46, -62, 24, -3, -59, -12, 68, -9, 59, -4, 58, -56, -34, 41, 46, 23, -62, 53, -8, -25, 56, -20, 79, -48, 78, 57, -76, -62, -32, 43, 23, -45, -28, 75, -52, 72, 67, 74, -45, 58, 34, 8, -34, -42, 15, 33, 1, 52, 53, 34, -51, -1, -63, -31, 23, -78, 39, -21, -29, 23, 7, -67, 21, 46, -58, -43, -14, 7, -56, -39, -54, 14, 11, 15, -45, -11, -23, -68, -46, -62, 77, -56, 4, 22, -67, -49, 14, 67, -14, -51, 79, 27, -19, -42, -68, 28, -3, 24, -13, 2, -67, 56, 53, 70, -79, -60, 80, -42, 49, 64, 23, 27, 80, -67, 43, -31, 25, -25, 13, 2, -22, 40, -46, 4, 26, -64, -24, -62, 79, 13, 74, 50, 9, -6, 24, -65, -74, 63, 4, -20, -60, -71, 74, 6, -55, 3, 79, 59, -39, 3, 14, -71, -61, -47, 77, 9, -38, 53, 0, -44, 40, -44, -41, -45, 31, 37, -44, -24, -25, -19, -5, -76, 6, -66, -53, 27, 39, -79, -12, 64, 51, -61, -9, -63, 50, 27, 24, -48, -57, -36, -44, -5, -79, 74, 72, 66, 35, 18, -28, -75, 6, 8, 30, -53, -30, 44, 48, -17, 54, -27, 11, -4, 41, -10, 59, -53, -13, -71, -80, -10, 8, -67, -46, 7, -12, -22, -37, -24, 70, 48, 49, -75, -3, -61, -47, 3, -45, -30, 43, 63, 27, -71, 80, 23, 12, -6, -57, -39, -54, 72, 0, 51, -50, 66, -11, -47, 23, 33, -22, 1, 4, 40, -51, 38, -6, 58, 36, 12, 9, -45, 16, -66, 19, 78, -36, 34, -16, -2, 74, -35, -62, 37, 19, -57, 21, -46, 5, 79, 12, -66, 50, -32, -78, -1, -2, -56, -40, -14, -26, 7, 47, -10, 56, 43, 78, -37, -5, 74, -43, 33, -50, -9, 16, -16, -65, 13, -48, 25, -68, -79, 39, 24, 25, -20, -20, 71, -80, 19, 63, -1, -24, -48, 39, 15, 61, -78, -70, 11, -72, -68, 15, 42, 58, 4, -47, 34, -80, 43, -46, 59, -72, -34, -55, -55, 48, 51, 52, -59, -38, 42, 20, 33, -31, -1, 78, 18, -57, -16, 8, 12, 39, 38, 10, -64, -11, -17, -74, 13, 79, -11, 48, -22, -49, 2, -30, -11, -8, -38, 70, -79, 20, -57, -6, 67, 62, 63, -56, 44, 30, -36, 33, 68, -73, -8, -27, -46, -21, 55, 43, 24, -65, 16, 6, 73, -20, -69, 9, 56, 79, 53, 15, 12, -33, 51, -1, -12, -12, 27, -40, -6, -4, -20, -43, -63, 70, 61, -56, -49, -31, -48, 50, 65, 32, 17, -15, -6, -6, 22, 5, -14, -74, 18, -61, 12, 3, -80, 22, -48, -6, -45, -54, 22, 78, -9, -32, 46, 69, 9, -51, -61, -28, 71, 67, -38, 43, -9, 74, -33, 57, -1, 75, 73, -14, -67, -15, 74, -51, 40, 5, 7, 66, 6, 70, 75, -31, -48, 45, 70, -5, -22, 68, -15, 34, -70, 37, 80, 27, -48, 33, -11, -58, -11, -2, -64, 11, -58, -58, 29, 45, 80, 62, 19, -69, -34, 49, -63, -61, 7, 58, -23, 75, 44, -50, 62, 75, 65, -48, -26, -70, -71, -18, 67, -68, 54, -79, 37, -79, -13, 14, 4, -59, 3, 51, -77, -60, 50, -38, 54, 28, -30, 53, -35, 62, -29, -23, 16, -66, 17, 40, -38, -30, 
  -67, -69, -78, -62, 73, -30, 23, -5, 9, 51, 4, 66, 13, 65, -12, -61, -53, 46, -27, -11, -46, 2, 48, -75, -37, 23, -60, 42, 25, -69, 74, -16, -77, -4, 67, 27, -31, 7, -54, -10, -35, 1, 62, 67, 24, 49, 13, 46, -35, -77, 70, -41, -67, -1, 46, -53, 8, 64, -79, 71, -47, 13, 44, -73, -61, -42, 63, -23, -81, -44, -35, -15, -48, -43, 22, -40, -67, -71, 39, 49, 54, 69, -46, -68, -59, 40, 40, -48, 33, 50, 51, -18, 22, -7, 14, -47, 63, -9, 62, 61, -52, -27, -1, 45, -80, 23, 77, 74, 70, 38, -7, 31, -57, 25, -68, -34, -60, 45, 51, -79, 31, -15, 65, 22, 29, 38, -34, -31, -32, -80, -38, -44, -30, -62, 35, 52, -13, 10, 27, -35, 36, -43, -25, -67, -18, 6, -19, 62, -64, 40, 32, -38, -58, -39, -34, 36, -58, -55, -68, 45, 38, -43, -6, 35, 52, 36, -41, -42, 15, -19, 44, -70, -44, 13, 37, 44, 35, -1, 37, -34, 23, -17, -48, -33, -37, -30, 32, -67, 47, -62, 73, 45, -76, 43, 66, 21, 14, 45, -6, 70, 5, 27, 65, -19, -23, -41, 60, 21, 41, 50, 56, -28, 15, -58, -72, -14, -10, 60, -39, 25, 0, -19, -15, 14, -37, 16, 66, -15, -33, -57, 28, 19, -4, -19, -44, -36, 54, 44, -60, 65, -8, -27, -38, 34, 63, 17, 6, 67, 34, -29, -35, -10, -54, 60, -76, -27, 55, -34, 8, 46, -15, -5, 34, -12, 21, 5, 40, 19, -21, 22, -42, -33, -54, 73, -20, 63, 62, 13, 1, 42, -8, 36, 15, 60, 45, 18, -52, 48, 22, -78, 59, -15, 8, -24, 42, 33, -55, 38, 40, -4, 16, -47, -48, -40, -74, -17, 35, -11, 8, 67, 8, 16, -75, 51, -73, -48, 51, -20, -11, 16, -73, 1, -63, -11, 27, -28, -56, 10, 35, -66, -60, -42, -81, -8, -70, -75, 74, 3, -69, -67, -11, 9, -18, -32, 73, 27, -49, -57, -9, 77, -17, 74, 69, 38, -59, -20, -5, 76, 33, 75, 65, -21, 73, -37, -15, 22, 44, 53, -36, 51, 53, -66, 51, 67, 3, 57, -21, 48, -76, -44, -41, 76, 76, -30, -32, 12, -44, 76, 50, -79, -27, 31, -62, -2, 13, -51, -35, -80, -75, -73, 35, -64, 35, 66, -33, 74, -77, 30, 45, 22, -35, -12, -43, -44, -14, -7, -8, -11, 65, -19, -17, -23, 11, -15, -8, 63, -61, -66, -4, -15, -57, 68, 78, 70, -32, -77, 39, -81, 23, 63, -43, -1, 72, 16, -63, -51, -49, -75, 49, 11, -63, -45, 32, 20, -74, 43, 15, 43, -67, -17, -6, -67, 65, 4, 15, 58, 39, -12, 13, -5, -28, 23, 39, -63, -52, 20, 21, -51, 43, -14, 13, -76, 14, -9, -57, -16, 26, 43, -26, -36, -23, -54, -28, 26, -54, 48, 0, -81, 7, -41, -71, 75, 9, 42, 76, 26, -15, 13, 0, -79, 39, 29, 74, 11, 77, -48, 67, -25, 11, -74, 66, -37, 9, 72, -23, -76, -69, -6, -63, -74, 43, 7, 1, -72, -62, 47, -70, -55, 57, 13, 75, -2, -73, -12, 28, 9, -30, -65, 52, 33, -66, 7, 11, 64, 45, -44, 23, 35, -51, -30, 37, -54, -13, -78, 36, -1, 9, -16, 66, -26, -64, -31, 73, 56, -27, 46, -65, 40, -17, 70, -2, -68, 41, 27, -47, -76, -31, 38, -78, -2, 32, -76, 10, -80, -59, 29, 14, -56, 56, -81, 
  64, 47, -7, -17, 11, 76, 17, 59, 59, 72, -14, 63, 7, -51, -51, 32, 14, 43, 59, 61, 37, -34, 0, 16, 53, -53, -20, 61, -47, 46, -73, 35, -56, -32, 60, -65, 61, 42, 61, -37, -30, -27, -82, -69, -71, -12, -76, -3, -7, 15, -22, -11, 68, 77, 74, -37, 60, 28, -72, 32, -23, -8, 47, 6, 10, 47, 55, -44, 26, 35, -52, -42, -1, 80, -30, 17, -49, 27, -47, -13, -65, -30, 36, 64, 16, -21, 54, 75, -31, -66, -7, 64, 21, -56, -67, -66, -8, 45, -20, -64, -71, -26, 53, -58, 29, 43, -45, 11, 48, -12, 1, -10, -64, -50, 29, -3, -40, 77, -57, -53, 46, 69, 43, 56, 72, 18, -2, -76, -54, 55, 84, 58, 42, 25, 20, 65, -13, 57, 39, -28, 57, -82, 64, 5, -24, 68, -19, 27, 22, -67, 26, -77, -64, 54, 14, -5, 22, 46, 15, 50, -60, -35, 61, 79, 66, -17, -42, -66, 52, -40, -18, 22, 15, -44, 43, -63, -81, 20, -50, 49, 15, -57, -68, -73, 49, -63, 5, -58, -27, -14, 12, 63, 67, 62, -77, -44, 5, 22, 62, -23, -44, -78, -26, 35, -31, 21, 32, -32, 75, 22, -81, 29, -77, -2, 38, -30, -31, -76, 9, -9, 44, -83, -59, 22, 54, -17, -74, 30, -41, -42, 54, -80, 33, 71, 17, 6, -45, 52, 66, -1, 27, -30, -74, 40, -24, 9, 53, 63, -33, 58, -25, -2, 76, -23, -81, 42, -65, -6, 34, -39, -69, -27, -39, -11, 48, 6, 62, -46, 69, -30, 22, -73, 41, 69, 35, 69, 51, 69, -20, 3, -67, -27, -51, 12, -27, 66, 1, -41, 62, 3, 20, 22, -17, 7, 13, 1, 56, -76, -67, -51, 21, -42, -12, 18, -40, 29, -75, -41, 3, -8, 33, -74, 45, 19, -54, 15, 2, -48, 3, -47, -60, -44, -54, 29, -66, -72, 61, -19, -22, -27, -55, -42, 70, 25, 59, 71, -14, -31, -70, 49, 56, 52, -30, 7, 54, 9, 83, -69, 30, -47, 56, -8, 56, 71, -48, -76, 70, 48, 77, 18, -35, -17, -34, -80, 49, -14, 19, -46, 54, -42, 58, -36, -11, -64, 44, 32, 4, 22, -60, -67, -82, -11, -72, 4, 74, -75, 65, -16, 64, 76, -12, 25, 34, 16, 55, -15, -81, 43, -16, 40, 75, 12, -61, 70, -27, 21, 34, 67, -30, -28, 22, 57, 51, 52, -82, -2, -61, -12, 15, 55, -44, -11, 25, 50, 82, -20, -35, 79, -69, -15, -72, -48, -12, 29, 49, -76, 10, -42, -40, -76, 78, -19, -17, -48, -79, 74, -63, -5, 43, 71, 17, 82, 43, -80, -50, -67, -81, 6, 12, -6, -72, -56, -53, -57, -59, -66, 36, -47, 66, 50, -9, -79, -22, 71, 6, -72, -53, -36, -20, -29, 0, 68, -44, -61, 62, -25, -16, -50, -2, -44, 49, -19, 21, -66, 11, -76, 83, -60, 23, 69, -75, -63, -25, 37, 52, -16, -21, -61, -4, -29, -30, 31, 71, -76, 45, -11, 55, -76, -51, -47, 46, 36, -43, 17, 45, -12, -65, 30, -71, -77, 56, -83, -62, 43, 19, 83, 62, 10, 75, 13, -10, -62, 5, -35, -2, -72, -32, 32, -31, 13, -6, -23, 33, 31, 39, 2, 60, -35, 58, 62, 39, -81, 7, 62, 17, 66, -8, -27, -32, -64, -57, 16, -2, -71, 60, 34, -23, 53, -42, -57, 47, -62, -52, 27, 3, -57, -7, -79, 64, 53, 14, 33, 14, -74, 46, 14, -35, -39, -61, 5, 
  19, 63, 25, -55, 79, -13, 13, -15, 1, 67, 12, -26, -65, 84, 84, -84, 59, 9, -82, 4, -60, -22, 92, 1, -73, 9, -45, 16, 75, -21, 46, -9, -13, 60, -49, -31, -50, 11, -47, 65, -1, 29, 5, 79, 1, -42, 61, -25, -19, 48, -14, -34, -8, -52, 57, 71, 65, -5, 65, 42, -66, -27, 37, -15, -1, 61, 64, 89, 78, -71, -56, -55, 14, 12, -58, 47, 20, 33, -49, 51, 16, -16, 86, -2, -56, 67, -42, -26, -1, -11, 54, 48, -48, 8, 14, 80, -87, 53, -52, -72, 63, 91, -26, -39, -12, 51, 28, 2, 29, 6, -35, 38, 29, -27, -16, 85, 32, 20, 75, -67, -38, 14, -2, -59, -2, 66, 35, -44, -38, -17, -1, -53, -33, 25, 78, -66, 58, 64, 34, -9, 30, -87, 89, 57, 29, 5, -59, 65, 78, 81, 63, -22, 9, 26, 52, -9, 56, 88, -11, 52, 55, 58, 59, 39, -37, -7, 86, 58, 19, 60, -24, -51, 82, -45, -4, 57, -66, 57, 85, -49, -20, -51, 24, -4, 2, 39, 38, 55, 76, -48, -35, 6, 61, 46, 72, 21, 3, 84, -51, 2, 66, 70, 53, 8, -67, -73, 47, -70, -57, 74, 22, 80, 68, -50, 73, -2, 32, -73, 73, 1, -22, 24, -82, -63, 78, 24, -75, 51, -51, 23, -12, 64, 61, -44, -60, 12, -62, -8, 13, 26, -79, 85, -53, -50, 7, -22, 50, -2, 28, 15, 21, -64, 0, 24, -24, 57, -42, 76, -69, 31, 73, -70, 28, 78, 31, 65, 3, 16, -62, -23, 43, -39, 62, -40, 11, -39, 42, 2, -32, 34, 17, -10, 35, 59, 3, 42, -40, -54, 22, -14, 46, 6, -72, 7, 70, -57, 43, -78, -28, -65, -31, -54, -43, -22, -18, 82, -24, 89, 9, -78, 37, -12, 71, -53, -50, -25, 53, 23, -81, 3, -58, -74, 42, -64, -72, 16, 87, -43, 32, -39, -11, 14, -4, -15, 92, 24, -76, 51, -30, -58, 86, -59, 35, 79, 61, 14, 3, 1, -44, 30, 80, -48, -55, 30, -31, -61, -63, 17, -64, -3, -75, -19, 54, -70, -40, -22, -48, -10, 5, -69, 65, -26, -71, -7, 47, -9, 39, 6, -41, 64, 43, -74, 24, 63, 7, -16, 80, 18, 71, 42, -21, -9, 30, -87, 76, 67, 15, 3, 16, 7, -6, 69, -3, -56, 70, -39, -68, -28, 2, 28, 79, -50, -12, -16, -37, -27, 59, -4, -25, 35, -73, 36, 51, 39, -11, -54, -74, 68, 77, 64, -36, 42, 49, 72, 44, 33, 46, 44, 73, -17, 77, 48, 75, 67, 43, -13, -42, -81, 59, 73, -11, -5, -10, 15, 82, 64, 47, -21, 29, -3, 36, 56, 59, -24, 59, 50, -21, -3, -44, -59, 87, 17, -38, -26, -19, 12, -12, -3, 77, 13, -2, 49, -7, -2, -41, 46, 63, 57, 23, 12, 70, 61, 11, 28, 80, -24, 0, 72, -60, -40, 88, 36, 43, 89, -38, 82, 20, -62, 11, -23, -52, -23, 62, 3, -58, -42, -58, -30, 55, 24, 36, -49, 22, 30, -68, 26, -54, -2, 28, 48, 93, -19, -52, 32, -69, 88, -38, -17, 56, -46, -78, -26, 41, -29, 74, 67, -9, 28, -15, 18, 18, 52, -33, -66, 71, 18, -37, 5, -16, -33, -38, -69, -12, 53, 14, -65, 26, -47, 52, -44, -15, 69, -36, -84, 21, 70, -67, 5, 13, -2, 9, -63, -37, -33, 27, -37, 70, -65, 43, 52, 37, 8, -27, 6, -61, 31, -30, 65, -43, 19, 
  6, 39, -22, 52, 33, -17, 38, 8, 27, 59, 100, 73, 38, -11, 7, 17, -27, -38, 23, 86, -74, -28, 54, -28, -79, 83, 47, 13, 86, -34, -80, 100, 25, 38, 77, 41, 70, -27, 47, -75, -6, -5, 52, -1, -46, 6, -23, -5, -1, 95, -50, -49, 13, -16, 51, 68, 16, 75, -49, -32, -1, 26, 80, -11, 22, 55, 28, 77, -79, 70, 88, -63, 0, 54, 74, -60, 54, 20, -27, 104, 22, -43, 65, -12, 46, 64, 51, -47, -37, 79, -19, 66, -50, -17, 54, -6, 46, 66, 59, 51, -43, -1, -26, -60, 5, -47, 59, -5, -75, 100, 72, -65, 76, 10, 26, -25, -39, -79, -32, -45, -56, 37, -43, 6, -41, 25, -21, 31, 41, -34, -20, 0, 67, 72, -22, -40, -15, 8, -4, -26, 75, -65, 0, -55, 26, 30, -63, 45, 101, -15, 18, 5, -62, -70, -3, 7, 37, 79, 39, -11, 56, -35, -61, 72, -68, 45, -31, -58, 9, 56, 52, 9, 46, -75, 79, 83, 82, -32, 46, -49, 43, 13, 49, -41, 34, 45, 77, 91, 39, 11, -50, -36, 65, -47, -14, -61, 10, -73, 59, -57, 2, -10, 95, -36, 71, 93, -55, 74, 100, -77, 35, 2, 47, -25, 0, 44, -17, -29, -76, 27, 39, -80, 32, -19, 33, -20, 91, 5, -59, -2, -57, 0, 20, 29, 72, 71, 79, -76, 44, -38, -1, -47, 71, 54, 102, -1, 7, -59, 81, -41, 61, 24, 6, 13, -1, 69, 35, 6, 44, -3, -8, 33, 86, -9, -12, 56, -69, -18, -50, 40, -69, -36, -6, 55, 82, -13, 18, 48, 56, -47, 84, -43, -35, -37, 4, 59, -61, -67, -46, 63, -18, 10, 56, 4, 59, 0, 11, -17, 71, -49, -30, 48, 25, -76, 1, -60, -70, -37, -45, 15, 29, -66, 38, 71, 25, 75, -17, 20, -37, 59, 47, 4, 71, -47, -30, 25, -17, -14, 69, -55, -81, 86, 65, 18, 54, -17, 81, 7, 64, 36, 27, -37, 78, 9, -55, -50, -56, -8, 50, -3, -15, 45, -50, 70, 23, 50, 74, -51, -47, 33, 71, -59, -35, 51, 3, 30, 48, 68, -10, 63, 16, -77, -12, 95, 12, -39, 34, -52, -24, 96, 65, 23, -47, 26, -71, 104, 66, 24, -41, 19, 41, -61, 14, -4, -50, -55, -15, 74, -22, 47, -19, -37, 69, -3, 0, -69, 37, -52, -11, 81, 54, 15, 33, -39, 14, 48, 57, 35, 36, -9, -71, 36, 35, -44, 95, -58, -35, 0, -32, -5, 40, -76, 54, 105, 47, -20, -22, 68, 63, 13, -73, 47, -1, 37, 29, 23, 71, -38, 102, -31, 58, 72, 58, -20, -8, 79, 33, 3, 79, 46, -5, 8, -1, 44, 50, -58, 61, -49, -6, 83, -44, -10, 67, 22, -43, 10, 70, -55, 12, 65, -27, -26, -8, -21, 65, 73, 9, 43, 65, 67, 39, -62, -6, 9, -74, 26, 59, 9, 8, 81, -30, 44, 58, 35, 13, 24, -2, -67, -29, 18, 58, -10, 31, -8, 47, 16, 78, 45, 35, 39, 68, 21, -27, -28, -66, 45, 0, -8, 78, 5, -72, 49, -41, -9, -79, 62, 33, -19, -16, -35, -15, -38, 82, 7, 52, -66, 20, 53, -47, -12, -37, -52, -46, 27, -48, -45, 70, 53, 51, 78, 79, -71, -40, -44, 17, -16, 64, -47, 30, -56, 11, 23, 61, 6, 87, 65, -22, -55, -44, 76, -16, -27, -66, -44, 76, 24, 11, 7, -22, 55, -49, 32, 82, 81, -5, 68, 82, 71, -12, 0, 
  -49, -86, 73, -40, 30, -35, 39, 41, 0, -31, -75, -21, -67, -30, 1, -14, -53, -43, -36, -56, 10, 31, -56, 22, 44, -6, -66, -13, -43, -2, 11, -11, 50, 51, 56, -84, 18, -1, -65, -29, -9, -70, 54, -78, -36, -2, 44, -84, 54, 1, -66, 3, 41, 33, -15, -42, -35, 7, 53, 57, -80, 45, -24, -23, -80, 0, 45, 63, -64, -74, 50, -18, 61, -4, -30, 20, 57, -15, -23, -12, 31, -76, -41, 31, -32, 41, -24, 40, -68, -52, 22, 75, 45, -63, 41, -13, -79, -25, -7, -44, -48, -46, -82, -30, -59, -59, -43, -66, 62, 59, -85, 37, 14, 11, -28, -43, 32, 8, -38, -75, -25, -31, -30, 26, -8, -74, -80, -80, -53, 54, -66, -32, -15, 2, 28, 32, -51, 18, 53, -40, 36, 6, -28, 22, 14, -2, -28, 0, 47, 8, 75, -82, -84, 23, -6, -45, -66, 12, -75, 39, 61, -49, -31, 70, 67, -67, -79, 30, 26, 28, -59, 78, -42, 16, 7, -88, -76, 36, -22, 14, 73, -4, 7, 14, 0, -50, 40, -63, -62, 8, -68, -73, -26, 3, 42, -41, 8, 9, 44, -78, 26, 29, 25, 14, 71, -68, -71, 68, -70, 18, 57, 50, -56, -40, 7, -69, 35, -44, 26, 27, -28, 23, 62, 49, -30, -65, 35, -7, -62, -84, -43, -24, 57, 3, 75, -12, 63, -64, -57, 57, 78, -8, -23, 0, -15, -39, -24, -67, 65, -59, -47, -78, -24, -45, 41, -8, 30, -38, 59, 42, -87, -56, 67, -37, -61, 15, -70, -71, -2, 22, 53, -53, -6, 68, -16, -61, -15, 71, 70, -26, -56, 70, 29, -34, 34, 43, 49, 43, -43, -10, -67, -32, -55, -12, -66, -35, 44, -75, -71, 10, -2, -84, -57, -42, -86, -6, 59, 50, -7, -12, -54, 61, -74, 33, 45, 35, -48, 27, 26, 40, 64, 63, -84, -24, 9, -56, -37, -2, 73, -11, 18, 64, -78, -39, 31, -70, 28, 3, 62, 77, 58, -39, 1, 71, -16, 25, -46, 69, -67, 12, 57, 40, 49, -13, -34, -12, 24, 27, -77, 68, -69, 61, 74, 75, 51, 42, 46, -33, -86, 8, -80, -23, 34, -69, 0, 61, 55, -9, 15, 58, -18, -34, -83, 6, -67, -69, 26, -52, 71, -47, -70, -9, 54, 30, 24, 43, -57, 50, -83, -45, 7, -31, -6, -51, -67, 57, 29, 35, -54, 59, 74, 39, 60, -54, -77, 38, 55, 72, -29, 20, -36, 12, -60, 23, -1, -81, 13, -8, -12, 71, -8, 73, -54, -71, 43, 77, -36, -62, 26, -27, 8, 46, -32, 38, -73, -37, 0, 38, -80, 11, 57, -82, 31, -59, -19, -32, -33, -32, 31, 52, -6, 70, 19, -17, 59, 55, 46, 40, 24, -33, -32, 18, -14, 52, -20, 3, -40, 70, -21, -77, 32, 64, 29, 32, -74, -8, 47, -61, 25, 44, 20, -50, -52, 8, 3, -46, -80, -9, 39, 31, -9, -10, 28, -30, -34, 0, 31, -63, -70, -49, 1, 16, -5, -53, -40, 17, -54, 57, -43, 76, -8, 71, 77, 9, 28, 26, -50, 8, -17, -79, -4, 63, -74, -76, 26, 42, -14, 3, 19, 25, -44, -27, -6, 79, -78, -84, -34, 44, -29, -16, 37, -9, -81, 45, -10, 51, -48, 6, 8, 67, 66, -52, 41, -51, -33, 22, -26, 37, 37, -29, 64, 66, -72, 66, 28, 23, 1, -19, -53, -76, -52, 60, 0, 27, 23, 43, 6, 68, 24, 17, 13, -42, -9, 56, -20, 27, -43, 1, 29, -85, 
  -48, 88, -25, 28, -8, 70, -47, -28, -11, 66, -35, 37, -31, -11, 79, -60, 6, 55, 51, 67, 19, -34, 32, -64, -35, -12, 49, 30, 19, 8, -73, -54, -70, 48, 63, -26, -20, 61, -3, 61, 79, -46, 64, 2, -32, 48, -63, 75, -28, 65, -10, 46, 31, 27, 17, 56, -9, -31, 0, -65, 48, -30, -59, -28, 6, 38, -43, -59, -74, -22, 78, -13, 22, -28, -33, 62, -21, -33, -56, 91, 16, 78, 63, -41, -22, -62, -37, 41, 54, 75, -65, 7, 3, -29, 50, -1, -72, -21, -3, 2, -25, -71, 22, -23, 13, 73, -21, 7, 28, 4, 74, 46, -68, 59, 74, -24, -42, 80, 74, -53, 28, 90, 59, 74, 16, -6, 14, 1, -56, -44, -24, -8, -36, 9, -8, -20, 19, -13, 57, -27, -55, -17, -67, 19, -26, 34, -16, 11, 88, -68, -71, -6, 80, -44, -38, -80, 64, -10, 41, -34, -65, 27, -72, 57, 12, -77, 62, -77, -70, -13, 69, 53, 15, -76, -11, 50, 55, -6, 57, 37, 37, -12, 24, 66, 25, -76, 40, 10, -81, 55, 24, -44, 81, 53, 59, 59, -26, 50, 29, 77, -48, -13, 50, 29, 14, 43, -61, 15, -67, -1, -12, -64, -14, 16, 37, -50, 52, 93, 1, 72, 45, -43, -60, 42, -64, -28, 10, 62, 20, 11, 30, 3, 62, -59, 20, 39, 74, -16, 83, 33, 17, 17, -1, -23, 50, -74, -39, 38, 67, 67, -35, -77, -51, -68, 45, -31, -58, 62, -76, 84, 3, 15, 71, -51, 25, 62, -50, -76, 62, 50, -17, 54, -30, 28, 85, -42, 41, -49, 69, 18, -6, 70, 32, -60, 5, 70, -10, -63, 29, -43, -52, -19, 1, -18, -38, -69, 79, 0, 49, 10, 50, 16, 41, -28, 66, -31, -42, -12, 54, -19, 75, 61, -48, 61, 71, 7, 30, 18, 74, -8, -31, 61, -28, 15, 41, 62, -57, -4, -39, 70, -30, 26, 19, 75, -48, 13, -9, 37, -38, 26, 57, 5, -19, 23, 11, 29, -19, -35, -53, 73, -25, 58, -24, 69, -63, -18, -2, 64, 56, -65, 21, -47, -5, -62, 42, -68, -44, 84, 18, -63, 22, 7, -52, 31, -73, -27, 53, -51, 47, 37, -42, 63, -61, 18, 58, -59, 72, -15, 84, 5, 20, -63, 37, 21, -23, 10, 17, -47, -36, -39, -42, 48, -19, -9, 7, 50, 79, -1, 3, -4, -32, -79, -30, -59, -77, 83, -22, -58, 1, -35, 60, 69, -11, 12, 38, -31, -60, 44, -45, 78, -49, 68, -77, -37, -53, -38, -55, 22, 31, 36, -15, 26, 56, -37, -7, -48, 2, -74, -41, -52, 9, 34, -13, 41, -19, 30, -53, 27, 22, 29, -41, -31, 54, 30, -59, 44, -38, 57, -33, 59, 24, 9, 4, -16, -3, 55, -17, -57, 43, -56, -78, 12, 24, -23, 73, 18, 29, -68, 58, 55, 3, 65, -77, 69, -67, -30, -25, -63, 70, -57, -78, 6, -23, -17, 45, 13, 9, 69, -47, -2, 43, 68, -25, -8, -56, 21, 63, 65, 68, -52, 52, 81, 44, 93, -66, -7, 67, -80, 6, 58, 37, 11, 2, -75, 41, 60, 52, -22, 83, 47, -77, 83, -51, -9, -59, -4, 45, 11, -52, 65, -9, 60, -19, -42, -32, 36, 91, -31, 76, -3, -31, 57, 13, 69, -22, 0, -27, 17, -51, -61, 0, 34, -69, 74, 61, 18, -60, 20, -41, 5, 54, 63, -11, -38, -7, 33, 13, 14, -42, -33, -32, -25, 42, 13, 19, 8, 16, -48, -36, 36, 
  -60, 69, 48, 14, -3, 0, -9, -38, -10, 25, 3, -65, -45, -72, -52, 38, 56, 39, -67, -10, -38, -72, -36, 60, 50, 31, -17, 9, 79, 74, 6, -15, -7, 50, 20, 22, -7, -26, -63, 32, 21, 78, -46, -59, 35, 25, 40, 56, 76, 20, 70, 63, -14, 23, -20, 11, -66, -12, 5, -35, -35, -27, -18, 75, -19, -26, -12, 27, 4, 78, -31, -62, 52, -13, 19, -74, 64, 20, 43, 78, 39, 79, 31, -76, 28, 39, 3, -55, 31, -21, -74, 65, 68, 45, -45, -39, 68, 54, 81, 55, 81, 48, -72, -8, 28, 14, -73, 31, 32, -2, 56, -41, -44, -68, 25, -47, -71, 24, 15, 66, 25, -78, -21, 73, 37, -2, -31, 33, -49, -53, 72, 48, -33, 51, 79, -74, -67, -11, -24, 73, 20, 44, -58, -44, 73, -20, -24, 43, 8, 10, 35, 1, -44, -48, -81, -50, -17, -10, -3, 5, 50, 81, 65, -68, -14, -61, -13, 37, 20, -78, 25, 65, 13, -79, 38, -7, -2, 75, -18, -79, -46, -55, 36, 52, -20, 63, -45, -12, 26, 48, -54, -4, -43, 10, 37, 20, -16, -17, -58, 71, 65, 41, 25, -38, -16, 3, -14, 42, 60, 38, -27, -68, -72, -68, -62, 41, -66, 12, -55, 52, 75, 5, 9, -6, -64, 24, -16, 80, -43, -78, -36, -18, 64, -62, 14, 50, -35, 45, 46, -66, 31, -32, 72, -28, 56, 78, -37, -18, 43, -1, -68, 20, -22, -11, -18, -47, -75, -1, 8, -59, -31, 49, -13, 71, 33, -67, 31, -76, -48, 74, -47, 59, 3, -14, 4, -11, -40, 54, -10, 14, 71, -26, -21, -74, -30, 5, -19, -23, -13, 15, -58, 11, 43, -34, -79, -23, -32, 41, 39, -39, -49, 68, 42, -72, -61, -37, 51, -43, -23, 54, -70, -7, 6, 21, -52, -38, 31, -55, -68, 63, 31, 24, -5, -54, -31, 22, -5, 9, -35, -14, 41, 20, -18, 17, 74, -52, -37, -26, 60, -3, -62, -3, 30, -29, -21, 61, 2, 56, 47, 64, -31, -15, -62, 28, 56, 11, 19, 24, -36, -30, -3, -56, 66, -3, 36, -31, -42, -35, -38, 15, -47, -68, -56, 59, -64, -57, -11, 7, -70, 57, 17, 41, 76, -68, -14, -65, 27, -15, 23, -29, -38, -80, -65, -11, 43, -61, 29, -10, 71, 15, 31, 51, 5, 21, -14, -28, 63, -66, -1, 62, -30, 81, 64, -32, -15, 29, 19, -6, 45, 43, 53, 13, 8, 25, -59, 53, -41, 37, -76, -20, -7, 20, 53, 51, -18, 37, 54, -12, -64, 59, -2, -58, -3, -1, -63, 75, -58, 23, 67, -23, -1, -43, -38, -73, -2, 20, -6, 46, -37, -67, -76, 15, 0, 44, 10, 42, 39, 21, -41, 70, -15, 48, -31, -22, 22, -28, -8, -2, -29, -78, 72, -60, -29, 12, 13, -44, -43, -52, -78, -49, -48, 2, -2, -65, -34, -22, -26, -22, 79, -78, -43, 5, -28, -59, 59, 43, -44, 32, 19, 64, -22, 53, 11, 69, 74, 6, 70, 53, -81, 63, -58, -36, 4, 4, 32, -34, -4, 57, -45, 73, -18, -30, 24, 70, -60, -15, -27, 55, -55, -57, -80, -66, 26, 13, -49, -58, -11, 35, 7, 1, 53, 17, -18, 28, 0, 1, -36, 14, 47, -64, -8, -53, 52, -50, 72, -52, -14, -41, -59, 23, -41, -52, -55, 18, -47, 23, -4, -36, 19, -9, -19, -12, 69, 12, 4, -81, -71, -14, 51, 29, 71, -20, 62, 27, 49, -17, 63, 0, -34, 43, 
  -26, 34, -79, -60, 94, -37, 20, 77, -50, 12, 29, 30, 23, 1, -18, -18, 31, -19, -39, 87, -80, -18, 70, -72, 75, 17, -63, 84, 83, 36, 53, 45, 9, 22, -50, -80, 77, 36, -70, 20, -35, 48, -55, 82, 74, 78, 72, 68, 12, -37, -36, 56, -18, 69, 79, -37, -10, -21, 43, -68, 63, -11, 48, 63, 78, -30, -26, -26, -12, 20, 71, 52, -73, -59, 37, 64, -53, -29, 54, -58, 53, -73, -14, -78, 63, 14, 71, -63, -12, -59, 14, -36, -68, 70, 104, -47, 57, -35, 41, 52, 49, 74, 76, -20, 0, -11, 9, 31, -15, -19, 52, 72, 80, 9, 46, 56, 9, -36, 94, 26, -6, 48, 29, 84, -21, -50, -49, -18, -6, -39, -14, 26, 83, 102, 66, 54, -16, 38, 81, 6, 71, -71, 89, 7, 30, 60, 30, -5, 7, 32, 23, 70, 22, -32, -30, -74, 2, 10, -38, -9, 40, 2, 31, -60, 46, -33, -40, -56, -30, -17, 8, 72, -62, 52, 68, -25, 12, -54, -55, -64, -11, 12, 42, -27, -29, -11, 31, -18, 55, -40, -36, 2, -35, 92, -19, -51, -19, -2, -61, 70, -5, -6, 99, 65, -66, -23, 1, 86, 4, -3, -12, 66, 45, 2, 27, -79, -66, 42, -83, 67, 68, -29, -19, 18, 22, 61, -12, -14, 69, -9, -19, 33, 76, 28, -58, 30, 27, -43, 62, -26, 4, -24, 66, 37, 28, 4, -43, 43, -62, -62, 60, -59, 2, -1, 35, 20, 75, -81, -60, 117, -51, -33, -8, 49, 79, -43, 74, -43, 7, 44, 30, -23, -78, 54, 19, -79, -19, 114, 57, 69, 41, -19, 54, 41, -9, 8, -13, -39, -63, 52, 55, 68, 16, 73, -24, -46, -79, 34, -45, 39, 56, 69, -46, 17, 92, 53, -2, 90, -67, 73, 1, -56, -63, 111, -47, -31, 15, 60, 73, 51, 67, 0, -53, 49, -24, -10, 1, -10, 83, -42, 2, -19, -19, 45, 43, 19, -29, 8, -54, -64, 6, -82, 83, -29, 64, -2, 57, -16, -19, 62, 46, 32, 102, -35, -69, 66, 20, 10, 112, 60, -58, -7, -52, 75, -13, 71, 47, 28, -25, 75, 33, -51, -52, 89, -82, -30, -55, -21, 35, 33, -25, -9, 81, 66, 25, -16, 63, -65, 86, -16, 50, 0, 33, -50, 47, 74, -9, -28, 73, 63, 5, 1, 19, 119, -55, -63, -25, -80, -67, 64, 56, 12, 64, -63, 19, -45, 48, 65, 69, 5, -12, 104, -73, 2, 17, -56, 11, 82, -19, 21, 42, -23, 61, 9, 3, 24, 97, -15, 37, 82, 67, -1, 40, 19, 62, 9, 36, -48, -12, -9, 78, 106, 74, -57, 110, 63, 36, -48, 48, 71, 87, -79, 9, 12, -11, 74, 86, 49, -17, -17, -19, 28, 69, 73, 25, -40, -39, 83, -29, 18, -35, 2, -65, 56, 70, 22, -14, 103, 13, 40, -18, 42, -24, -32, -40, -17, -46, -8, 54, 94, 10, -49, 36, 69, 83, 74, 29, 21, 3, 60, 27, -31, 14, 41, 35, 34, 73, 28, -12, -47, 79, -67, 25, -48, -30, 47, -10, -59, -24, -52, 57, 20, 89, -16, 15, 28, -58, -72, -31, 25, -36, -18, 3, -2, 41, -39, 34, 110, -52, 81, 101, 47, 57, -4, 62, 17, -47, 30, 39, 70, 44, 86, -25, -71, -68, -1, 59, 48, 31, -15, -8, 17, 34, 71, 93, 42, 79, -52, 50, 14, 14, 25, 44, 77, 22, -55, 47, 58, 48, 37, 41, 7, 20, -42, 12, 11, -79, 72, 74, -52, 
  -59, -13, 59, 65, 52, 25, -7, -51, -26, -25, -64, -59, 54, -4, -40, 51, -28, -18, -71, -10, 45, -74, -20, 74, -56, -63, 55, -26, 19, -10, 40, 34, 60, 3, 38, 47, 29, -6, 13, 44, -24, -83, 18, -28, 71, 57, -56, 31, 37, 10, 2, -72, -53, -40, 25, -53, 6, 27, -72, 20, 3, -16, 74, -69, 63, 25, -65, 75, -62, 40, 30, -47, -10, -62, 66, -54, -42, -51, 39, -39, -66, 37, -31, -77, -83, -37, -2, 14, -35, 10, -48, 77, 12, -44, 19, 65, 6, 82, -19, 13, -48, -48, -29, 76, -51, 32, -39, -33, 22, 43, -24, 71, 73, 67, 15, 43, 61, 60, 41, 58, 19, -17, -60, -52, 84, -32, -80, -26, -66, -62, 75, -74, -36, -18, -62, 4, -40, -13, -57, 81, 37, -36, 66, 60, 75, -52, 16, 38, -70, 7, 18, -54, 7, -10, -51, 59, -71, 49, -63, 29, 74, 63, -78, 36, -38, -51, 23, 25, -6, 55, 43, -23, 58, 46, -50, -48, 62, -9, 51, 25, -50, -52, 30, -27, -62, -30, 60, 56, -43, -37, -13, -41, -72, -5, 25, -38, -44, 48, 41, 51, -20, -42, -73, 6, 38, -10, 7, 47, -38, 64, -50, 76, -50, 17, 24, -41, -49, -67, -48, -39, -51, 32, -7, -24, 24, -74, 10, -7, -38, -73, -24, 26, 57, -33, 70, 60, 68, -4, 78, -78, 75, 32, 55, -66, -2, 19, 16, -27, 61, 59, -25, 72, -71, 59, -50, -22, -28, 57, -51, -23, -75, 22, 36, -1, 16, 50, -2, 24, -30, 2, 37, -28, -7, -83, -35, -51, 18, 50, 60, 48, 47, -56, 16, 17, 71, -40, 63, -37, 51, -28, 40, -63, 29, -34, -20, -12, 33, 57, 63, 6, 8, -2, -58, -32, -24, -23, -85, 8, 23, 1, -30, -20, -39, -9, 4, -19, 63, -78, -73, -12, -65, -72, 50, 44, 37, 0, -60, 21, 16, -74, 33, -22, 25, 68, 53, -63, 26, -30, 35, -80, 83, 28, 31, -5, 52, -1, -4, 31, -12, 8, 25, -85, 58, -1, 39, 64, 49, -83, 72, -68, 37, -59, 21, 44, -5, -24, -32, -76, 70, -78, -31, 71, 8, 44, 25, -5, -25, 0, -2, -4, 17, -84, -22, 38, 46, 14, -39, 41, 33, -3, 35, -55, -83, -29, -70, -32, -33, -30, 30, -23, 45, -6, -34, 69, -55, -76, -50, -81, 74, -11, 73, 65, 70, -35, 8, 65, 11, 30, 13, 57, -41, 65, 21, 27, -3, 58, -31, -15, -41, 54, 12, 19, 67, -59, -7, 42, -41, -80, 25, 1, 15, 49, -67, -72, 30, 82, -56, -55, -7, 33, -58, 80, 2, 27, 72, 56, -44, 61, 10, 30, 3, 24, 36, -20, -78, -18, 9, 61, -7, -17, 51, -18, -31, 20, -60, 29, -3, 71, -65, 58, -49, -72, -73, -77, 71, -51, 25, -35, 13, -72, -63, 41, 75, 62, 18, 67, 26, 68, 2, -17, -27, -77, 30, 46, 50, -3, -20, 30, -11, -2, 18, -74, 67, 47, -63, 15, -39, -57, 58, -41, 0, 18, -19, 24, -79, -23, -18, 20, 51, 76, -76, -73, -58, 27, -14, 4, 60, -52, 38, -69, 66, 6, -25, 38, -9, 53, 19, 47, 16, 52, 55, 47, 50, -68, 73, 72, -64, 67, -48, 12, 6, 61, 67, 18, -63, 48, 48, -77, -10, -56, -78, -15, -37, -65, 42, 56, 45, -58, 17, 21, 38, -4, -12, -8, 5, 6, -34, 57, 40, 10, -81, -42, -11, -42, 50, 74, -22, -11, -45, -66, 
  -14, 34, 51, 46, 9, -7, 8, -78, 66, 79, -27, 56, 2, -31, 61, 32, 13, -81, 28, -19, -31, 51, 62, -76, 61, 69, -7, 82, -72, -84, -69, -62, 76, 48, 16, 5, 71, -46, 37, -11, -69, -37, 81, 20, -47, 18, -19, 55, -30, -89, 66, 61, -35, -27, -22, -10, 64, -66, -1, -31, 26, -73, 19, -56, -59, 60, 81, 38, 8, -42, 45, -48, 14, -47, -71, 59, 28, 18, -16, 51, -2, 77, -26, 14, -61, 69, -7, 73, -79, 42, -16, -7, 34, -61, 42, 61, 31, 73, 76, 79, -22, 15, 63, 34, 48, -37, 3, 0, 12, 37, -56, -66, 68, 73, 27, -92, -38, 80, 38, 34, -8, -18, 46, 56, 29, 71, -46, -32, 75, 74, -88, 67, -13, 43, 44, -23, -32, -10, -33, -14, -62, 16, 52, -66, 36, -61, -21, 85, -80, 52, 65, -67, -81, -38, -86, -82, -60, 40, 69, 85, -92, -1, 83, -3, -72, -61, -51, -66, 52, 2, -37, 2, 30, -62, 20, -60, -19, -41, -80, -84, 15, 46, -7, -71, -37, 3, -57, -22, -39, -25, -70, 18, -10, -59, -49, -19, 44, 2, -70, -18, 8, 8, -34, 50, 44, -66, -36, 3, -47, 8, -50, -77, 65, 51, 37, -66, -34, 29, 46, 64, -54, 19, -67, -13, 66, 26, -25, -59, -54, 75, -39, 47, -7, -6, 47, 53, 72, -21, -78, -25, 60, 57, -1, 66, 46, -86, 26, -25, -56, -19, 62, -50, -13, 35, 38, 82, 14, -12, -53, 55, 71, -10, 66, -2, -7, -34, -22, 17, 47, 8, 21, 17, -36, 83, 80, -4, -12, -63, 74, 21, -20, -43, 4, 0, -27, 32, -11, 69, 65, -61, 68, 71, -75, -6, 19, 30, -23, -70, 39, 10, 13, -3, -65, 9, -75, 66, -50, -77, -31, 80, -13, -45, -36, 30, 67, 72, 2, -25, 64, -27, 16, 88, -4, -63, -11, 0, 32, -22, 48, -19, -28, -81, -20, -11, 31, -55, -23, 68, 35, -35, 29, 8, -45, -15, -35, -2, -65, -17, 14, 56, 41, -45, -8, -6, 11, 0, -84, -50, 2, 67, 22, -72, -78, 10, 77, 46, 57, 20, -39, 11, 5, -75, 4, -26, -7, -72, -60, 20, -41, 35, 45, 7, -37, -13, -19, -47, 30, 46, -25, -21, -70, 59, -71, 27, -32, -63, 62, -33, 5, -5, 75, 71, -39, -22, -40, 27, -68, -2, 51, 62, -82, -54, -13, 18, -58, -71, -31, 41, -28, -2, 43, -55, 17, 53, 29, 72, 5, -40, -62, -7, 50, -52, -67, -51, 64, -69, 42, -70, 53, 18, 11, 46, -23, -5, 26, 23, 41, -43, 34, -24, -69, 74, -50, -63, 71, -19, 38, -41, 60, -59, -6, 22, 47, -2, -52, -46, -25, -8, -36, -22, 17, -41, 10, -75, -70, 76, 10, -70, 49, 7, 70, -54, 42, -58, 41, 9, -19, -83, -18, 7, -83, -22, 79, 41, -34, -65, 60, 32, 14, 46, 70, -66, 43, 58, 82, 56, -54, 67, 37, -25, 1, -85, -3, 79, -63, 20, -1, -55, 38, 50, 3, 71, 5, 38, 19, 56, 52, 8, 15, 2, -26, -26, -11, -4, 4, 41, 11, 38, 12, -86, -70, 64, 16, 56, 34, -22, 28, -72, 31, 31, 23, 32, -73, 70, -21, 46, 61, 15, 70, 25, -79, -28, -27, 71, 53, 35, 60, 22, -9, -20, 66, -40, -44, -62, 30, 45, 51, -42, 63, 75, 3, -44, 49, -56, 66, -47, 56, -59, -25, 33, -64, 41, 73, 51, -58, 10, 40, -37, 9, -47, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,600 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0012165593216195703, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 351, -3, -262, 0, -459, -34, -40, 0, -18, 0, -33, -39, -438, -227, 7, -11, 0, 533, -66, 427, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 9.0946545242331922e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = { 
  -69, -3, 24, 16, 119, -56, -26, 16, -79, -86, -29, -52, 104, 89, -28, 8, -82, 14, -28, 15, 
  -65, 14, -61, 37, 13, 9, 65, -42, -34, -68, 16, -74, -24, -30, -74, -83, -39, 57, 44, -80, 
  -55, 65, 31, -48, 15, -2, 41, -42, 75, 72, -55, -42, 2, -116, 38, -46, -22, 106, -83, -29, 
  -64, -17, -57, -77, -15, 44, 59, 71, 83, -70, 73, 36, 4, -62, -23, 97, 20, 25, 24, -63, 
  19, 6, -52, -72, -96, 81, -32, -6, -56, 93, 5, -92, -79, 34, -15, 17, 17, -59, 91, 22, 
  50, 77, -87, 8, -53, -18, 2, -21, 90, -88, -96, 90, -68, 44, -52, 76, -81, -16, -82, 51, 
  73, -29, -6, 74, 49, -26, 11, 44, 40, 81, -46, 55, -99, -10, -9, -21, 37, -27, 33, -40, 
  -30, 85, -42, -90, -66, -15, -29, -76, 82, 63, 60, 86, -44, -27, -23, -44, -54, 13, -40, 50, 
  -81, 61, -2, 44, 127, -2, 52, -91, -20, -68, 40, 69, 101, 100, -25, 51, -75, 77, -2, 5, 
  -13, 30, 25, 73, -110, 55, 68, -52, 71, -33, -19, 29, -95, -38, -69, 14, 93, 93, -30, 93, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0045531722716987133, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { -56, -26, 111, -8, 3, -56, -43, 63, -85, 85, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0014554968802258372, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[2*10] = { 
  -57, -127, -3, -115, 8, -78, 57, 87, -6, 55, 
  94, -119, -20, 106, 105, 60, 62, -10, 37, -9, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0053919535130262375, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[2] = { 50, -50, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0023615143727511168, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.31966656446456909, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.43797007203102112, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.38000383973121643, } };
const TfArray<1, int> quant9_zero = { 1, { -47 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 608, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
