<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__malloc__tests_8c" kind="file" language="C++">
    <compoundname>ns_malloc_tests.c</compoundname>
    <includes refid="ns__malloc_8h" local="yes">ns_malloc.h</includes>
    <includes local="yes">unity/unity.h</includes>
    <includes local="yes">ns_core.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ns_malloc.h</label>
        <link refid="ns__malloc_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c</label>
        <link refid="ns__malloc__tests_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
      </node>
      <node id="4">
        <label>am_bsp.h</label>
      </node>
      <node id="5">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="6">
        <label>am_util.h</label>
      </node>
      <node id="11">
        <label>ns_core.h</label>
      </node>
      <node id="7">
        <label>portable.h</label>
      </node>
      <node id="8">
        <label>portmacro.h</label>
      </node>
      <node id="9">
        <label>rtos.h</label>
      </node>
      <node id="10">
        <label>unity/unity.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ns__malloc__tests_8c_1a9f213227674effff0122a75d94d87938" prot="public" static="no">
        <name>configTOTAL_HEAP_SIZE</name>
        <initializer>NS_MALLOC_HEAP_SIZE_IN_K * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="5" column="9" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ns__malloc__tests_8c_1a90e8cd581702224cd749165e4df0ab86" prot="public" static="no" mutable="no">
        <type>size_t const</type>
        <definition>size_t const ucHeapSize</definition>
        <argsstring></argsstring>
        <name>ucHeapSize</name>
        <initializer>= configTOTAL_HEAP_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="7" column="14" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ns__malloc__tests_8c_1a11208261e6ac23565e05907272f18bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t ucHeap[NS_MALLOC_HEAP_SIZE_IN_K *1024]</type>
        <definition>uint8_t ucHeap[NS_MALLOC_HEAP_SIZE_IN_K *1024] __attribute__</definition>
        <argsstring>((aligned(4)))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(aligned(4))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="6" column="16" declfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" declline="6" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1a6bd3f6ada23e92e1d4266e2f85fdf622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_tests_pre_test_hook</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_tests_pre_test_hook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="8" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1a288089f0cebf3f4b67b7e7dd06763b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_tests_post_test_hook</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_tests_post_test_hook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="11" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1a0dc16ba73e7e62ee4f504a1ebfaa851e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_test_basic_allocation</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_test_basic_allocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="15" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1a6aec62df66dae1076ae73907fe5309df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_test_past_max_size</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_test_past_max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="31" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1a1278400336e99763852c3e92c0d0e28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_test_allocate_zero</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_test_allocate_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="38" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="ns__malloc__tests_8c_1afe7288c1bd6fac9d6be2cbc433886abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_malloc_test_no_overlap_in_heap_allocations</definition>
        <argsstring>()</argsstring>
        <name>ns_malloc_test_no_overlap_in_heap_allocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" line="43" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c" bodystart="43" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ns_malloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;unity/unity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ns_core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>configTOTAL_HEAP_SIZE<sp/>NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">uint8_t<sp/>ucHeap[NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024]<sp/>__attribute__<sp/>((aligned<sp/>(4)));</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ucHeapSize<sp/>=<sp/>configTOTAL_HEAP_SIZE;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_tests_pre_test_hook()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pre<sp/>hook<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_tests_post_test_hook()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>post<sp/>hook<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_test_basic_allocation()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*char_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*int_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*float_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NOT_NULL(char_ptr);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NOT_NULL(int_ptr);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NOT_NULL(double_ptr);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NOT_NULL(float_ptr);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(char_ptr);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(int_ptr);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(double_ptr);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(float_ptr);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocating<sp/>largest<sp/>unsigned<sp/>int<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_test_past_max_size()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*large_double<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(32745);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NULL(large_double);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(large_double);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocating<sp/>0<sp/>bytes<sp/>should<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_test_allocate_zero()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*zero_double<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_NULL(zero_double);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_malloc_test_no_overlap_in_heap_allocations()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>large<sp/>chunks<sp/>of<sp/>memory<sp/>for<sp/>different<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*char_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(50<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*int_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(100<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*float_ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(50<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>uintptr_t<sp/>addresses<sp/>of<sp/>allocated<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>char_start<sp/>=<sp/>(uintptr_t)char_ptr;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>char_end<sp/>=<sp/>char_start<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>int_start<sp/>=<sp/>(uintptr_t)int_ptr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>int_end<sp/>=<sp/>int_start<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>double_start<sp/>=<sp/>(uintptr_t)double_ptr;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>double_end<sp/>=<sp/>double_start<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>float_start<sp/>=<sp/>(uintptr_t)float_ptr;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>float_end<sp/>=<sp/>float_start<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>no<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(char_end<sp/>&lt;<sp/>int_start<sp/>||<sp/>char_start<sp/>&gt;<sp/>int_end);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(char_end<sp/>&lt;<sp/>double_start<sp/>||<sp/>char_start<sp/>&gt;<sp/>double_end);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(char_end<sp/>&lt;<sp/>float_start<sp/>||<sp/>char_start<sp/>&gt;<sp/>float_end);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(int_end<sp/>&lt;<sp/>char_start<sp/>||<sp/>int_start<sp/>&gt;<sp/>char_end);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(int_end<sp/>&lt;<sp/>double_start<sp/>||<sp/>int_start<sp/>&gt;<sp/>double_end);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(int_end<sp/>&lt;<sp/>float_start<sp/>||<sp/>int_start<sp/>&gt;<sp/>float_end);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(double_end<sp/>&lt;<sp/>int_start<sp/>||<sp/>double_start<sp/>&gt;<sp/>int_end);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(double_end<sp/>&lt;<sp/>char_start<sp/>||<sp/>double_start<sp/>&gt;<sp/>char_end);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(double_end<sp/>&lt;<sp/>float_start<sp/>||<sp/>double_start<sp/>&gt;<sp/>float_end);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(float_end<sp/>&lt;<sp/>int_start<sp/>||<sp/>float_start<sp/>&gt;<sp/>int_end);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(float_end<sp/>&lt;<sp/>char_start<sp/>||<sp/>float_start<sp/>&gt;<sp/>char_end);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(float_end<sp/>&lt;<sp/>double_start<sp/>||<sp/>float_start<sp/>&gt;<sp/>double_end);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(char_ptr);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(int_ptr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(double_ptr);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(float_ptr);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_malloc_tests.c"/>
  </compounddef>
</doxygen>
