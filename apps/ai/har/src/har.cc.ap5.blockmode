/**
 * @file har.cc
 *
 * @brief Human Activity Recognition using ICM-45605 IMU (NeuralSPOT)
 *
 * This example replaces the MPU6050 driver with the ICM-45605 IMU used in icm.cc.
 **/

#include <math.h>
#include <string.h>

#include "ns_spi.h"
#include "ns_ambiqsuite_harness.h"
#include "ns_core.h"
#include "ns_peripherals_power.h"
#include "ns_imu.h"
#include "imu/inv_imu_driver.h"
#include "ns_perf_profile.h"
#include "ns_peripherals_button.h"

#include "har_model.h"
#include "har_peripherals.h"

/// State machine for HAR example
typedef enum { WAITING_TO_RECORD, INFERING } myState_e;

/// Frame parameters: 10s @ 20Hz = 200 samples, 6 axes
#define MPU_FRAME_SIZE 200
#define MPU_AXES 6

/// Buffers and stats for sensor data
float g_sensorData[MPU_FRAME_SIZE][MPU_AXES];
float g_sensorMean[MPU_AXES];
float g_sensorStd[MPU_AXES];

/// Classification labels
constexpr size_t kCategoryCount = 6;
const char *kCategoryLabels[kCategoryCount] = {
    "Walking", "Jogging", "Stairs", "Sitting", "Standing"
};

/// IMU buffer and flag
ns_imu_sensor_data_t imu_frame[MPU_FRAME_SIZE];
volatile bool imu_frame_ready = false;
volatile bool collect_frame = false;

/// Callback invoked when IMU frame is filled
void imu_frame_available_cb(void *arg) {
    ns_imu_config_t *cfg = (ns_imu_config_t *)arg;
    // Copy into local buffer
    // Print current frame index
    // ns_lp_printf("IMU Frame %d collected\n", cfg->frame_buffer_index);
    if (collect_frame) {
        memcpy(imu_frame, cfg->frame_buffer, sizeof(imu_frame));
        imu_frame_ready = true;
        collect_frame = false; // Reset for next collection
    } else {
        // If not collecting, just reset the flag
        return;
    }
}

/// Collect a full frame via IMU interrupt, then compute mean and std
uint32_t collect_imu_frame(void) {
    // Reset mean accumulator
    for (int axis = 0; axis < MPU_AXES; axis++) {
        g_sensorMean[axis] = 0.0f;
    }
    // Wait for interrupt-driven frame fill
    while (!imu_frame_ready) {
        ns_deep_sleep();
    }

    // Build sensor array and accumulate mean
    for (int sample = 0; sample < MPU_FRAME_SIZE; sample++) {
        // Accelerometer
        g_sensorData[sample][0] = imu_frame[sample].accel_g[0];
        g_sensorData[sample][1] = imu_frame[sample].accel_g[1];
        g_sensorData[sample][2] = imu_frame[sample].accel_g[2];
        // Gyroscope
        g_sensorData[sample][3] = imu_frame[sample].gyro_dps[0];
        g_sensorData[sample][4] = imu_frame[sample].gyro_dps[1];
        g_sensorData[sample][5] = imu_frame[sample].gyro_dps[2];
        // Accumulate for mean
        for (int axis = 0; axis < MPU_AXES; axis++) {
            g_sensorMean[axis] += g_sensorData[sample][axis];
        }
    }
    // Finalize mean
    for (int axis = 0; axis < MPU_AXES; axis++) {
        g_sensorMean[axis] /= MPU_FRAME_SIZE;
    }
    // Compute standard deviation
    for (int axis = 0; axis < MPU_AXES; axis++) {
        float var = 0.0f;
        for (int sample = 0; sample < MPU_FRAME_SIZE; sample++) {
            float diff = g_sensorData[sample][axis] - g_sensorMean[axis];
            var += diff * diff;
        }
        g_sensorStd[axis] = sqrtf(var / MPU_FRAME_SIZE);
    }
    return NS_STATUS_SUCCESS;
}

int main(void) {
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
    myState_e state = WAITING_TO_RECORD;
    collect_frame = false;
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
    NS_TRY(ns_power_config(&ns_development_default), "Power Init Failed.\n");
    NS_TRY(ns_set_performance_mode(NS_MINIMUM_PERF), "Set CPU Perf mode failed.\n");

    ns_itm_printf_enable();

    // IMU configuration matching icm.cc
    ns_imu_config_t imu_cfg = {
        .api               = &ns_imu_V1_0_0,
        .sensor            = NS_IMU_SENSOR_ICM45605,
        #ifdef AM_PART_APOLLO4P
        .iom               = 1, // IOM1 for Apollo4P
        #else
        .iom               = 0, // IOM1 for Apollo4L
        #endif
        .accel_fsr         = ACCEL_CONFIG0_ACCEL_UI_FS_SEL_4_G,
        .gyro_fsr          = GYRO_CONFIG0_GYRO_UI_FS_SEL_2000_DPS,
        .accel_odr         = ACCEL_CONFIG0_ACCEL_ODR_50_HZ,
        .gyro_odr          = GYRO_CONFIG0_GYRO_ODR_50_HZ,
        .accel_ln_bw       = IPREG_SYS2_REG_131_ACCEL_UI_LPFBW_DIV_4,
        .gyro_ln_bw        = IPREG_SYS1_REG_172_GYRO_UI_LPFBW_DIV_4,
        .calibrate         = true,
        .frame_available_cb= imu_frame_available_cb,
        .frame_size        = MPU_FRAME_SIZE,
        .frame_buffer      = imu_frame
    };
    NS_TRY(ns_imu_configure(&imu_cfg), "IMU Init Failed.\n");
    ns_lp_printf("IMU Init Success\n");

    // Initialize ML model and button
    model_init();
    NS_TRY(ns_peripheral_button_init(&button_config), "Button init failed.\n");
    ns_interrupt_master_enable();

    ns_lp_printf("HAR using ICM-45605 IMU: collect 10s @20Hz then classify.\n");
    ns_lp_printf("Press Button 0 to start listening...\n");

    // The fir

    // Main event loop
    while (1) {
        switch (state) {

        case WAITING_TO_RECORD:
            if (buttonPressed) {
                state = INFERING;
                buttonPressed = false;
                ns_lp_printf("\nCollecting 10s frame\n");
                collect_frame = true; // Trigger IMU to collect frame
                collect_imu_frame();
                ns_lp_printf("\nCollected 10s frame\n");
            }
            break;

        case INFERING: {
            // Prepare tensor input
            int tensorIndex = 0;
            for (int sample = 0; sample < MPU_FRAME_SIZE; sample++) {
                for (int axis = 0; axis < MPU_AXES; axis++) {
                    float norm = (g_sensorData[sample][axis] - g_sensorMean[axis]) / g_sensorStd[axis];
                    norm = norm / model_input->params.scale + model_input->params.zero_point;
                    norm = MAX(MIN(norm, 127), -128);
                    model_input->data.int8[tensorIndex++] = (int8_t)norm;
                }
            }
            // Run inference
            TfLiteStatus invoke_status = interpreter->Invoke();
            if (invoke_status != kTfLiteOk) {
                ns_lp_printf("Invoke failed\n");
                while (1) {};
            }
            // Report results
            float max_val = 0.0f;
            uint8_t output_max = 0;
            for (uint8_t i = 0; i < kCategoryCount; i++) {
                float score = (model_output->data.int8[i] - model_output->params.zero_point) *
                               model_output->params.scale;
                if (score > 0.3f) {
                    ns_lp_printf("[%s] with %d%% certainty\n", kCategoryLabels[i],
                                 (uint8_t)(score * 100));
                }
                if (score > max_val) {
                    max_val = score;
                    output_max = i;
                }
            }
            ns_lp_printf("**** Most probably: [%s]\n\n", kCategoryLabels[output_max]);
            ns_lp_printf("Press Button 0 to start listening...\n");
            buttonPressed = false;
            imu_frame_ready = false;

            state = WAITING_TO_RECORD;
            break;
        }
        }
        if (state != INFERING) {
            ns_deep_sleep();
        }
    }
    return 0;
}
