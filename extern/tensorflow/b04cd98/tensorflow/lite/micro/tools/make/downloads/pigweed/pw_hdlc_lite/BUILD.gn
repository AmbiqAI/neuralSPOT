# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_unit_test/test.gni")

config("default_config") {
  include_dirs = [ "public" ]
}

group("pw_hdlc_lite") {
  public_deps = [
    ":decoder",
    ":encoder",
  ]
}

pw_source_set("decoder") {
  public_configs = [ ":default_config" ]
  public = [ "public/pw_hdlc_lite/decoder.h" ]
  sources = [
    "decoder.cc",
    "pw_hdlc_lite_private/protocol.h",
  ]
  public_deps = [
    dir_pw_bytes,
    dir_pw_result,
    dir_pw_status,
  ]
  deps = [
    dir_pw_checksum,
    dir_pw_log,
  ]
  friend = [ ":*" ]
}

pw_source_set("encoder") {
  public_configs = [ ":default_config" ]
  public = [ "public/pw_hdlc_lite/encoder.h" ]
  sources = [
    "encoder.cc",
    "pw_hdlc_lite_private/protocol.h",
  ]
  public_deps = [
    "$dir_pw_stream:sys_io_stream",
    dir_pw_bytes,
    dir_pw_status,
    dir_pw_stream,
    dir_pw_sys_io,
  ]
  deps = [ dir_pw_checksum ]
  friend = [ ":*" ]
}

pw_source_set("pw_rpc") {
  public_configs = [ ":default_config" ]
  public = [
    "public/pw_hdlc_lite/rpc_channel.h",
    "public/pw_hdlc_lite/rpc_packets.h",
  ]
  sources = [ "rpc_packets.cc" ]
  public_deps = [
    ":pw_hdlc_lite",
    "$dir_pw_rpc:server",
  ]
}

pw_test_group("tests") {
  tests = [
    ":encoder_test",
    ":decoder_test",
    ":rpc_channel_test",
  ]
  group_deps = [
    "$dir_pw_preprocessor:tests",
    "$dir_pw_span:tests",
    "$dir_pw_status:tests",
    "$dir_pw_stream:tests",
  ]
}

pw_test("encoder_test") {
  deps = [ ":pw_hdlc_lite" ]
  sources = [ "encoder_test.cc" ]
}

action("generate_decoder_test") {
  outputs = [ "$target_gen_dir/generated_decoder_test.cc" ]
  script = "py/decode_test.py"
  args = [ "--generate-cc-test" ] + rebase_path(outputs)
  deps = [ "$dir_pw_build/py" ]
}

pw_test("decoder_test") {
  deps = [
    ":generate_decoder_test",
    ":pw_hdlc_lite",
  ]
  sources = [ "decoder_test.cc" ] + get_target_outputs(":generate_decoder_test")
}

pw_test("rpc_channel_test") {
  deps = [
    ":pw_hdlc_lite",
    ":pw_rpc",
  ]
  sources = [ "rpc_channel_test.cc" ]
}

pw_doc_group("docs") {
  sources = [
    "docs.rst",
    "rpc_example/docs.rst",
  ]
  inputs = [
    "py/pw_hdlc_lite/decode.py",
    "py/pw_hdlc_lite/encode.py",
  ]
}
