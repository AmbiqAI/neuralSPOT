<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__core_8c" kind="file" language="C++">
    <compoundname>ns_core.c</compoundname>
    <includes refid="ns__core_8h" local="yes">ns_core.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ns_core.h</label>
        <link refid="ns__core_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-core/src/ns_core.c</label>
        <link refid="ns__core_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>am_bsp.h</label>
      </node>
      <node id="4">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="5">
        <label>am_util.h</label>
      </node>
      <node id="6">
        <label>ns_ambiqsuite_harness.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ns__core_8c_1a8184d3799e7026ff9f387a0c426fcb33" prot="public" static="no">
        <name>NS_CORE_API_ID</name>
        <initializer>0xCA0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="21" column="9" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" prot="public" static="no" mutable="no">
        <type><ref refid="structns__desired__state__t" kindref="compound">ns_desired_state_t</ref></type>
        <definition>ns_desired_state_t g_ns_state</definition>
        <argsstring></argsstring>
        <name>g_ns_state</name>
        <briefdescription>
<para>Collection of ns-wide states and desired states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="18" column="20" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-core_1ga00cd38760f5a7c25b6a87282e05845f4" prot="public" static="no" mutable="no">
        <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref></type>
        <definition>const ns_core_api_t ns_core_V0_0_1</definition>
        <argsstring></argsstring>
        <name>ns_core_V0_0_1</name>
        <initializer>= {.apiId = NS_CORE_API_ID, .version = NS_CORE_V0_0_1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="23" column="21" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-core_1gacdd5daecaf46b2743aee54997eda5309" prot="public" static="no" mutable="no">
        <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref></type>
        <definition>const ns_core_api_t ns_core_V1_0_0</definition>
        <argsstring></argsstring>
        <name>ns_core_V1_0_0</name>
        <initializer>= {.apiId = NS_CORE_API_ID, .version = NS_CORE_V1_0_0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="25" column="21" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-core_1ga59a40e1db45bb276e003c17fea17e12a" prot="public" static="no" mutable="no">
        <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref></type>
        <definition>const ns_core_api_t ns_core_oldest_supported_version</definition>
        <argsstring></argsstring>
        <name>ns_core_oldest_supported_version</name>
        <initializer>= {
    .apiId = NS_CORE_API_ID, .version = NS_CORE_V0_0_1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="27" column="21" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__ns-core_1ga72e4de2e8dc55845215696f11ea7739f" prot="public" static="no" mutable="no">
        <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref></type>
        <definition>const ns_core_api_t ns_core_current_version</definition>
        <argsstring></argsstring>
        <name>ns_core_current_version</name>
        <initializer>= {.apiId = NS_CORE_API_ID, .version = NS_CORE_V1_0_0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="30" column="21" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ns__core_8c_1a0b6c119cdc389a48e6f458ffd20cfe7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int semver_compare</definition>
        <argsstring>(const ns_semver_t *c, const ns_semver_t *n)</argsstring>
        <name>semver_compare</name>
        <param>
          <type>const <ref refid="structns__semver__t" kindref="compound">ns_semver_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structns__semver__t" kindref="compound">ns_semver_t</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare semantic versions</para>
<para>param c - &apos;current&apos; version param n - &apos;target&apos; version return int - 0 if equal, -1 is c is less than n, 1 if c is more than n </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="40" column="12" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="40" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-core_1ga07adab44cf8388346e17c1e68e130739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_core_check_api</definition>
        <argsstring>(const ns_core_api_t *submitted, const ns_core_api_t *oldest, const ns_core_api_t *newest)</argsstring>
        <name>ns_core_check_api</name>
        <param>
          <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref> *</type>
          <declname>submitted</declname>
        </param>
        <param>
          <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref> *</type>
          <declname>oldest</declname>
        </param>
        <param>
          <type>const <ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref> *</type>
          <declname>newest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief Checks API and semantic version of desired API vs. allowed APIs</para>
<para>param submitted param oldest param newest return uint32_t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="64" column="17" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="64" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-core_1gaf3368f0bb97af25baefc3df6b89a32b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ns_core_init</definition>
        <argsstring>(ns_core_config_t *cfg)</argsstring>
        <name>ns_core_init</name>
        <param>
          <type><ref refid="structns__core__config__t" kindref="compound">ns_core_config_t</ref> *</type>
          <declname>c</declname>
          <defname>cfg</defname>
        </param>
        <briefdescription>
<para>Initialize core state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structns__core__config__t" kindref="compound">ns_core_config_t</ref> indicating the API version </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="88" column="10" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="88" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__ns-core_1ga1c951a408f6460c49e0ed03bbba05666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_core_fail_loop</definition>
        <argsstring>()</argsstring>
        <name>ns_core_fail_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="116" column="6" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1a53b132e49434d35fc24f2a78b38e2bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__write_r</definition>
        <argsstring>(struct _reent *r, int fd, const void *ptr, size_t len)</argsstring>
        <name>__wrap__write_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="122" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1a1cd94f6245b1e63a8258b7eb89f0bab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__read_r</definition>
        <argsstring>(struct _reent *r, int fd, void *ptr, size_t len)</argsstring>
        <name>__wrap__read_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="129" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1a0b72c10c5bf8f57edde2de2cae36caa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__close_r</definition>
        <argsstring>(struct _reent *r, int fd)</argsstring>
        <name>__wrap__close_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="136" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1afee01fde55303249c556becf77b3dbbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__lseek_r</definition>
        <argsstring>(struct _reent *r, int fd, int ptr, int dir)</argsstring>
        <name>__wrap__lseek_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="143" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1ac43ec11b836b61187e0bfbec8840cb24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__kill_r</definition>
        <argsstring>(struct _reent *r, int pid, int sig)</argsstring>
        <name>__wrap__kill_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="150" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1a3a717795ef1debe0bf05188d2e8748f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__getpid_r</definition>
        <argsstring>(struct _reent *r)</argsstring>
        <name>__wrap__getpid_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="157" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1ac98fcd8582b8a6827182a6150dbf0e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__isatty_r</definition>
        <argsstring>(struct _reent *r, int fd)</argsstring>
        <name>__wrap__isatty_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="163" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="ns__core_8c_1a21202208f0d55b89f1d21c2e9ba750c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __wrap__fstat_r</definition>
        <argsstring>(struct _reent *r, int fd, struct stat *st)</argsstring>
        <name>__wrap__fstat_r</name>
        <param>
          <type>struct _reent *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c" line="170" column="5" bodyfile="neuralSPOT/neuralspot/ns-core/src/ns_core.c" bodystart="170" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Code common to all neuralSPOT. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Carlos Morales </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2022-11-03</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ns__core_8h" kindref="compound">ns_core.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;reent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="structns__desired__state__t" kindref="compound">ns_desired_state_t</ref><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>API<sp/>Versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS_CORE_API_ID<sp/>0xCA0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>ns_core_V0_0_1<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_CORE_API_ID,<sp/>.version<sp/>=<sp/>NS_CORE_V0_0_1};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>ns_core_V1_0_0<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_CORE_API_ID,<sp/>.version<sp/>=<sp/>NS_CORE_V1_0_0};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>ns_core_oldest_supported_version<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>.apiId<sp/>=<sp/>NS_CORE_API_ID,<sp/>.version<sp/>=<sp/>NS_CORE_V0_0_1};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>ns_core_current_version<sp/>=<sp/>{.apiId<sp/>=<sp/>NS_CORE_API_ID,<sp/>.version<sp/>=<sp/>NS_CORE_V1_0_0};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//***</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>semver_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__semver__t" kindref="compound">ns_semver_t</ref><sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__semver__t" kindref="compound">ns_semver_t</ref><sp/>*n)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cMajor<sp/>=<sp/>(uint64_t)c-&gt;major;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cMinor<sp/>=<sp/>(uint64_t)c-&gt;minor;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>nMajor<sp/>=<sp/>(uint64_t)n-&gt;major;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>nMinor<sp/>=<sp/>(uint64_t)n-&gt;minor;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>c64<sp/>=<sp/>(cMajor<sp/>&lt;&lt;<sp/>32)<sp/>+<sp/>(cMinor<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>c-&gt;revision;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n64<sp/>=<sp/>(nMajor<sp/>&lt;&lt;<sp/>32)<sp/>+<sp/>(nMinor<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>n-&gt;revision;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c64<sp/>==<sp/>n64)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c64<sp/>&lt;<sp/>n64)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ns-core_1ga07adab44cf8388346e17c1e68e130739" kindref="member">ns_core_check_api</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>*submitted,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>*oldest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structns__core__api__t" kindref="compound">ns_core_api_t</ref><sp/>*newest)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ns_lp_printf(&quot;submitted-&gt;apiId:<sp/>%x\n&quot;,<sp/>submitted-&gt;apiId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ns_lp_printf(&quot;newest-&gt;apiId:<sp/>%x\n&quot;,<sp/>newest-&gt;apiId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(submitted-&gt;apiId<sp/>!=<sp/>newest-&gt;apiId)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_VERSION;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>version<sp/>&gt;<sp/>oldest<sp/>and<sp/>&lt;<sp/>newest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolution<sp/>=<sp/>semver_compare(&amp;(submitted-&gt;version),<sp/>&amp;(oldest-&gt;version));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolution<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>submitted<sp/>version<sp/>is<sp/>lower<sp/>than<sp/>oldest<sp/>supported<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_VERSION;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>resolution<sp/>=<sp/>semver_compare(&amp;(submitted-&gt;version),<sp/>&amp;(newest-&gt;version));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolution<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>submitted<sp/>version<sp/>is<sp/>higher<sp/>than<sp/>newest<sp/>supported<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_VERSION;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">uint32_t<sp/><ref refid="group__ns-core_1gaf3368f0bb97af25baefc3df6b89a32b4" kindref="member">ns_core_init</ref>(<ref refid="structns__core__config__t" kindref="compound">ns_core_config_t</ref><sp/>*cfg)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NS_DISABLE_API_VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfg<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>API<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__ns-core_1ga07adab44cf8388346e17c1e68e130739" kindref="member">ns_core_check_api</ref>(cfg-&gt;<ref refid="structns__core__config__t_1a6c9666c382d6f31b85919e6bd6bb8c9d" kindref="member">api</ref>,<sp/>&amp;ns_core_oldest_supported_version,<sp/>&amp;ns_core_current_version))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_INVALID_VERSION;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.api<sp/>=<sp/>cfg-&gt;<ref refid="structns__core__config__t_1a6c9666c382d6f31b85919e6bd6bb8c9d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.itmPrintWantsToBeEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.itmPrintCurrentlyEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.uartPrintWantsToBeEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.uartPrintCurrentlyEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.tempcoWantsToBeEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.tempcoCurrentlyEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.cryptoWantsToBeEnabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>state<sp/>of<sp/>Crypto<sp/>is<sp/>&apos;on&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.cryptoCurrentlyEnabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-core_1ga29d4a85063b31b643328c98c85e3d7c9" kindref="member">g_ns_state</ref>.ap3BurstModeInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NS_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_core_fail_loop()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__write_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>write<sp/>each<sp/>byte<sp/>to<sp/>UART<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>STDOUT_FILENO<sp/>or<sp/>STDERR_FILENO,<sp/>you<sp/>might<sp/>send<sp/>it<sp/>to<sp/>a<sp/>debug<sp/>console.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__read_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>read<sp/>each<sp/>byte<sp/>from<sp/>UART<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>STDIN_FILENO,<sp/>you<sp/>might<sp/>read<sp/>from<sp/>a<sp/>UART.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__close_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>close<sp/>a<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>a<sp/>file<sp/>descriptor,<sp/>you<sp/>might<sp/>close<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__lseek_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>seek<sp/>to<sp/>a<sp/>position<sp/>in<sp/>a<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>a<sp/>file<sp/>descriptor,<sp/>you<sp/>might<sp/>seek<sp/>in<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__kill_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>send<sp/>a<sp/>signal<sp/>to<sp/>a<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>pid<sp/>is<sp/>a<sp/>process<sp/>ID,<sp/>you<sp/>might<sp/>send<sp/>a<sp/>signal<sp/>to<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__getpid_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>return<sp/>the<sp/>process<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>might<sp/>return<sp/>a<sp/>unique<sp/>identifier<sp/>for<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__isatty_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>check<sp/>if<sp/>a<sp/>file<sp/>descriptor<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>a<sp/>file<sp/>descriptor,<sp/>you<sp/>might<sp/>check<sp/>if<sp/>it<sp/>is<sp/>a<sp/>TTY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__wrap__fstat_r(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent<sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat<sp/>*st)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>get<sp/>information<sp/>about<sp/>a<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>fd<sp/>is<sp/>a<sp/>file<sp/>descriptor,<sp/>you<sp/>might<sp/>get<sp/>information<sp/>about<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>an<sp/>appropriate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-core/src/ns_core.c"/>
  </compounddef>
</doxygen>
