/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.09.2024 23:22:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238528;
#else
constexpr int kTensorArenaSize = 237504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*1] = { 
  /* [0][0][][] */ -57, 49, 8, 
  /* [0][1][][] */ -127, 120, -1, 
  /* [0][2][][] */ -42, 46, -1, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -67, -79, -44, 
  /* [1][2][][] */ 8, -41, 5, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 111, 
  /* [4][2][][] */ 4, -37, 31, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -16, -83, 2, 
  /* [6][1][][] */ -22, -127, -2, 
  /* [6][2][][] */ -11, -50, 11, 
  /* [7][0][][] */ 43, -127, 29, 
  /* [7][1][][] */ -20, -4, -12, 
  /* [7][2][][] */ -27, 72, -13, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant2_scale = { 8, { 0.039355702698230743, 0.046242162585258484, 0.036031931638717651, 0.023017255589365959, 0.061096247285604477, 0.078552544116973877, 0.0030934312380850315, 0.0070337117649614811, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 16765, 11604, 594, 29680, 2682, 7687, 81366, 2344, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00015433609951287508, 0.00018134182028006762, 0.00014130170166026801, 9.0263754827901721e-05, 0.00023959313693922013, 0.00030804920243099332, 1.2131103176216129e-05, 2.7583184419199824e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*8] = { 
  /* [0][0][][] */ 1,2,13,17,7,2,8,30, 6,1,-37,127,-19,1,-5,29, -3,0,-11,17,-2,2,-6,21, 
  /* [0][1][][] */ -3,-1,127,-25,127,1,-112,43, 127,-127,-105,5,-88,127,-15,-127, -28,1,14,-23,-3,1,127,41, 
  /* [0][2][][] */ 3,1,9,4,11,1,15,37, 5,5,-46,-3,-13,3,-10,-101, -5,2,-9,0,2,-2,-6,40, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.011947010643780231, 0.016907678917050362, 0.0096052447333931923, 0.014836457557976246, 0.0099171558395028114, 0.013530632480978966, 0.050444275140762329, 0.12553106248378754, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[8] = { -11209, 10638, 406, -12091, -944, -14010, 351, 95, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.0002811061276588589, 0.00039782773819752038, 0.00022600576630793512, 0.00034909311216324568, 0.0002333448501303792, 0.00031836782000027597, 0.0011869241716340184, 0.0029536720830947161, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*8] = { 
  /* [0][0][][] */ -23,0,-43,-33,-19,37,-127,-6, 
  /* [1][0][][] */ 21,97,-4,127,10,-8,-11,-35, 
  /* [2][0][][] */ 127,-3,-37,-60,-70,49,98,-54, 
  /* [3][0][][] */ 9,-127,42,-85,13,-86,28,57, 
  /* [4][0][][] */ 126,0,-60,-9,29,-4,-127,-49, 
  /* [5][0][][] */ 2,-35,4,40,2,-127,0,9, 
  /* [6][0][][] */ 127,-22,112,2,109,-31,-4,7, 
  /* [7][0][][] */ -127,-2,-95,-3,-98,6,35,5, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0029983017593622208, 0.0050941826775670052, 0.0037218504585325718, 0.0022935960441827774, 0.0051870779134333134, 0.0083948289975523949, 0.0042042653076350689, 0.0073735998012125492, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 4216, -4986, -369, 3672, 2324, 699, -3471, 3025, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 7.0548281655646861e-05, 0.000119863121653907, 8.7572952907066792e-05, 5.3966967243468389e-05, 0.00012204889208078384, 0.00019752539810724556, 9.8923890618607402e-05, 0.00017349647532682866, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -105,-106,25,-127,-63,-3,-4,-1, 
  /* [1][0][][] */ -127,-15,98,-2,-48,25,5,15, 
  /* [2][0][][] */ 24,-16,26,127,26,-27,-18,-5, 
  /* [3][0][][] */ -105,-67,-27,-11,36,127,-43,-32, 
  /* [4][0][][] */ -5,-29,-12,-3,-7,9,-127,-72, 
  /* [5][0][][] */ -3,-36,-12,1,-14,12,-127,-66, 
  /* [6][0][][] */ 127,8,16,-11,-67,18,1,-4, 
  /* [7][0][][] */ -127,-27,-14,6,69,12,0,10, 
  /* [8][0][][] */ 23,43,-11,-10,-30,-127,43,20, 
  /* [9][0][][] */ 75,20,-13,-7,-23,-2,-7,127, 
  /* [10][0][][] */ 116,-6,-125,11,-91,-5,46,127, 
  /* [11][0][][] */ -127,104,7,-34,90,-67,13,16, 
  /* [12][0][][] */ 127,-33,-109,11,52,-3,-8,-22, 
  /* [13][0][][] */ 127,11,14,-14,-30,24,5,-12, 
  /* [14][0][][] */ -127,-81,103,-17,67,-10,-38,-120, 
  /* [15][0][][] */ 31,79,0,-7,-12,-127,-19,12, 
  /* [16][0][][] */ -11,-63,10,2,10,127,11,7, 
  /* [17][0][][] */ 32,-120,-70,-9,-34,127,-50,-18, 
  /* [18][0][][] */ 40,-20,-13,-17,-19,27,127,-12, 
  /* [19][0][][] */ -3,23,-4,-127,-8,37,-2,-12, 
  /* [20][0][][] */ -80,-30,77,10,56,103,-1,-127, 
  /* [21][0][][] */ -18,-9,37,-22,-16,10,-127,-86, 
  /* [22][0][][] */ 67,-14,8,127,-18,-13,51,45, 
  /* [23][0][][] */ 127,-16,-121,-8,32,-27,9,4, 
  /* [24][0][][] */ -33,20,30,35,7,1,-127,-81, 
  /* [25][0][][] */ 127,11,-84,6,15,-8,6,25, 
  /* [26][0][][] */ -1,55,-32,-127,-26,24,3,-4, 
  /* [27][0][][] */ 127,18,-106,3,-109,53,26,80, 
  /* [28][0][][] */ -127,-21,-20,15,55,8,-4,32, 
  /* [29][0][][] */ -9,-127,-16,-125,-10,27,-16,-20, 
  /* [30][0][][] */ -2,92,127,30,38,-106,112,34, 
  /* [31][0][][] */ -79,-7,-127,47,3,-28,94,103, 
  /* [32][0][][] */ -6,-123,2,-127,-13,11,-11,-18, 
  /* [33][0][][] */ 15,-127,0,-114,6,16,4,-26, 
  /* [34][0][][] */ -25,-46,32,-94,39,-55,127,75, 
  /* [35][0][][] */ -127,7,57,4,-109,-24,26,96, 
  /* [36][0][][] */ -127,15,114,-5,-43,14,-34,41, 
  /* [37][0][][] */ 127,13,-5,-8,-73,19,2,14, 
  /* [38][0][][] */ -73,2,80,39,65,-54,50,127, 
  /* [39][0][][] */ -127,-5,73,-4,-69,12,-9,5, 
  /* [40][0][][] */ -3,31,41,-16,27,-12,127,51, 
  /* [41][0][][] */ 127,-12,-73,2,55,13,9,-9, 
  /* [42][0][][] */ -16,-127,32,-6,17,7,-4,-21, 
  /* [43][0][][] */ 5,106,127,-9,39,-91,68,7, 
  /* [44][0][][] */ 7,-9,-1,111,3,-127,0,0, 
  /* [45][0][][] */ 127,-32,33,-7,-64,103,9,3, 
  /* [46][0][][] */ 10,127,-12,107,-2,127,26,40, 
  /* [47][0][][] */ -14,34,11,-29,27,-38,127,72, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0047372072003781796, 0.0069030271843075752, 0.0010984732070937753, 0.0099733313545584679, 0.0063194585964083672, 0.0050813183188438416, 0.019909344613552094, 0.011646190658211708, 0.012431140057742596, 0.0070238243788480759, 0.0019570125732570887, 0.005483726505190134, 0.0053722872398793697, 0.013069489039480686, 0.007191843818873167, 0.020729495212435722, 0.013123541139066219, 0.0041534020565450191, 0.013435877859592438, 0.02092527411878109, 0.010363141074776649, 0.0051461746916174889, 0.0015312017640098929, 0.0053446399979293346, 0.014848087914288044, 0.0099007366225123405, 0.011659293435513973, 0.0057135690003633499, 0.011943894438445568, 0.0090295681729912758, 0.0037630393635481596, 0.0067527676001191139, 0.0095886485651135445, 0.0033411006443202496, 0.0050212233327329159, 0.0042753233574330807, 0.0059303035959601402, 0.016887808218598366, 0.0064717805944383144, 0.0071604484692215919, 0.017347166314721107, 0.0070811929181218147, 0.010237078182399273, 0.0031964790541678667, 0.017858011648058891, 0.0077841128222644329, 0.0073790103197097778, 0.0057182875461876392, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 11854, 5003, 14264, 2173, 4187, 4699, -4464, 4621, 2783, -2851, -3602, 5393, -3357, -4930, 7795, 1830, -2151, 2261, -1902, 3247, -40, 4580, 1830, -2656, -322, -5046, 2815, -4492, 4207, 8230, 630, 656, 8128, 11131, 8540, 5034, 6149, -4851, 725, 5045, -878, -4748, 4205, 1918, 287, -6711, -12587, 2485, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00035058966022916138, 0.00051087694009765983, 8.1295438576489687e-05, 0.00073810300091281533, 0.00046768839820288122, 0.00037605653051286936, 0.0014734441647306085, 0.00086190743604674935, 0.00091999967116862535, 0.00051981688011437654, 0.00014483393169939518, 0.00040583781083114445, 0.00039759045466780663, 0.00096724240574985743, 0.00053225160809233785, 0.0015341416001319885, 0.00097124266903847456, 0.00030738359782844782, 0.00099435797892510891, 0.0015486307675018907, 0.00076695188181474805, 0.00038085639243945479, 0.00011332066787872463, 0.00039554433897137642, 0.0010988723952323198, 0.00073273043381050229, 0.00086287711746990681, 0.0004228479228913784, 0.00088393979240208864, 0.00066825730027630925, 0.00027849376783706248, 0.00049975659931078553, 0.0007096335175447166, 0.00024726707488298416, 0.0003716090286616236, 0.00031640671659260988, 0.00043888794607482851, 0.0012498273281380534, 0.00047896138858050108, 0.00052992807468399405, 0.0012838232796639204, 0.00052406254690140486, 0.00075762229971587658, 0.0002365639666095376, 0.0013216297375038266, 0.00057608401402831078, 0.0005461033433675766, 0.00042319711064919829, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -17,-82,-92,72,-86,3,-79,-81,50,60,120,-41,-5,9,-78,-55,106,-92,33,-44,-10,-112,-28,-76,76,94,3,-127,6,-33,56,77,54,69,61,18,87,72,37,14,-127,-16,23,43,-58,62,-29,-96, 97,-9,38,70,-127,43,-57,12,100,109,125,59,-14,-73,-127,-101,120,-40,96,-82,-111,126,127,37,127,86,48,-118,-75,-40,-103,115,93,127,102,104,-19,87,58,-74,-93,-83,12,-52,-73,102,-39,106, 107,-6,56,61,-79,12,-30,-6,25,76,11,-31,-73,-3,-39,-47,46,83,56,-15,-62,-31,-74,73,31,20,29,-49,-1,-29,26,38,46,94,12,68,-2,27,47,-12,-60,-9,5,13,-32,108,-4,-4, 
  /* [0][1][][] */ 39,-127,111,83,88,-73,-127,-127,115,70,101,-47,2,-2,-117,-93,92,127,49,-106,-33,112,30,-127,101,111,113,-110,3,-116,-69,81,108,-4,99,52,30,122,63,2,-18,-26,101,97,-116,121,-113,116, 127,-13,1,127,121,-127,-89,8,127,127,127,57,-36,-127,-126,-127,127,64,127,-127,-127,-127,-102,55,113,127,127,-113,-127,-127,127,127,127,1,127,127,-4,127,127,-127,1,-127,127,-84,-127,127,-118,-127, 97,-8,-127,63,87,-59,-42,-6,27,81,20,-14,-127,-3,-32,-36,41,-109,68,-32,-79,4,69,62,47,42,0,-48,-11,-72,-32,28,43,-8,26,74,3,21,76,-6,-28,-10,52,-8,-70,81,-44,13, 
  /* [0][2][][] */ 65,-72,11,30,-4,65,-77,-82,31,17,30,46,10,6,-50,-21,25,-36,20,-62,-11,-3,15,-90,25,42,74,-12,13,-110,10,18,59,-86,62,16,-127,27,9,1,23,-10,82,-127,-84,57,-89,-13, 54,5,6,57,6,92,-38,0,23,55,29,-127,-15,-87,-53,-31,42,-10,51,-96,-36,-14,-23,34,29,47,75,-38,-83,-113,-30,14,58,-88,63,29,20,35,57,-48,117,-70,109,100,-125,75,-127,16, -32,-12,-6,46,-22,39,-29,-3,8,17,-39,41,-70,-2,-23,5,12,28,25,-8,-38,21,16,28,17,23,22,0,-4,-48,12,-16,-1,-47,14,20,11,-23,42,8,56,0,21,-12,-40,88,-25,-4, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0042213089764118195, 0.0058586359955370426, 0.025620922446250916, 0.0031891495455056429, 0.021085653454065323, 0.027752846479415894, 0.0073204454965889454, 0.0071855140849947929, 0.0029044921975582838, 0.0087430756539106369, 0.018675688654184341, 0.010567975230515003, 0.0089312857016921043, 0.0071161724627017975, 0.0023551923222839832, 0.0023921697866171598, 0.0046626972034573555, 0.018476448953151703, 0.0027995260898023844, 0.0038948305882513523, 0.0024792924523353577, 0.024146117269992828, 0.043790243566036224, 0.009093891829252243, 0.0025347715709358454, 0.0055597275495529175, 0.0038995498325675726, 0.004722212441265583, 0.0070693450979888439, 0.005434792023152113, 0.016871791332960129, 0.012501939199864864, 0.0042564719915390015, 0.010195785202085972, 0.0032528911251574755, 0.0031186798587441444, 0.012543288059532642, 0.015405090525746346, 0.0045697842724621296, 0.0082924487069249153, 0.0037216898053884506, 0.0090406248345971107, 0.0049815140664577484, 0.01451441552489996, 0.0034369193017482758, 0.0099213412031531334, 0.0040486906655132771, 0.022414350882172585, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 626, 8716, 200, -1253, 636, 218, 7208, 7359, 252, -6957, -313, 623, 7106, 4599, 24520, 17464, -804, -1340, 1083, 6826, 17461, 874, -1117, -125, 4481, 392, 4417, 18949, 6423, 12270, -63, 1930, -1274, -2717, -1330, 475, 93, 178, -203, 4309, 6364, 4842, -6235, 542, 5041, -1031, 9594, -232, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 9.932491957442835e-05, 0.00013785026385448873, 0.00060284521896392107, 7.5038813520222902e-05, 0.00049613305600360036, 0.00065300817368552089, 0.00017224578186869621, 0.00016907091776374727, 6.8340996222104877e-05, 0.00020571943605318666, 0.0004394279676489532, 0.00024865823797881603, 0.00021014790399931371, 0.00016743935702834278, 5.5416290706489235e-05, 5.6286349717993289e-05, 0.00010971052688546479, 0.00043473998084664345, 6.587120151380077e-05, 9.1643072664737701e-05, 5.8336292568128556e-05, 0.0005681439652107656, 0.0010303587187081575, 0.00021397392265498638, 5.9641686675604433e-05, 0.00013081711949780583, 9.1754118329845369e-05, 0.00011111087951576337, 0.00016633752966299653, 0.00012787745799869299, 0.0003969833196606487, 0.0002941632701549679, 0.00010015228326665238, 0.00023990083718672395, 7.6538613939192146e-05, 7.3380702815484256e-05, 0.00029513618210330606, 0.0003624727251008153, 0.00010752433445304632, 0.00019511644495651126, 8.7569176685065031e-05, 0.0002127205953001976, 0.00011721209739334881, 0.00034151566796936095, 8.0868689110502601e-05, 0.00023344332294072956, 9.5263312687166035e-05, 0.00052739650709554553, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ 46,106,-39,70,-3,-5,-25,11,63,-64,4,-28,11,5,-32,-53,0,-20,32,16,-56,-30,-34,7,18,17,25,-5,17,14,-23,29,-62,10,113,-127,-22,26,-12,116,-27,15,14,1,-14,40,26,-43, 
  /* [1][0][][] */ -1,-46,31,54,-16,-13,-20,-24,44,-41,94,42,18,10,-44,-79,127,39,16,12,-70,31,35,-14,-49,-89,-34,-52,-14,-55,40,-37,-11,-26,-30,11,7,-15,83,-48,-17,36,-59,40,78,63,15,50, 
  /* [2][0][][] */ 74,-24,-11,-13,106,105,60,72,-29,-8,-2,-29,-9,46,55,27,-25,-33,63,-63,-42,-49,-43,59,-87,-89,113,23,59,-68,-56,15,-127,84,99,16,-13,-8,-7,20,26,61,14,-57,-22,18,55,-41, 
  /* [3][0][][] */ 77,-34,14,-11,119,126,23,49,-36,-26,32,59,-127,43,73,26,9,9,74,-108,-88,18,35,88,11,-37,54,24,48,-55,3,-9,-121,60,-66,-120,25,-35,68,-48,53,-95,-115,-28,-62,45,-13,61, 
  /* [4][0][][] */ 39,41,-30,-39,-11,-9,-20,-19,5,-6,-11,-12,-34,-22,61,49,-42,-16,-34,39,27,-11,-14,5,-51,-39,-3,53,-13,11,-21,28,-31,-15,25,-127,-9,26,9,53,5,-13,-13,-25,39,0,83,-19, 
  /* [5][0][][] */ 64,54,-86,53,4,3,-5,27,-79,-55,-54,-22,31,23,43,29,41,-62,40,127,-66,-49,-54,50,30,-25,-36,64,30,28,-57,2,-4,5,-55,-1,-4,15,-21,66,18,78,-8,-43,122,28,18,-59, 
  /* [6][0][][] */ -33,-72,22,-48,-41,-40,-79,-74,-33,-65,-116,42,-53,-52,95,88,-127,9,21,-19,17,54,67,11,-12,-9,-72,86,-80,-36,42,73,14,-55,87,36,25,43,-12,-87,-12,-59,-30,15,-42,-17,-11,62, 
  /* [7][0][][] */ 75,19,-18,41,13,13,9,5,82,-8,-12,-17,60,6,-13,-21,-53,-8,-29,-1,2,-20,-22,-27,69,-127,14,-2,1,99,-21,19,-74,24,-58,-46,-15,26,27,23,26,69,-35,-17,-44,31,42,-26, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0063008833676576614, 0.0050705946050584316, 0.0052799731492996216, 0.0027184435166418552, 0.0070344391278922558, 0.0051283021457493305, 0.0050612878985702991, 0.0051942761056125164, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -12332, 1277, -15075, 959, 2924, -3920, 10877, 973, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00014825607649981976, 0.00011930811160709709, 0.00012423466250766069, 6.3963379943743348e-05, 0.00016551621956750751, 0.00012066593626514077, 0.00011908912711078301, 0.00012221826182212681, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -20,39,16,-127,-90,8,24,122, 
  /* [1][0][][] */ 94,10,-17,-3,-79,46,127,23, 
  /* [2][0][][] */ -10,114,-33,-22,-39,82,-46,-127, 
  /* [3][0][][] */ 62,-77,-83,127,-126,-50,1,-21, 
  /* [4][0][][] */ 45,-69,53,-12,-127,-6,50,28, 
  /* [5][0][][] */ -18,49,-8,-89,-127,-6,-30,9, 
  /* [6][0][][] */ 50,-21,46,41,127,-35,-6,-117, 
  /* [7][0][][] */ 10,31,25,127,26,-10,-4,23, 
  /* [8][0][][] */ 25,29,15,-43,33,127,12,-32, 
  /* [9][0][][] */ 115,20,-14,23,-56,-56,127,65, 
  /* [10][0][][] */ -2,73,-74,-35,8,127,77,-57, 
  /* [11][0][][] */ -20,-39,-127,102,-59,31,-18,75, 
  /* [12][0][][] */ -95,-81,53,48,33,-127,-45,9, 
  /* [13][0][][] */ 41,36,31,51,-55,127,12,-39, 
  /* [14][0][][] */ 13,-118,12,10,-70,-99,-127,115, 
  /* [15][0][][] */ -93,45,-11,12,105,-6,-127,-50, 
  /* [16][0][][] */ 90,87,-95,-127,61,125,103,32, 
  /* [17][0][][] */ -102,127,-125,45,-6,-20,19,-116, 
  /* [18][0][][] */ 38,-1,-96,127,-8,-33,-43,-62, 
  /* [19][0][][] */ 116,12,9,28,-46,9,127,51, 
  /* [20][0][][] */ 42,-73,-87,127,46,-24,-30,-63, 
  /* [21][0][][] */ 26,47,127,-102,41,-27,32,-104, 
  /* [22][0][][] */ -77,-33,-127,56,-22,38,-1,113, 
  /* [23][0][][] */ 75,23,27,41,-127,119,58,-38, 
  /* [24][0][][] */ -14,0,-127,80,-39,30,46,66, 
  /* [25][0][][] */ 41,-33,-76,127,51,-7,-32,-14, 
  /* [26][0][][] */ -73,20,127,-88,-14,24,62,-7, 
  /* [27][0][][] */ -67,78,127,4,21,-9,68,19, 
  /* [28][0][][] */ -52,-94,37,-127,-24,13,-1,-22, 
  /* [29][0][][] */ -77,-75,-14,89,-5,-127,-18,61, 
  /* [30][0][][] */ -127,44,122,-23,47,37,70,27, 
  /* [31][0][][] */ -60,49,87,-127,-46,16,34,60, 
  /* [32][0][][] */ -86,82,97,-121,15,-4,7,127, 
  /* [33][0][][] */ 2,118,-58,48,24,20,-127,-29, 
  /* [34][0][][] */ 94,7,127,-109,-92,-113,47,-40, 
  /* [35][0][][] */ 90,-10,37,109,83,-73,20,-127, 
  /* [36][0][][] */ 24,62,127,-103,25,-19,34,-108, 
  /* [37][0][][] */ -55,-51,109,71,2,-127,91,-15, 
  /* [38][0][][] */ 80,4,77,49,-22,-54,127,24, 
  /* [39][0][][] */ 41,-77,-18,9,-127,2,69,64, 
  /* [40][0][][] */ -39,36,-127,102,-51,43,-71,110, 
  /* [41][0][][] */ -111,-17,-47,5,127,11,-88,16, 
  /* [42][0][][] */ -84,70,-24,-31,127,42,-109,-57, 
  /* [43][0][][] */ 123,123,-33,127,-2,-106,51,79, 
  /* [44][0][][] */ 0,25,105,14,39,-127,25,-33, 
  /* [45][0][][] */ -6,-72,127,78,-29,-17,-117,16, 
  /* [46][0][][] */ 52,-127,-121,64,-88,22,0,-17, 
  /* [47][0][][] */ -101,-25,42,-7,75,34,-127,-28, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0022790648508816957, 0.0042935912497341633, 0.00068668718449771404, 0.0040895910933613777, 0.0051538948900997639, 0.0026033823378384113, 0.0036796568892896175, 0.0090518081560730934, 0.0044617392122745514, 0.004295415710657835, 0.0021266455296427011, 0.0059041944332420826, 0.0036310763098299503, 0.0037840891163796186, 0.0031814363319426775, 0.0032701124437153339, 0.0030455691739916801, 0.0034823634196072817, 0.0063279508613049984, 0.0027418141253292561, 0.0044733774848282337, 0.0055584432557225227, 0.0043207565322518349, 0.0015121038304641843, 0.0010037157917395234, 0.0035368639510124922, 0.0043833288364112377, 0.0056070717982947826, 0.009584975428879261, 0.002555950079113245, 0.0025342304725199938, 0.0015774737112224102, 0.0014709822135046124, 0.0028218617662787437, 0.0019978547934442759, 0.0031412725802510977, 0.0055080661550164223, 0.0033422226551920176, 0.0019589010626077652, 0.0024933055974543095, 0.0038440951611846685, 0.0013703851727768779, 0.0015291909221559763, 0.003775354940444231, 0.0024583851918578148, 0.0058175390586256981, 0.003460803534835577, 0.0045914552174508572, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 7217, 2386, 36361, -2209, -1412, 7859, -826, 1169, 2595, 163, 7926, 605, 2866, 3835, 3319, 4554, 3108, 3003, -916, 6253, 1548, 391, 1426, 12662, 29847, 4562, 3373, -1300, -198, 6233, 6727, 12099, 12784, 5847, 9020, -1288, 623, 2276, 8693, 6810, 752, 14279, 13997, 3890, 7004, 1988, 4365, 838, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00011877748329425231, 0.00022376807464752346, 3.5787914384854957e-05, 0.00021313625620678067, 0.00026860431535169482, 0.00013567986025009304, 0.00019177180365659297, 0.00047175094368867576, 0.00023253139806911349, 0.00022386315686162561, 0.00011083388380939141, 0.00030770749435760081, 0.00018923994502983987, 0.00019721448188647628, 0.00016580616647843271, 0.00017042768013197929, 0.0001587252045283094, 0.00018148950766772032, 0.00032979232491925359, 0.0001428944815415889, 0.00023313795099966228, 0.00028968806145712733, 0.0002251838450320065, 7.8805955126881599e-05, 5.2310417231637985e-05, 0.00018432989600114524, 0.00022844491468276829, 0.0002922224230132997, 0.00049953791312873363, 0.000133207839098759, 0.00013207588926889002, 8.221282041631639e-05, 7.6662829087581486e-05, 0.00014706629735883325, 0.00010412172559881583, 0.00016371296078432351, 0.00028706257580779493, 0.00017418582865502685, 0.00010209158062934875, 0.00012994301505386829, 0.00020034179033245891, 7.1420035965275019e-05, 7.9696481407154351e-05, 0.00019675928342621773, 0.00012812307977583259, 0.00030319130746647716, 0.00018036588153336197, 0.00023929178132675588, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ -12,-49,39,-26,127,-3,-14,-13,-28,39,-8,7,64,22,127,-40,18,-23,-29,-18,-28,-17,-74,25,-119,49,23,-47,-8,19,-21,-2,-30,28,17,3,84,59,30,-6,75,15,-14,0,-100,-5,-51,-40, 2,-106,-70,-27,-45,-5,38,19,18,-7,67,127,-13,66,-69,127,-3,-75,45,-50,-83,-127,-90,81,-127,-84,25,108,17,37,127,12,-127,-118,-48,38,127,-86,112,14,62,-12,-24,-9,-52,-12,67,1, 11,-19,-13,127,49,6,-87,-4,-22,-45,-21,-22,49,3,-68,-48,17,18,1,-11,-4,3,-36,12,-46,-65,-26,35,3,32,-92,-4,15,70,19,21,6,77,-127,2,27,-6,-9,28,-127,3,-63,47, 
  /* [0][1][][] */ -121,-71,127,-6,-44,-37,75,22,22,89,11,11,47,32,103,31,38,-127,90,38,88,-9,49,-41,-11,-18,29,-56,27,53,32,52,41,-102,1,127,10,49,-40,-114,31,89,-19,-83,37,-83,-71,18, 127,-73,-69,-72,-1,-127,127,127,127,11,127,-50,-127,33,-40,-43,127,-114,127,127,127,82,127,-127,-3,-25,111,-28,127,127,-127,127,35,-122,127,-104,-66,127,-99,127,-127,-127,127,-127,111,-127,127,-121, -13,-114,13,73,-26,-13,-53,13,-10,-127,-35,49,79,15,-68,42,20,1,3,16,-6,-22,39,-25,1,3,-127,76,-60,10,80,20,-14,-104,-19,-44,62,8,117,13,25,50,-43,4,65,-23,-66,127, 
  /* [0][2][][] */ -12,119,29,-30,72,13,-48,-15,-25,15,-3,0,58,12,98,6,-20,2,-10,-49,-14,11,-7,9,-28,-14,28,0,-45,-104,-18,-3,-4,48,-21,32,-55,50,15,106,16,16,-2,11,26,1,-25,-43, -3,92,-44,18,27,-37,-5,30,33,7,27,-38,40,127,-71,-79,1,-23,95,-80,-49,78,-9,48,63,127,7,127,-61,-104,-21,1,100,-127,-88,0,-65,-37,-27,-125,45,-24,-57,81,57,21,10,11, 14,127,-14,34,26,6,-65,-2,-19,-22,-9,-6,54,-2,-72,-6,-4,13,-31,-27,-12,4,-9,-2,-49,25,-38,17,42,-73,17,4,9,57,-1,-19,-44,63,11,2,-31,-8,2,-17,18,7,-11,34, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.012741925194859505, 0.0053281290456652641, 0.025048714131116867, 0.0070983800105750561, 0.0084551991894841194, 0.012175068259239197, 0.010109012015163898, 0.0085266083478927612, 0.013993154279887676, 0.0071100257337093353, 0.01758909784257412, 0.0087290368974208832, 0.0056216828525066376, 0.0054937568493187428, 0.0053646070882678032, 0.018823673948645592, 0.010607830248773098, 0.0040758894756436348, 0.0065935351885855198, 0.022021127864718437, 0.010544346645474434, 0.013902733102440834, 0.0082605686038732529, 0.034332908689975739, 0.01120771374553442, 0.012699471786618233, 0.0080866441130638123, 0.0080300141125917435, 0.0097158178687095642, 0.0082015618681907654, 0.015243635512888432, 0.022079603746533394, 0.018659267574548721, 0.0046160281635820866, 0.021711286157369614, 0.0083302073180675507, 0.0080532925203442574, 0.0039008217863738537, 0.020812517032027245, 0.033630933612585068, 0.0089071467518806458, 0.032002899795770645, 0.02496824599802494, 0.0079049598425626755, 0.0087192142382264137, 0.0056127589195966721, 0.0080181173980236053, 0.0099391695111989975, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 447, 2561, 184, -29, -80, 9518, 360, -4018, -5869, 84, -7259, 350, -4598, -6594, -497, 218, -8852, 15549, -3291, 668, -477, -221, 72, 707, 20590, 221, -778, -1056, -479, -606, 725, -8562, -1065, 12831, 448, 6608, -228, -4245, -27, -723, -4300, -15, 3786, 4741, -1178, 7396, 1981, -2383, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00029981002444401383, 0.00012536774738691747, 0.00058938149595633149, 0.0001670207129791379, 0.00019894586876034737, 0.00028647220460698009, 0.00023785911616869271, 0.00020062607654836029, 0.00032925070263445377, 0.00016729472554288805, 0.00041386112570762634, 0.00020538910757750273, 0.00013227488670963794, 0.00012926486670039594, 0.00012622604845091701, 0.00044290997902862728, 0.00024959602160379291, 9.5903284091036767e-05, 0.00015514201368205249, 0.00051814416656270623, 0.00024810226750560105, 0.00032712312531657517, 0.0001943663228303194, 0.00080783315934240818, 0.00026371091371402144, 0.00029881109367124736, 0.00019027398957405239, 0.00018894151435233653, 0.0002286074886796996, 0.00019297792459838092, 0.00035867377300746739, 0.00051952007925137877, 0.0004390415851958096, 0.00010861243208637461, 0.00051085377344861627, 0.00019600488303694874, 0.00018948923388961703, 9.1784044343512505e-05, 0.00048970628995448351, 0.00079131609527394176, 0.00020957992819603533, 0.0007530094007961452, 0.00058748817536979914, 0.00018599905888549984, 0.00020515797950793058, 0.00013206491712480783, 0.00018866159371100366, 0.00023386281100101769, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ 39,-45,103,68,27,-42,26,6,-5,54,-29,17,-54,-80,44,6,-106,61,-32,69,-42,74,3,-27,-2,-50,67,-32,-23,27,-27,107,-63,-13,-31,-86,-64,-50,-36,-10,-13,62,-127,10,53,27,26,52, 
  /* [1][0][][] */ -59,-31,61,-4,-30,28,-39,-34,47,-11,2,-25,-20,19,-2,23,6,19,21,-8,-55,-26,-72,-23,27,-36,-28,-38,25,-69,-10,-127,-2,-62,-67,-74,-44,-90,-27,25,48,-12,85,-109,-50,-12,-28,-3, 
  /* [2][0][][] */ -61,88,-9,40,14,8,16,-36,78,-42,73,84,96,17,28,-54,97,-3,10,31,-14,20,15,127,-106,-41,12,-21,-6,85,-21,-84,-20,-1,3,-80,-24,7,-37,-15,88,-77,26,-8,26,-116,1,-13, 
  /* [3][0][][] */ 62,-21,-57,34,83,-83,5,-116,-30,-4,-55,-87,-26,127,-10,20,-41,-18,-62,-42,32,80,-7,-52,111,40,53,-66,27,-88,53,-61,51,60,111,-72,-42,14,-26,48,22,88,-74,27,-6,29,10,34, 
  /* [4][0][][] */ -56,30,-42,72,99,-26,29,-42,-42,-4,-67,34,-42,-20,4,-63,9,69,-36,-44,-45,37,-70,-65,16,-7,20,-35,37,-41,-30,60,-8,82,-71,-73,-62,-61,-38,-5,65,-58,127,22,5,84,-57,-55, 
  /* [5][0][][] */ 55,3,85,-12,-6,20,53,37,127,0,70,-4,68,55,28,-64,-15,33,29,-42,-60,-75,12,41,18,-18,26,43,-44,-30,16,-23,-25,50,-18,59,51,-1,-30,-50,-10,69,29,38,-15,-9,71,5, 
  /* [6][0][][] */ -3,-63,-14,15,31,-8,-2,10,-46,-18,105,55,90,67,-36,48,116,-127,-19,2,-11,-38,-98,32,-73,66,-32,-5,-20,-49,66,-51,92,12,-71,-23,-42,2,57,11,71,-67,-3,-74,-106,50,-43,24, 
  /* [7][0][][] */ -13,-20,-59,-30,18,106,0,-7,-4,-56,-127,-102,45,56,-63,-44,-33,25,110,27,-12,-73,65,-13,116,-27,-75,89,-41,-5,-28,-82,-47,68,51,117,94,-61,-23,-39,-22,-3,44,-17,-7,-23,6,-54, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0059623699635267258, 0.0057366569526493549, 0.0062152426689863205, 0.009173152968287468, 0.0054895239882171154, 0.006037403829395771, 0.0033312474843114614, 0.0048970086500048637, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 10644, 15308, 4335, 3063, 1966, -12609, 6192, -7572, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0001402910565957427, 0.00013498016051016748, 0.00014624100003857166, 0.00021583889611065388, 0.000129165273392573, 0.00014205656771082431, 7.8382297942880541e-05, 0.00011522373824845999, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 43,24,-50,8,-35,53,-127,26, 
  /* [1][0][][] */ 1,-64,-123,-7,-11,-21,127,-106, 
  /* [2][0][][] */ -124,-47,-75,-49,-31,52,-127,-8, 
  /* [3][0][][] */ -64,-40,17,-10,-20,-127,-108,-25, 
  /* [4][0][][] */ -45,-127,-41,15,58,24,-39,-40, 
  /* [5][0][][] */ 68,-37,91,47,-127,58,-72,-95, 
  /* [6][0][][] */ 36,-127,-61,-32,-14,61,-43,-84, 
  /* [7][0][][] */ -24,-86,-54,-56,75,-127,-1,17, 
  /* [8][0][][] */ 38,57,41,55,27,-48,-8,127, 
  /* [9][0][][] */ -25,-57,-48,5,44,-19,127,-11, 
  /* [10][0][][] */ -29,14,-127,17,29,17,91,-102, 
  /* [11][0][][] */ 7,-33,-34,3,-127,22,5,55, 
  /* [12][0][][] */ 103,72,-29,46,-81,127,85,-13, 
  /* [13][0][][] */ -48,-8,23,-18,40,-127,0,66, 
  /* [14][0][][] */ -100,-46,5,41,11,66,-122,-127, 
  /* [15][0][][] */ 59,91,45,6,-127,45,124,-61, 
  /* [16][0][][] */ 1,-62,11,71,-13,-78,3,-127, 
  /* [17][0][][] */ -80,127,23,-13,-59,-50,-84,-78, 
  /* [18][0][][] */ 89,127,-109,-123,101,102,-105,-79, 
  /* [19][0][][] */ -27,76,-11,11,-127,11,-68,-95, 
  /* [20][0][][] */ -127,-2,9,11,21,24,99,51, 
  /* [21][0][][] */ -35,-7,50,19,-89,-105,-127,21, 
  /* [22][0][][] */ -3,-35,-48,-7,-127,6,2,61, 
  /* [23][0][][] */ 59,4,-17,-12,127,63,-84,80, 
  /* [24][0][][] */ 127,7,-43,29,-87,8,6,-7, 
  /* [25][0][][] */ 25,-59,53,101,-47,-127,22,104, 
  /* [26][0][][] */ 28,127,14,64,84,-25,29,-23, 
  /* [27][0][][] */ -119,104,68,-16,127,-73,4,97, 
  /* [28][0][][] */ -76,-73,-67,-33,86,-127,22,-19, 
  /* [29][0][][] */ -58,-20,40,41,127,-86,-75,65, 
  /* [30][0][][] */ 127,43,-115,-108,-76,-96,-82,-72, 
  /* [31][0][][] */ 28,5,36,69,-127,10,36,2, 
  /* [32][0][][] */ 127,19,47,42,-32,-57,89,57, 
  /* [33][0][][] */ 127,34,-45,8,-120,-62,25,47, 
  /* [34][0][][] */ 42,-10,-24,22,-42,127,16,-76, 
  /* [35][0][][] */ 127,32,-15,-36,34,-99,32,123, 
  /* [36][0][][] */ -40,-45,70,-99,-31,-20,82,-127, 
  /* [37][0][][] */ 81,-73,65,49,114,-11,37,-127, 
  /* [38][0][][] */ 69,127,7,-27,-23,20,25,76, 
  /* [39][0][][] */ 26,-2,-78,73,-28,-65,-76,127, 
  /* [40][0][][] */ -15,-29,-5,-33,26,-127,26,39, 
  /* [41][0][][] */ -25,43,-127,-60,92,110,66,-116, 
  /* [42][0][][] */ 26,-52,-35,12,72,127,32,59, 
  /* [43][0][][] */ -5,53,-33,29,-127,-87,58,-66, 
  /* [44][0][][] */ -127,-53,-13,-35,55,54,-121,-77, 
  /* [45][0][][] */ -57,60,-54,20,33,-6,-72,127, 
  /* [46][0][][] */ -26,49,127,-2,-49,-56,-46,41, 
  /* [47][0][][] */ -127,-117,-39,-50,107,117,-41,99, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0029633017256855965, 0.0015739431837573647, 0.0016257871175184846, 0.0028783995658159256, 0.0049582552164793015, 0.00091638282174244523, 0.0025695806834846735, 0.0024397079832851887, 0.0010398152517154813, 0.0039005321450531483, 0.0022688854951411486, 0.0028410819359123707, 0.0016705818707123399, 0.0027961123269051313, 0.0041188308969140053, 0.002109467750415206, 0.0026113591156899929, 0.0012297668727114797, 0.0015904663596302271, 0.0037376114632934332, 0.0035535770002752542, 0.0027471394278109074, 0.0029805728700011969, 0.0028554373420774937, 0.0032378057949244976, 0.0020136367529630661, 0.0022871142718940973, 0.0021541034802794456, 0.0026581399142742157, 0.0019357796991243958, 0.00098376593086868525, 0.0024303903337568045, 0.0033595396671444178, 0.0030751936137676239, 0.0027535897679626942, 0.0031435878481715918, 0.002203080803155899, 0.0010256782406941056, 0.0037255981005728245, 0.0026225075125694275, 0.0013957316987216473, 0.001396645326167345, 0.0036461043637245893, 0.0028981962241232395, 0.0028043724596500397, 0.002323036314919591, 0.00095831963699311018, 0.0016594900516793132, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { -1723, 5442, 4824, -745, 94, 9791, 3303, 1657, 9895, 1398, -1821, 1741, 3816, 1745, -228, 811, -1373, 7755, -2829, -777, 1050, 947, 395, -436, 272, 2683, -2040, -1460, -921, -2212, 11239, 2619, 709, 1076, 405, 1205, 1425, 8684, 1171, 443, 6934, -1834, 558, 1359, -1788, -2003, 10965, 3109, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.000301683961879462, 0.00016023794887587428, 0.00016551601584069431, 0.00029304032796062529, 0.00050478358753025532, 9.3293907411862165e-05, 0.00026160050765611231, 0.00024837860837578773, 0.00010586014832369983, 0.00039710028795525432, 0.00023098773090168834, 0.00028924114303663373, 0.00017007641145028174, 0.00028466293588280678, 0.00041932455496862531, 0.0002147579361917451, 0.00026585382875055075, 0.00012519849406089634, 0.00016192012117244303, 0.00038051386945880949, 0.00036177792935632169, 0.00027967718779109418, 0.00030344226979650557, 0.00029070262098684907, 0.00032963030389510095, 0.00020500169193837792, 0.00023284353665076196, 0.00021930215007159859, 0.00027061643777415156, 0.00019707532192114741, 0.00010015395673690364, 0.00024742999812588096, 0.00034202361712232232, 0.00031307528843171895, 0.00028033385751768947, 0.00032003829255700111, 0.00022428836382459849, 0.00010442091297591105, 0.00037929081008769572, 0.00026698881993070245, 0.00014209482469595969, 0.00014218784053809941, 0.00037119782064110041, 0.0002950557682197541, 0.0002855038910638541, 0.00023650065122637898, 9.7563352028373629e-05, 0.0001689471973804757, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 63,-57,-35,38,87,50,-81,-79,4,47,113,-65,-50,79,97,41,59,-73,56,78,-84,-103,44,70,-56,-18,82,75,112,112,-63,61,48,-75,-121,-75,76,-72,75,17,-80,73,35,-88,65,110,73,-71, 73,-74,-57,72,106,60,-87,-120,19,65,112,-108,-87,98,120,71,59,-91,71,96,-76,-115,68,101,-76,-50,97,99,121,127,-74,86,67,-116,-127,-100,96,-79,82,43,-109,73,39,-102,85,124,81,-83, 44,-30,-40,25,44,2,-29,-49,20,18,38,-41,-75,40,51,28,18,-25,25,13,-5,-75,33,47,-32,-8,34,48,64,67,-19,17,32,-53,-65,-53,25,-25,22,32,-36,44,13,-31,41,36,23,-57, 
  /* [0][1][][] */ 47,-98,-67,74,106,84,-127,-95,88,102,101,-93,-75,95,119,74,108,-96,55,127,-119,-125,72,102,-104,-78,121,100,114,123,-82,90,94,-121,-117,-113,86,-102,114,72,-100,127,100,-124,89,117,51,-81, 51,-127,-127,127,127,127,-125,-127,127,127,127,-127,-127,127,127,127,127,-127,56,126,-127,-127,127,127,-127,-127,127,127,127,107,-127,127,127,-127,-110,-127,127,-127,127,127,-127,116,127,-127,127,127,57,-127, 2,-65,-77,66,54,32,-61,-66,70,47,46,-70,-73,42,50,56,30,-32,20,32,-29,-79,60,58,-72,-16,13,65,74,7,-33,25,55,-99,-71,-46,38,-41,36,66,-27,49,53,-52,47,0,22,-87, 
  /* [0][2][][] */ -32,-55,-41,55,25,42,-72,-1,-106,55,38,-65,-57,47,67,50,53,-19,-79,58,-32,-44,39,43,-81,-62,67,36,42,33,-59,32,45,-73,-49,-42,38,-53,51,85,-34,83,67,-60,22,9,-102,-24, -127,-78,-75,85,34,72,-69,5,-82,62,46,-69,-98,50,65,76,66,-28,-127,61,-52,-76,68,43,-106,-47,58,55,32,-2,-81,41,64,-110,-27,-70,56,-60,58,110,-24,90,106,-84,39,-18,-127,-68, -63,-16,-42,59,21,25,0,-7,-96,35,33,-30,-39,27,32,39,16,-7,-70,23,-10,-8,30,37,-40,11,-2,37,31,-18,-28,10,26,-37,-4,-28,17,-13,9,51,0,40,43,-15,6,-26,-51,-45, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.010989883914589882, 0.0046275649219751358, 0.0045515061356127262, 0.0041729062795639038, 0.0025687129236757755, 0.0061893071979284286, 0.0047997063957154751, 0.0038436294998973608, 0.01088107842952013, 0.0026551880873739719, 0.005563030019402504, 0.0042108045890927315, 0.0036962933372706175, 0.0082132015377283096, 0.0036036218516528606, 0.0033186459913849831, 0.0034008855000138283, 0.0064910072833299637, 0.016374802216887474, 0.0030551184900105, 0.0025355680845677853, 0.0034231874160468578, 0.0040146801620721817, 0.0062233414500951767, 0.0037424454931169748, 0.004305349662899971, 0.0075713209807872772, 0.0079415645450353622, 0.0050843940116465092, 0.0079248407855629921, 0.0059091686271131039, 0.0037549531552940607, 0.0028356167022138834, 0.0043292301706969738, 0.0032636765390634537, 0.003549081739038229, 0.0040136631578207016, 0.0040564998053014278, 0.0037475868593901396, 0.0036894651129841805, 0.0056276498362421989, 0.0085986480116844177, 0.0031192686874419451, 0.0038332459516823292, 0.0087297586724162102, 0.0063041765242815018, 0.010534817352890968, 0.0050787515938282013, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { -402, 26088, 25318, -1569, -109, -14443, 23918, 17749, -9454, 890, -1752, 18122, 19467, -16682, -11784, -1820, -229, 27594, -755, 118, 42759, 11841, -9063, -7102, 16282, 11852, -2661, -2309, -4442, -512, 30858, 378, -4541, 10774, 14886, 14765, -3657, 41994, -4435, -1101, 25794, -764, -2715, 14708, -226, -849, -7467, 14712, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00025858549633994699, 0.00010888388351304457, 0.00010709426715038717, 9.8186028480995446e-05, 6.0440306697273627e-05, 0.00014563076547347009, 0.00011293427087366581, 9.0438341430854052e-05, 0.00025602537789382041, 6.2475017330143601e-05, 0.00013089482672512531, 9.9077755294274539e-05, 8.697160956216976e-05, 0.00019325180619489402, 8.4791106928605586e-05, 7.8085788118187338e-05, 8.0020836321637034e-05, 0.00015272958262357861, 0.00038528945879079401, 7.1885144279804081e-05, 5.9660425904439762e-05, 8.0545585660729557e-05, 9.4463066488970071e-05, 0.00014643157192040235, 8.8057546236086637e-05, 0.00010130235023098066, 0.00017814873717725277, 0.00018686034309212118, 0.00011963280121563002, 0.00018646684475243092, 0.00013903927174396813, 8.8351844169665128e-05, 6.6720393078867346e-05, 0.00010186424333369359, 7.679239206481725e-05, 8.3507809904403985e-05, 9.4439135864377022e-05, 9.5447059720754623e-05, 8.817851630738005e-05, 8.6810949142090976e-05, 0.00013241529813967645, 0.00020232112728990614, 7.3394556238781661e-05, 9.0194022050127387e-05, 0.00020540608966257423, 0.00014833356544841081, 0.00024787805159576237, 0.00011950003681704402, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[8*1*1*48] = { 
  /* [0][0][][] */ -22,-27,43,-52,50,81,65,90,100,-48,-23,54,-31,-25,10,-21,38,42,10,-53,-31,17,-83,-40,29,-12,17,-74,-40,21,41,26,26,41,60,11,111,-46,-74,4,-56,-69,-31,-4,-70,-88,-127,52, 
  /* [1][0][][] */ -13,-3,-41,52,1,10,-41,-19,-60,27,18,90,-26,6,-27,127,41,58,12,-32,-44,-21,-72,21,17,-7,-18,-87,51,-9,-60,-70,61,-32,-29,-57,35,35,52,-44,4,71,46,-42,0,-37,-54,-22, 
  /* [2][0][][] */ 6,-68,-30,-3,-34,18,5,11,109,12,-13,-18,-31,-74,33,5,-2,-59,-25,-7,-101,48,7,31,9,45,-40,-26,-26,-40,42,-45,-97,29,-49,52,-72,64,-18,-23,127,-25,-3,43,27,40,-60,-41, 
  /* [3][0][][] */ -34,-108,90,59,24,-101,-19,-15,-127,119,53,-52,50,10,-23,19,56,35,-31,41,71,80,31,-62,13,81,60,29,-31,-70,15,15,-21,4,51,7,-14,-83,-40,39,-29,-13,22,-67,-76,15,-6,24, 
  /* [4][0][][] */ -11,52,-16,74,34,5,7,-4,-54,80,46,68,3,23,60,13,7,-98,-9,-13,85,-14,-93,57,72,-25,28,27,51,24,-10,-50,-50,127,5,15,62,-26,18,23,-28,41,-2,-25,0,-51,-33,18, 
  /* [5][0][][] */ -22,-1,-5,-68,-127,29,120,29,17,64,-21,-26,-102,-3,62,-29,-80,37,-54,-79,1,107,-2,38,101,30,-3,18,-21,-13,120,-53,-12,103,74,90,-21,52,90,40,-22,-35,-26,36,-65,54,30,57, 
  /* [6][0][][] */ 5,-21,-9,28,-56,-57,18,4,27,-13,45,8,-50,-22,37,58,5,-62,9,-59,72,-22,-1,-29,10,0,11,41,46,5,9,127,43,-13,-11,25,1,-8,23,16,2,39,-29,-49,-3,-21,-19,41, 
  /* [7][0][][] */ -25,-16,-42,-5,4,-26,6,11,40,4,24,0,-9,10,1,1,28,-8,2,-2,-58,10,9,-26,0,-5,-52,-11,-14,-18,16,29,16,-9,27,9,-20,127,-11,-40,-39,0,-47,-33,21,63,-69,-10, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant24_scale = { 8, { 0.0044976435601711273, 0.0055623645894229412, 0.0044644465669989586, 0.0048602819442749023, 0.0052678519859910011, 0.0043447623029351234, 0.0084649352356791496, 0.0091673750430345535, } };
const TfArray<8, int> quant24_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[8] = { 4870, -1979, 13889, -6485, -12498, -14478, -9113, -1994, };
const TfArray<1, int> tensor_dimension25 = { 1, { 8 } };
const TfArray<8, float> quant25_scale = { 8, { 0.00010582691174931824, 0.00013087916886433959, 0.00010504580131964758, 0.00011435958003858104, 0.00012394945952109993, 0.0001022297001327388, 0.00019917494500987232, 0.00021570295211859047, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ -78,-127,-36,27,-37,-12,52,-51, 
  /* [1][0][][] */ -15,127,43,-87,9,-90,-67,96, 
  /* [2][0][][] */ -127,-71,33,7,76,9,28,-22, 
  /* [3][0][][] */ 0,-37,-127,-51,34,-47,-26,48, 
  /* [4][0][][] */ -55,-99,111,-24,127,-65,56,0, 
  /* [5][0][][] */ -20,66,49,-89,95,30,-58,127, 
  /* [6][0][][] */ -127,91,55,70,-51,5,34,-116, 
  /* [7][0][][] */ 46,-14,63,29,51,-127,-7,104, 
  /* [8][0][][] */ -1,74,-5,-35,18,106,127,-74, 
  /* [9][0][][] */ 85,127,8,-56,-74,-69,-43,102, 
  /* [10][0][][] */ 29,-13,25,6,-24,36,-127,-72, 
  /* [11][0][][] */ -74,12,-109,-64,127,16,42,66, 
  /* [12][0][][] */ 94,44,-34,3,127,88,18,8, 
  /* [13][0][][] */ -127,-120,-13,48,-90,49,66,4, 
  /* [14][0][][] */ -15,92,-94,120,-58,127,-16,33, 
  /* [15][0][][] */ -9,-64,-22,-80,127,66,-25,58, 
  /* [16][0][][] */ 66,-88,2,50,42,-15,39,-127, 
  /* [17][0][][] */ -75,-74,-127,103,3,89,78,-113, 
  /* [18][0][][] */ 71,-18,127,3,-40,-104,-83,-29, 
  /* [19][0][][] */ -31,127,29,38,108,-115,-63,-43, 
  /* [20][0][][] */ -68,-13,-127,-43,31,-8,-4,-2, 
  /* [21][0][][] */ -125,-19,54,57,-93,-106,127,-53, 
  /* [22][0][][] */ 53,-7,-127,-68,-31,-13,-5,50, 
  /* [23][0][][] */ -21,41,127,-15,-97,33,-4,-93, 
  /* [24][0][][] */ -93,116,103,127,127,91,11,-52, 
  /* [25][0][][] */ -51,-127,-75,40,-59,32,53,-1, 
  /* [26][0][][] */ 116,122,-120,-64,-127,-19,-70,49, 
  /* [27][0][][] */ 61,57,-71,22,-127,19,-33,-18, 
  /* [28][0][][] */ -20,76,30,-71,77,88,-117,-127, 
  /* [29][0][][] */ 38,-9,-5,-78,-127,3,13,-51, 
  /* [30][0][][] */ -81,1,33,127,44,17,-37,-16, 
  /* [31][0][][] */ 19,-108,-7,-84,-127,50,-69,-106, 
  /* [32][0][][] */ -127,-7,23,-11,10,-29,4,19, 
  /* [33][0][][] */ 50,-58,-127,-97,-10,5,-48,19, 
  /* [34][0][][] */ 58,92,125,-7,-127,-67,89,-85, 
  /* [35][0][][] */ 99,22,15,5,-100,-34,-127,-55, 
  /* [36][0][][] */ 127,1,87,-47,1,-12,75,87, 
  /* [37][0][][] */ 115,105,-12,-11,78,81,-127,39, 
  /* [38][0][][] */ -39,88,106,127,-31,61,24,-64, 
  /* [39][0][][] */ 33,47,127,-34,78,-52,-36,17, 
  /* [40][0][][] */ 72,41,27,16,-66,-127,35,-50, 
  /* [41][0][][] */ 28,-48,20,127,-21,72,3,71, 
  /* [42][0][][] */ -13,-112,87,-47,127,-38,112,24, 
  /* [43][0][][] */ 2,-36,-117,-49,127,35,-85,125, 
  /* [44][0][][] */ 106,-26,127,-10,-4,35,-57,17, 
  /* [45][0][][] */ -20,30,19,-30,-85,-127,-25,83, 
  /* [46][0][][] */ -57,83,76,33,-1,-26,49,-127, 
  /* [47][0][][] */ 29,-11,10,127,-13,-120,76,71, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0053335269913077354, 0.0024932683445513248, 0.0022013059351593256, 0.0032418998889625072, 0.0033161081373691559, 0.0021767276339232922, 0.0036657440941780806, 0.0018449750496074557, 0.0014283924829214811, 0.0025340358261018991, 0.0039320909418165684, 0.0040946993976831436, 0.0035989973694086075, 0.0025956514291465282, 0.003528509521856904, 0.0027191541157662868, 0.0036567181814461946, 0.0023306692019104958, 0.0022052463609725237, 0.003087940625846386, 0.0043923035264015198, 0.0015166857047006488, 0.0043034730479121208, 0.0024988374207168818, 0.0013478809269145131, 0.0021748349536210299, 0.0029686191119253635, 0.0017423086101189256, 0.0024484505411237478, 0.0028198363725095987, 0.0061295540072023869, 0.0017204546602442861, 0.0050066583789885044, 0.0026795382145792246, 0.0019495503511279821, 0.0027168800588697195, 0.00071123981615528464, 0.0014980364358052611, 0.0026829552371054888, 0.0015793163329362869, 0.0027502132579684258, 0.0054513760842382908, 0.0026055597700178623, 0.0025077851023525, 0.0035758349113166332, 0.0033526783809065819, 0.0037386163603514433, 0.0022133395541459322, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[48] = { 586, 6016, -6686, 3697, 2997, 6129, 2628, 9518, 12710, 5799, -1910, -117, 1352, 4788, 2834, -947, -113, 6219, 8242, 418, 2189, 11095, 2517, 5521, 13034, 8389, 1686, 10585, 2273, 5666, -1518, 9512, 1361, 5380, 6589, 5530, 42126, 11936, 4546, 12380, 2515, 602, 5409, 1987, 3418, 1906, 2148, 3369, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 0.00027151920949108899, 0.000126927305245772, 0.00011206408817088231, 0.00016503865481354296, 0.00016881644842214882, 0.00011081285629188642, 0.00018661571084521711, 9.3923998065292835e-05, 7.2716611612122506e-05, 0.00012900269939564168, 0.00020017489441670477, 0.00020845296967308968, 0.00018321776587981731, 0.0001321394374826923, 0.00017962937999982387, 0.00013842670887243003, 0.0001861562195699662, 0.00011864971747854725, 0.00011226468632230535, 0.00015720089140813798, 0.00022360340517479926, 7.721144356764853e-05, 0.00021908122289460152, 0.00012721082021016628, 6.8617926444858313e-05, 0.00011071650078520179, 0.00015112647088244557, 8.8697452156338841e-05, 0.00012464572500903159, 0.00014355224266182631, 0.00031204335391521454, 8.758491458138451e-05, 0.00025487897801212966, 0.00013640994438901544, 9.9247714388184249e-05, 0.00013831093383487314, 3.6207798984833062e-05, 7.6262040238361806e-05, 0.00013658389798365533, 8.0399840953759849e-05, 0.00014000786177348346, 0.00027751867310144007, 0.00013264385052025318, 0.00012766632426064461, 0.00018203860963694751, 0.00017067816224880517, 0.00019032548880204558, 0.0001126766946981661, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*48] = { 
  /* [0][0][][] */ -59,0,43,7,127,-58,28,10,-2,29,34,-1,2,20,-73,12,86,-32,-15,46,-37,4,-43,-6,-22,2,40,-54,-31,127,40,-78,-57,107,123,-97,9,-58,-127,-26,18,-8,-21,-63,-2,-62,-127,33, -46,90,-6,30,-15,-76,119,-15,70,12,54,127,47,127,-22,39,91,-74,10,68,-42,-29,105,-113,-2,46,-93,17,-31,-96,114,-127,-127,-83,13,-60,-58,-31,-103,24,-50,-17,12,-127,27,-110,35,57, -18,-7,5,-3,45,-59,15,0,20,22,17,-36,-19,9,-73,23,52,-41,-13,50,-31,-6,-59,4,23,-1,37,-113,-39,47,-51,-76,1,-4,106,-82,10,-36,-80,10,24,6,-8,-46,-12,-87,-124,-22, 
  /* [0][1][][] */ -127,120,-5,-62,-2,-73,18,-7,28,17,74,62,78,91,-63,34,127,-127,17,106,-24,-68,-91,-27,-127,-7,-24,7,-15,-2,91,-66,-71,127,-109,-67,34,-65,26,63,-96,34,-94,54,-8,-127,4,-37, 18,110,127,127,-51,86,-127,127,127,-127,-39,88,127,96,127,-110,-49,-84,127,15,-127,127,127,7,88,103,77,127,127,-84,127,-2,-77,-104,-29,-127,127,127,91,69,-59,127,-35,67,127,62,0,-124, -56,55,-25,-49,-72,-120,7,-21,1,3,112,63,37,100,-51,122,95,-112,-5,127,39,-91,-103,-31,25,-15,-20,16,-10,12,73,-48,-21,-34,-127,-82,17,-79,45,-127,-68,30,127,69,-23,-107,-12,127, 
  /* [0][2][][] */ -10,-14,5,-10,24,-40,25,5,34,26,127,51,1,-4,-33,109,86,-56,-42,1,-24,-2,-47,47,-12,-14,-34,-28,13,62,4,10,-33,34,-57,56,-36,-50,40,-37,85,-11,-12,8,-22,6,9,-35, -49,127,11,20,-99,-127,78,-70,75,19,69,-62,-55,32,-57,127,74,15,-1,111,-71,9,83,127,19,-127,127,2,22,-50,-36,-78,-7,-57,-72,-81,-63,-56,26,39,127,52,-46,26,-30,-54,-89,-6, 41,-22,24,-1,-25,-40,10,13,46,21,78,39,21,3,-36,58,42,-47,-49,19,-25,-10,-59,44,15,-19,-27,-67,12,-5,-14,15,-23,-2,-21,55,-35,-27,58,5,52,1,34,3,-18,-54,19,25, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0047617685049772263, 0.0040534012950956821, 0.042572960257530212, 0.010490722954273224, 0.0074399588629603386, 0.006093241274356842, 0.0060655362904071808, 0.018902914598584175, 0.0051003615371882915, 0.018265770748257637, 0.0093973558396100998, 0.0049274880439043045, 0.0084797460585832596, 0.0043075243011116982, 0.0062153981998562813, 0.0043642036616802216, 0.0041597546078264713, 0.002862787339836359, 0.018798239529132843, 0.00314114592038095, 0.0046051754616200924, 0.015382290817797184, 0.0083096390590071678, 0.0083217481151223183, 0.012919934466481209, 0.01185428723692894, 0.01041581854224205, 0.012683574110269547, 0.011799655854701996, 0.0084206117317080498, 0.006399442907422781, 0.0056157647632062435, 0.0042680581100285053, 0.0091900359839200974, 0.0076985722407698631, 0.0047059631906449795, 0.030416565015912056, 0.0075752316042780876, 0.0066153104417026043, 0.02078617550432682, 0.0081976968795061111, 0.0073370109312236309, 0.0092161567881703377, 0.0075733386911451817, 0.0088670607656240463, 0.0033408186864107847, 0.0061502330936491489, 0.0094518279656767845, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[48] = { 11487, -16527, -1158, 2889, 374, 12643, 2702, -1926, -8535, 2002, -3330, -4193, -6108, -13012, 6314, 182, -8456, 28304, -3221, -12454, 15121, 1368, -849, -1747, 67, 309, -4406, 1818, -396, 1878, 133, 18371, 18860, -617, 4736, 18998, -754, 15374, 1362, -947, -3089, -7674, 796, 2877, 2950, 24454, 12760, -4666, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 9.8685886769089848e-05, 8.4005245298612863e-05, 0.0008823088719509542, 0.0002174163528252393, 0.00015419039118569344, 0.0001262801670236513, 0.00012570599210448563, 0.00039175592246465385, 0.0001057031040545553, 0.00037855133996345103, 0.00019475672161206603, 0.00010212036431767046, 0.0001757395948516205, 8.9271845354232937e-05, 0.0001288118219235912, 9.0446505055297166e-05, 8.6209372966550291e-05, 5.9330206568120047e-05, 0.00038958655204623938, 6.5099084167741239e-05, 9.5440555014647543e-05, 0.00031879229936748743, 0.00017221418966073543, 0.00017246515199076384, 0.00026776085724122822, 0.00024567570653744042, 0.00021586398361250758, 0.00026286239153705537, 0.00024454350932501256, 0.0001745140616549179, 0.00013262608263175935, 0.00011638464638963342, 8.8453925854992121e-05, 0.00019046009401790798, 0.00015955006529111415, 9.7529344202484936e-05, 0.0006303720292635262, 0.00015699387586209923, 0.00013709986524190754, 0.00043078578892163932, 0.00016989423602353781, 0.00015205683303065598, 0.00019100143981631845, 0.00015695464389864355, 0.00018376654770690948, 6.9237234129104763e-05, 0.00012746130232699215, 0.00019588563009165227, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[8*1*1*48] = { 
  /* [0][0][][] */ 52,55,-84,56,10,27,-97,-36,5,-21,-7,-41,-21,-4,43,1,48,-14,45,-28,21,-39,48,-3,11,-30,-17,15,-18,2,-25,-4,53,22,17,12,127,58,34,-28,2,-22,-4,-27,83,27,18,-53, 
  /* [1][0][][] */ 69,30,12,0,26,87,-14,-26,31,66,-44,-77,110,-22,14,47,19,40,24,-90,127,-27,46,58,49,24,40,18,28,-62,54,75,64,109,7,114,64,26,24,29,83,13,34,26,25,45,111,-72, 
  /* [2][0][][] */ -14,17,85,127,-52,23,-5,49,31,66,12,-65,-38,104,25,39,-74,-90,69,0,-6,53,-47,-83,-30,-40,27,-11,-105,26,-6,-13,-30,-34,-88,-43,11,21,-78,-24,-30,-62,-36,17,60,-73,-28,22, 
  /* [3][0][][] */ -21,55,-75,-6,14,-74,7,64,101,-77,-46,10,-10,-22,8,59,21,12,-19,-22,-8,16,-70,38,-25,-34,40,-14,60,-28,37,-54,38,-23,-33,-51,-127,-6,-77,15,-27,-62,35,-9,-56,12,-12,-37, 
  /* [4][0][][] */ 57,-18,29,-18,-64,74,23,65,-127,-57,51,39,69,-55,-70,-69,89,69,59,-28,13,-96,-15,38,-39,7,-44,-125,-61,-54,88,35,86,-4,112,87,66,63,53,31,15,40,-49,-28,87,67,95,-56, 
  /* [5][0][][] */ 29,72,18,91,31,23,-46,-94,-94,30,-8,5,29,66,40,-65,77,99,-29,37,-20,-64,-23,-73,-102,-74,-43,61,2,44,-24,44,-6,-86,70,9,-35,127,-38,-113,-10,-38,-12,-37,-11,-12,-37,97, 
  /* [6][0][][] */ 111,48,-7,127,-86,21,23,77,26,-91,79,96,92,-37,-24,-48,68,20,-71,26,80,-21,-34,2,12,74,-49,-41,18,-45,76,66,14,-40,3,102,109,-78,0,14,-87,85,-105,63,56,115,105,-50, 
  /* [7][0][][] */ 25,14,127,40,-39,65,-90,9,-34,99,-11,-11,47,59,15,-6,-52,-11,-57,4,-12,37,0,-47,-9,42,52,-13,0,-2,16,-14,-87,-16,67,34,93,-4,36,-11,-21,-31,-28,-46,4,-28,12,23, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant30_scale = { 8, { 0.0070588923990726471, 0.0030277268961071968, 0.0031564901582896709, 0.0028520454652607441, 0.0033918137196451426, 0.0032983813434839249, 0.0028801523149013519, 0.0034548768308013678, } };
const TfArray<8, int> quant30_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[8] = { -11331, -34358, 2503, 7480, -15681, 338, -28491, -1581, };
const TfArray<1, int> tensor_dimension31 = { 1, { 8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.0001660915877437219, 7.1240632678382099e-05, 7.4270355980843306e-05, 6.7106950154993683e-05, 7.9807381553109735e-05, 7.7608972787857056e-05, 6.7768291046377271e-05, 8.1291218521073461e-05, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -127,34,-16,-23,61,31,1,-45, 
  /* [1][0][][] */ 1,-51,-35,-17,-50,-127,9,14, 
  /* [2][0][][] */ -64,65,2,-53,-57,43,-70,127, 
  /* [3][0][][] */ 62,41,50,-17,-53,-127,38,-24, 
  /* [4][0][][] */ 14,51,-104,35,-127,86,34,34, 
  /* [5][0][][] */ -26,45,38,-41,-94,-127,-69,-7, 
  /* [6][0][][] */ -52,127,95,-31,-64,-36,22,-42, 
  /* [7][0][][] */ -13,2,37,68,7,-127,1,52, 
  /* [8][0][][] */ 127,27,-77,71,-77,-72,-116,-13, 
  /* [9][0][][] */ 105,-38,-65,-77,4,-26,-42,127, 
  /* [10][0][][] */ -103,-2,8,127,10,81,26,-105, 
  /* [11][0][][] */ 24,21,52,-15,11,112,127,91, 
  /* [12][0][][] */ -69,-100,-54,-102,127,-47,-18,43, 
  /* [13][0][][] */ -30,-9,-15,57,13,-127,51,75, 
  /* [14][0][][] */ 69,75,110,20,73,-127,-98,-38, 
  /* [15][0][][] */ -42,67,127,62,-14,15,36,-70, 
  /* [16][0][][] */ -88,-36,49,-70,127,5,-53,-5, 
  /* [17][0][][] */ 36,-42,-49,-2,-9,127,-18,40, 
  /* [18][0][][] */ -23,127,68,-50,-51,42,89,-89, 
  /* [19][0][][] */ 8,113,79,127,-18,25,46,25, 
  /* [20][0][][] */ 10,10,72,-127,-67,-1,69,-18, 
  /* [21][0][][] */ -92,83,34,-127,120,67,123,1, 
  /* [22][0][][] */ 78,-36,-84,65,46,-45,-60,127, 
  /* [23][0][][] */ 42,-77,-127,-44,66,-15,-64,97, 
  /* [24][0][][] */ 43,-21,-88,12,-57,41,-116,127, 
  /* [25][0][][] */ -18,-23,59,10,127,-13,-86,-41, 
  /* [26][0][][] */ 5,114,127,-28,-30,-25,65,-70, 
  /* [27][0][][] */ -45,44,118,-71,10,12,95,-127, 
  /* [28][0][][] */ 73,-17,84,127,72,-35,34,109, 
  /* [29][0][][] */ 71,65,93,21,-51,29,-127,80, 
  /* [30][0][][] */ 47,-6,-79,57,-127,-41,-39,50, 
  /* [31][0][][] */ 18,127,107,-58,-84,49,112,-121, 
  /* [32][0][][] */ 63,-13,-9,30,107,127,32,-40, 
  /* [33][0][][] */ 25,-33,-127,8,14,-21,-33,71, 
  /* [34][0][][] */ 22,-53,19,-127,-3,69,-9,11, 
  /* [35][0][][] */ -22,17,96,-10,11,-127,-5,-22, 
  /* [36][0][][] */ -10,16,-35,-127,-13,11,18,-42, 
  /* [37][0][][] */ 58,-10,-19,-90,-79,127,-54,-77, 
  /* [38][0][][] */ 75,-56,-25,94,63,33,-23,127, 
  /* [39][0][][] */ 127,81,29,73,-15,88,-45,-2, 
  /* [40][0][][] */ 41,-112,-127,-28,21,10,-68,106, 
  /* [41][0][][] */ -5,-58,-127,-102,-5,-80,-43,-23, 
  /* [42][0][][] */ 69,113,77,127,-78,-33,25,49, 
  /* [43][0][][] */ 127,-28,-102,-112,-74,-46,38,64, 
  /* [44][0][][] */ 3,78,117,-87,-102,-6,75,-127, 
  /* [45][0][][] */ 43,24,-127,56,-44,28,15,66, 
  /* [46][0][][] */ 46,-42,-73,-127,24,-33,-36,53, 
  /* [47][0][][] */ 85,-127,126,-70,80,-21,13,12, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.00040833977982401848, 0.0023288133088499308, 0.0030402750708162785, 0.0033217512536793947, 0.003141364548355341, 0.0031676569487899542, 0.0021008553449064493, 0.0027458579279482365, 0.0019904773216694593, 0.0018057168927043676, 0.0010770430089905858, 0.0026389213744550943, 0.0015305200358852744, 0.0029310847166925669, 0.0025761134456843138, 0.0028721850831061602, 0.0019013179698958993, 0.0036554094403982162, 0.001357892993837595, 0.0030523182358592749, 0.0023143873549997807, 0.0021718177013099194, 0.0026234826073050499, 0.0019449468236416578, 0.0030507703777402639, 0.0032382975332438946, 0.0030782937537878752, 0.0011683430057018995, 0.0038073940668255091, 0.0021561929024755955, 0.0031093070283532143, 0.0012472931994125247, 0.0032145376317203045, 0.0026255340781062841, 0.0023997197858989239, 0.0042334869503974915, 0.0037527512758970261, 0.002529701916500926, 0.0035783944185823202, 0.0031001446768641472, 0.0011184534523636103, 0.0034366685431450605, 0.0012526101199910045, 0.0023832551669329405, 0.0025622490793466568, 0.0029048656579107046, 0.0022997478954493999, 0.0024315542541444302, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[48] = { 48117, 6024, 1670, 1271, 4046, 2719, 6800, 4179, 4117, -7259, 16781, 1510, 9266, 2263, 4658, 2382, 6999, -899, 12070, 74, 5070, -790, 3751, 6284, 2198, -3396, 2419, 14348, 881, 6067, 1784, 13149, 696, 5257, -706, -1606, 2490, 2479, 146, 2032, 14923, -949, 12091, 3185, 1674, 4528, 4622, -2523, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 2.3212123778648674e-05, 0.0001323816686635837, 0.00017282480257563293, 0.00018882534641306847, 0.0001785712520359084, 0.00018006583559326828, 0.00011942337732762098, 0.00015608863031957299, 0.00011314892617519945, 0.0001026461977744475, 6.1224636738188565e-05, 0.00015000980056356639, 8.7002597865648568e-05, 0.00016661787230987102, 0.00014643947361037135, 0.00016326970944646746, 0.00010808064689626917, 0.0002077921963064, 7.7189593866933137e-05, 0.00017350939742755145, 0.00013156162458471954, 0.00012345724098850042, 0.00014913218910805881, 0.00011056073708459735, 0.00017342141654808074, 0.00018408142204862088, 0.00017498598026577383, 6.6414599132258445e-05, 0.000216431770240888, 0.00012256905029062182, 0.00017674893024377525, 7.0902533479966223e-05, 0.00018273078603670001, 0.00014924880815669894, 0.00013641236000694335, 0.00024065308389253914, 0.00021332560572773218, 0.00014380121137946844, 0.00020341426716186106, 0.00017622810264583677, 6.3578620029147714e-05, 0.00019535784667823464, 7.1204776759259403e-05, 0.00013547642447520047, 0.00014565135643351823, 0.00016512743604835123, 0.00013072944420855492, 0.00013822199252899736, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*48] = { 
  /* [0][0][][] */ 80,80,-17,57,2,3,-55,16,41,-61,35,15,7,-120,-30,42,107,39,-72,10,80,21,-21,-20,67,29,22,-5,-51,29,-11,-52,127,14,108,27,-36,15,127,33,-75,75,-103,-49,30,-89,-38,3, 104,127,-83,93,13,58,-66,-127,54,31,127,43,-24,-21,-22,-6,-59,127,-81,35,63,127,44,-27,23,5,11,127,-127,106,-19,-127,-2,-29,24,83,-72,127,104,35,-127,-72,83,-1,8,38,-127,89, 55,51,-4,39,4,-1,-39,27,32,-74,34,13,2,-81,-29,-20,94,-13,-35,-2,72,28,-24,39,49,61,13,-8,-4,3,-18,-32,102,15,90,19,-16,24,108,5,-43,74,62,72,34,109,10,-18, 
  /* [0][1][][] */ -25,-48,-127,91,22,52,62,-32,36,46,-44,127,127,-14,-23,-77,-32,76,71,-8,-109,17,22,-100,23,62,17,10,-9,121,30,50,56,127,34,33,-90,-10,-54,86,80,2,92,-127,13,-104,-13,127, 39,-99,-51,-127,127,10,127,-87,-127,127,5,78,-110,127,127,-22,-127,74,18,127,32,2,127,-5,-127,127,37,-79,-101,60,-127,93,76,-97,36,122,127,54,-26,127,120,-70,-22,3,108,-68,-5,45, -18,-42,-117,57,-18,127,46,-23,35,31,-36,76,-18,-5,-35,-22,-68,85,127,-35,-127,27,-71,127,4,21,19,26,58,111,41,38,-3,-2,-34,-127,-52,-36,0,36,45,68,-12,124,-7,127,-36,84, 
  /* [0][2][][] */ -32,-20,0,14,-10,10,-15,6,31,-12,4,15,25,-89,-35,33,92,13,11,7,-58,12,-4,-3,22,-2,-10,-5,-1,13,50,8,21,13,127,-1,-14,71,72,51,17,73,127,-33,-54,-126,-12,-10, -127,-4,-76,33,-127,-4,-58,-10,26,114,-76,70,-23,-38,-18,127,-84,50,-88,-26,-70,25,9,-30,-19,54,-127,-29,-60,127,70,16,27,-23,28,23,-27,62,-60,62,-59,-127,-122,-31,-127,80,-114,103, -27,-20,7,17,9,2,-14,2,23,-40,-8,-7,-8,-82,-31,5,98,-28,95,18,-67,-7,6,34,21,-17,-12,-15,11,14,48,10,27,13,81,32,-5,67,108,19,20,73,-57,49,-28,117,-15,-41, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.012905462644994259, 0.0086049819365143776, 0.0048770071007311344, 0.0056243599392473698, 0.0099477814510464668, 0.0064676208421587944, 0.013744779862463474, 0.0065458822064101696, 0.0079994844272732735, 0.019944649189710617, 0.016082093119621277, 0.0031240384560078382, 0.012985478155314922, 0.0040333932265639305, 0.0077299135737121105, 0.0096366507932543755, 0.0061871795915067196, 0.0066609266214072704, 0.0071313786320388317, 0.012244262732565403, 0.0045114257372915745, 0.0083296652883291245, 0.010647794231772423, 0.0095659103244543076, 0.0084145199507474899, 0.016401614993810654, 0.011554474011063576, 0.020157625898718834, 0.0056731682270765305, 0.0042780800722539425, 0.010166932828724384, 0.010505193844437599, 0.0046681081876158714, 0.015847435221076012, 0.0043754628859460354, 0.007658710703253746, 0.0068711019121110439, 0.004362048115581274, 0.0042340792715549469, 0.0043277433142066002, 0.01140036154538393, 0.0055067259818315506, 0.011062203906476498, 0.0085015678778290749, 0.0078315688297152519, 0.0041343690827488899, 0.0061827893368899822, 0.0079231103882193565, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[48] = { -2758, -1005, 11686, 1279, -759, -6896, -1103, 13711, 6182, -3783, -5226, -7016, -372, 19004, 10571, -323, 6385, -6045, 3260, -2644, 16607, -4239, -1644, -1317, 4427, -4421, 261, -1736, 8155, -31521, -4230, 295, -3883, -2444, -1018, -1846, 11215, -5701, -150, -15854, -1585, 7527, -6298, -1064, 3016, -6727, 10834, -3720, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00023460487136617303, 0.00015642760263290256, 8.8657776359468699e-05, 0.00010224369907518849, 0.00018083798931911588, 0.00011757310130633414, 0.00024986258358694613, 0.00011899579840246588, 0.00014542043209075928, 0.00036256830208003521, 0.00029235196416266263, 5.6791039241943508e-05, 0.00023605943715665489, 7.3321949457749724e-05, 0.00014051997277420014, 0.00017518202366773039, 0.00011247504153288901, 0.00012108715600334108, 0.00012963937479071319, 0.00022258509125094861, 8.2011967606376857e-05, 0.00015142270422074944, 0.00019356333359610289, 0.00017389605636708438, 0.00015296525089070201, 0.00029816044843755662, 0.00021004561858717352, 0.00036643995554186404, 0.00010313096572645009, 7.7770040661562234e-05, 0.0001848218817031011, 0.00019097104086540639, 8.4860257629770786e-05, 0.00028808618662878871, 7.9540339356753975e-05, 0.00013922559446655214, 0.00012490787776187062, 7.9296478361357003e-05, 7.6970165537204593e-05, 7.8672856034245342e-05, 0.00020724404021166265, 0.00010010525875259191, 0.00020109677279833704, 0.00015454766980838031, 0.00014236793504096568, 7.515756442444399e-05, 0.00011239523155381903, 0.00014403204841073602, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[8*1*1*48] = { 
  /* [0][0][][] */ 127,-20,19,-28,28,59,7,37,115,-89,53,6,-47,64,15,-51,18,-32,-20,-21,7,-59,11,-30,-60,-41,-37,-44,-31,86,-33,34,23,-46,11,-35,58,-62,-63,13,22,-25,-80,1,57,-30,53,-43, 
  /* [1][0][][] */ 49,0,-8,58,52,57,18,31,65,-78,-1,6,42,23,-36,-12,-34,-43,-69,-4,6,-47,49,76,-3,-66,-4,41,-25,55,-56,127,-24,44,-21,-22,-58,-15,-9,-21,-47,-17,-36,43,21,-4,8,-84, 
  /* [2][0][][] */ -39,-23,-82,35,-74,-25,-16,51,-98,-84,-89,-35,-41,44,-127,-9,72,-79,35,-25,111,81,-19,-7,41,84,19,-99,-45,13,50,-4,-32,32,64,-70,59,-2,69,98,-47,92,36,-3,-80,64,-44,67, 
  /* [3][0][][] */ -6,-17,-14,37,-20,7,-8,41,74,83,-127,-30,19,-22,-25,71,-52,-19,-2,44,-25,1,73,13,4,7,-45,48,-33,30,-43,-26,10,22,29,14,46,-5,36,7,-61,79,62,20,29,-14,-34,-42, 
  /* [4][0][][] */ -31,-72,15,-45,4,97,-61,-68,5,-52,71,34,-64,-27,-21,23,66,12,-24,41,-78,-29,122,-23,-99,-21,-5,9,21,-17,-17,61,-57,42,-28,52,-36,40,-10,25,-42,36,-40,41,127,52,-16,2, 
  /* [5][0][][] */ -65,-67,58,-127,-23,18,-34,-56,-8,72,-51,72,-77,22,52,13,73,55,68,17,29,1,-19,-62,46,-70,0,-45,-13,-41,39,-74,-5,-39,57,-3,-18,29,41,58,94,15,20,-27,-14,-8,-27,33, 
  /* [6][0][][] */ -58,-67,42,25,-61,-65,5,-65,-102,21,-119,44,23,-41,56,21,-32,24,12,127,-15,0,76,54,-71,-14,54,25,15,-40,-25,-62,-30,63,71,-86,-39,73,63,-33,-63,64,84,-61,-5,-41,-32,10, 
  /* [7][0][][] */ 19,-3,13,-17,9,22,-40,-40,-127,-32,93,29,10,-22,31,6,17,43,1,-16,-43,15,-15,-43,38,0,-37,15,-9,-23,-29,-47,-95,-50,-30,8,53,-28,-26,1,52,3,44,-22,19,-41,40,16, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant36_scale = { 8, { 0.0085302786901593208, 0.008019372820854187, 0.0034314799122512341, 0.0050868680700659752, 0.0048295599408447742, 0.0062928041443228722, 0.0043603233061730862, 0.0057615279220044613, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[8] = { -8522, -3485, 1719, -9288, 2963, -2888, 8537, 9424, };
const TfArray<1, int> tensor_dimension37 = { 1, { 8 } };
const TfArray<8, float> quant37_scale = { 8, { 0.00020071244216524065, 0.00018869113409891725, 8.0740705016069114e-05, 0.00011969101615250111, 0.00011363670637365431, 0.0001480659848311916, 0.00010259584087179974, 0.00013556536578107625, } };
const TfArray<8, int> quant37_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -14,13,127,-17,-3,54,-2,-87, 
  /* [1][0][][] */ 91,-55,68,-69,-20,-72,127,18, 
  /* [2][0][][] */ 55,57,70,-74,-62,23,127,-27, 
  /* [3][0][][] */ 2,26,7,-21,19,-63,127,9, 
  /* [4][0][][] */ 127,-39,-47,-31,-98,-56,-30,69, 
  /* [5][0][][] */ 33,72,127,-2,19,-39,23,-38, 
  /* [6][0][][] */ 105,113,-23,127,-76,21,27,95, 
  /* [7][0][][] */ -22,-1,5,39,28,-112,-127,-36, 
  /* [8][0][][] */ 115,62,-38,77,-63,30,-127,-51, 
  /* [9][0][][] */ 127,-23,-43,50,4,-45,26,-90, 
  /* [10][0][][] */ 66,19,-12,9,-25,127,38,12, 
  /* [11][0][][] */ 127,-20,0,-116,91,-63,-62,73, 
  /* [12][0][][] */ -63,109,80,-38,13,68,-87,127, 
  /* [13][0][][] */ 127,2,-79,14,21,-73,22,-86, 
  /* [14][0][][] */ 108,32,-1,-17,-127,28,-71,-15, 
  /* [15][0][][] */ 27,6,-106,-41,-127,-50,106,116, 
  /* [16][0][][] */ -2,-50,109,2,127,-50,-67,-34, 
  /* [17][0][][] */ 28,-15,93,-9,127,-56,-76,-3, 
  /* [18][0][][] */ 119,-38,127,55,-36,27,-40,-3, 
  /* [19][0][][] */ 84,48,68,-71,-49,-127,14,-44, 
  /* [20][0][][] */ 53,-37,64,127,7,-60,-85,80, 
  /* [21][0][][] */ 90,-14,-65,-127,49,-58,6,105, 
  /* [22][0][][] */ -62,-127,-71,-59,66,-49,127,-72, 
  /* [23][0][][] */ -17,18,28,-46,-106,-127,9,-28, 
  /* [24][0][][] */ 127,12,64,53,-13,-30,-96,74, 
  /* [25][0][][] */ 83,49,-25,-78,-16,-8,-19,127, 
  /* [26][0][][] */ -89,-29,25,-127,109,-3,-48,-89, 
  /* [27][0][][] */ 112,127,-13,-59,14,67,31,10, 
  /* [28][0][][] */ 35,127,6,15,-6,-43,-19,111, 
  /* [29][0][][] */ 119,19,107,108,43,-27,-127,51, 
  /* [30][0][][] */ 127,-99,-66,105,45,6,-77,84, 
  /* [31][0][][] */ 95,-86,18,50,-83,-118,-127,62, 
  /* [32][0][][] */ -103,-72,28,-127,89,-27,-48,-105, 
  /* [33][0][][] */ 28,-3,27,24,26,-69,127,44, 
  /* [34][0][][] */ -73,72,98,-93,127,-77,-71,103, 
  /* [35][0][][] */ -71,15,14,107,5,127,38,-22, 
  /* [36][0][][] */ 95,35,-32,-127,44,-11,23,47, 
  /* [37][0][][] */ 36,37,-15,2,-65,127,62,45, 
  /* [38][0][][] */ -23,-66,20,108,16,51,4,127, 
  /* [39][0][][] */ 11,0,-127,40,-3,-39,-29,66, 
  /* [40][0][][] */ 72,20,-87,8,-51,52,-61,127, 
  /* [41][0][][] */ 44,-1,24,-49,-116,-127,-19,-3, 
  /* [42][0][][] */ -76,64,-82,112,-16,89,-34,-127, 
  /* [43][0][][] */ -17,0,-34,-127,-16,4,-10,-75, 
  /* [44][0][][] */ 78,33,33,78,19,127,-58,33, 
  /* [45][0][][] */ 7,81,-22,22,127,-33,-80,-11, 
  /* [46][0][][] */ 56,-90,-5,127,91,37,-47,96, 
  /* [47][0][][] */ -10,-96,55,-15,127,24,44,32, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0028877253644168377, 0.0030545818153768778, 0.0023005038965493441, 0.003421346889808774, 0.0020282566547393799, 0.003134612925350666, 0.0020254072733223438, 0.0017513510538265109, 0.0018996903672814369, 0.0023531278129667044, 0.0032449921127408743, 0.001097535016015172, 0.0021784543059766293, 0.0020227399654686451, 0.0016257776878774166, 0.0018748705042526126, 0.0028929584659636021, 0.0015818059910088778, 0.0028058602474629879, 0.0021537162829190493, 0.0020827772095799446, 0.00055536534637212753, 0.0007672131760045886, 0.0031895602587610483, 0.0026656582485884428, 0.0020120397675782442, 0.002724155317991972, 0.002649510744959116, 0.0030184057541191578, 0.0022546960972249508, 0.0017348203109577298, 0.0010919440537691116, 0.0024822717532515526, 0.0038481093943119049, 0.0012689548311755061, 0.0022175260819494724, 0.0013419508468359709, 0.0027926715556532145, 0.003328618360683322, 0.003290246007964015, 0.0019535694736987352, 0.0029825631063431501, 0.00097678229212760925, 0.0036233796272426844, 0.0036292215809226036, 0.0025641859974712133, 0.0025560315698385239, 0.0017705973004922271, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[48] = { 1479, -1353, 3971, 1967, 3204, 171, 1967, 5502, -2848, -1893, -1247, 8963, 3654, 3817, 6619, -3728, -2572, 7880, 2848, 4580, 4866, 24543, 15818, 832, -1811, 1600, -426, -1110, 1872, 2374, 4924, 10025, -964, 239, 8924, 3336, 8043, 2521, 1341, -1429, 3897, -1948, 11816, -426, 384, 2733, -2319, 5392, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00022950523998588324, 0.00024276635667774826, 0.00018283515237271786, 0.00027191542903892696, 0.00016119799693115056, 0.00024912692606449127, 0.00016097154002636671, 0.00013919061166234314, 0.00015098004951141775, 0.00018701750377658755, 0.0002578994317445904, 8.7227839685510844e-05, 0.00017313512216787785, 0.00016075954772531986, 0.00012921052984893322, 0.00014900746464263648, 0.00022992114827502519, 0.00012571582919918001, 0.0002229989186162129, 0.00017116904200520366, 0.00016553107707295567, 4.4138290832052007e-05, 6.0975136875640601e-05, 0.00025349392672069371, 0.00021185621153563261, 0.0001599091337993741, 0.00021650533017236739, 0.00021057286357972771, 0.000239891218370758, 0.00017919452511705458, 0.00013787680654786527, 8.6783489678055048e-05, 0.00019728136248886585, 0.00030583285843022168, 0.00010085162648465484, 0.00017624039901420474, 0.0001066530603566207, 0.00022195072961039841, 0.00026454572798684239, 0.00026149602490477264, 0.00015526215429417789, 0.00023704257910139859, 7.7630880696233362e-05, 0.00028797218692488968, 0.00028843650943599641, 0.00020379158377181739, 0.00020314349967520684, 0.0001407202216796577, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*48] = { 
  /* [0][0][][] */ 33,72,43,-79,-59,25,11,82,1,-21,-107,-76,-92,127,-42,66,41,103,38,16,-25,-90,-31,34,119,-88,-9,126,71,-67,86,14,-88,92,38,-57,-14,25,-86,-15,-86,-31,118,-70,87,-7,-68,112, 
  /* [1][0][][] */ 80,8,85,44,38,-66,11,127,44,73,-76,76,-110,-100,35,-89,-60,-29,21,-22,112,95,-84,-70,58,1,-46,-58,100,55,-16,-59,-101,-87,-89,-75,45,-61,-44,15,14,121,-3,27,52,8,-33,43, 
  /* [2][0][][] */ 16,-21,-75,-89,-37,29,79,21,30,-28,-55,-35,59,94,-59,-108,-46,56,-35,45,-69,-36,47,37,-76,67,-23,-46,-11,-14,-63,44,65,-25,67,23,-65,26,-45,82,62,-25,127,84,-50,9,79,52, 
  /* [3][0][][] */ -88,100,61,-90,104,105,76,73,102,15,43,-70,107,40,109,122,-127,72,-65,104,-82,77,-88,2,103,77,-102,14,52,31,-53,111,-104,28,25,-102,-103,-45,-91,-63,-100,-50,-72,27,-87,-117,-40,-39, 
  /* [4][0][][] */ -82,41,95,-5,75,17,-18,-39,31,73,-92,-49,-63,104,39,-92,65,48,-27,-68,-85,86,-110,-22,-19,-108,98,50,18,-105,127,41,-98,49,-51,-50,105,-6,-110,-98,117,106,-95,-95,-5,92,-38,-34, 
  /* [5][0][][] */ -92,115,-41,-55,36,-19,-40,68,-7,-81,58,45,-77,40,117,105,-116,127,110,-2,118,14,-49,114,-102,56,-46,-54,-21,45,73,5,-82,70,73,62,113,-57,-60,-42,87,3,-10,-61,116,124,15,-6, 
  /* [6][0][][] */ 120,-8,10,-97,-105,-25,63,-99,33,86,40,127,61,-68,-20,126,-73,104,45,99,-110,120,97,35,-57,53,-96,-100,-43,-91,10,57,-76,18,79,86,-108,-47,14,62,-87,50,85,10,-102,89,-95,-22, 
  /* [7][0][][] */ 79,51,-60,-127,112,-29,-37,-70,20,-93,-10,-35,-53,115,104,78,79,-6,-51,55,75,-105,-15,-67,106,-74,68,114,-104,-39,-18,10,-124,-49,71,-41,123,-5,0,-85,-116,32,-70,90,7,-75,-92,-60, 
  /* [8][0][][] */ -69,-61,-127,-25,54,-8,-32,-113,88,-119,110,-110,-38,-112,-127,-18,15,68,78,-78,89,48,82,-71,-73,-107,2,-101,-85,-90,-114,-16,-57,-22,-105,99,-127,-115,-66,-84,-29,23,27,-37,-16,-68,-31,81, 
  /* [9][0][][] */ -37,-38,22,80,27,61,85,33,7,44,73,60,110,55,-36,-24,17,-65,-77,-88,-98,85,22,-27,-93,-69,-31,53,65,-127,-36,51,-83,-66,119,-30,-33,-5,-75,-68,108,91,0,9,39,60,32,-20, 
  /* [10][0][][] */ -81,56,-69,-71,-34,85,-114,-76,65,-99,97,77,6,40,72,11,127,29,-74,42,5,-42,-19,86,30,108,-10,-21,-92,-63,0,-88,75,50,119,-81,120,-66,68,123,88,30,45,68,-14,45,8,17, 
  /* [11][0][][] */ 93,65,-61,-82,103,3,-32,-82,-76,61,46,-2,32,-65,63,-94,-112,84,-8,-42,-34,-34,74,-72,-81,107,55,98,17,58,10,51,40,91,-112,-69,20,127,-51,-74,61,-95,117,-118,100,38,-93,-19, 
  /* [12][0][][] */ -83,-26,-90,127,11,-56,-67,-86,-33,-8,-32,50,-76,-105,-55,79,69,-41,27,125,-108,-34,74,51,-7,111,-60,15,110,-101,91,84,64,-37,3,-85,11,-97,90,77,97,93,53,-71,42,-9,-55,108, 
  /* [13][0][][] */ 65,27,92,-76,116,38,50,-55,40,-98,28,37,-6,100,50,52,75,61,15,98,127,-11,-10,-73,112,-77,-32,-68,42,-90,-46,-3,-48,-117,32,-5,77,-108,77,29,-8,-58,78,63,74,-7,72,60, 
  /* [14][0][][] */ -37,-55,97,61,64,-78,25,-6,4,77,-25,-62,7,118,-20,41,-95,-21,-11,-92,0,46,-46,-34,-30,-15,83,31,82,-74,86,-36,-25,99,125,31,36,81,-85,-90,114,127,123,29,90,-66,2,-41, 
  /* [15][0][][] */ 23,57,-3,-76,-93,86,5,46,-124,-54,108,-44,-18,-65,-47,-37,-40,84,-104,13,-35,-93,-64,-31,-8,-8,93,105,-24,-88,-127,24,52,92,-50,-33,-33,107,-45,-114,-62,116,102,-64,80,38,-93,-102, 
  /* [16][0][][] */ -10,20,-107,119,83,-72,98,106,-48,37,86,-76,-56,84,-127,-31,53,79,-66,-33,-124,-27,-109,12,100,-74,-61,18,-57,94,108,31,-59,-50,17,11,-19,91,-123,63,43,27,78,-57,-106,-17,-111,-64, 
  /* [17][0][][] */ -12,98,-105,-39,-19,46,-35,111,41,-23,104,-11,-29,112,43,-73,24,88,-17,79,27,-9,-56,-12,-93,19,-51,-69,-32,56,76,-95,53,-42,-26,47,46,-47,-22,43,-32,127,-23,-94,123,28,-74,-94, 
  /* [18][0][][] */ 73,-120,-118,-28,57,8,-119,-105,-57,39,-89,-82,-6,87,20,22,17,81,-84,-47,-92,44,16,29,24,-21,33,-107,-30,-127,26,-119,-32,71,103,-69,25,-39,-69,-92,-103,16,105,-64,-29,30,92,-65, 
  /* [19][0][][] */ 76,68,-99,83,119,86,-54,14,109,-29,8,-37,77,88,126,-50,35,-92,-25,125,-84,-77,33,127,87,-4,20,-20,90,52,122,-110,61,-23,-86,90,-103,-19,-65,19,76,48,56,46,-26,55,-100,108, 
  /* [20][0][][] */ -14,-94,-27,64,97,19,82,43,-67,-82,22,-5,-35,-98,-6,-93,-21,-66,108,38,56,-127,98,-32,-123,115,-77,17,-1,-89,-58,1,56,106,84,-69,107,15,-118,24,102,-126,-100,-21,41,12,-50,-51, 
  /* [21][0][][] */ 69,114,106,-87,-34,-54,-85,-51,-26,115,18,-99,-65,-76,-103,-104,-36,-27,-83,-111,-36,55,110,-58,104,33,73,-18,-60,-107,109,3,-110,35,98,102,-121,-96,-126,27,3,56,-50,7,-82,101,-127,68, 
  /* [22][0][][] */ -4,-58,72,-11,-89,-82,98,75,30,-26,11,29,-38,40,-25,-93,-61,14,-80,79,62,120,6,87,-113,21,-24,47,-30,-66,-51,-62,-40,127,52,72,35,-81,-26,-49,-27,-12,-53,11,80,-21,124,-31, 
  /* [23][0][][] */ -34,1,16,-38,-87,18,72,19,33,-92,60,-102,-110,96,76,-53,32,50,63,32,60,108,66,-1,68,-48,-92,-58,-95,90,2,125,64,-67,113,-19,2,118,81,-85,127,55,108,-110,-90,4,-91,109, 
  /* [24][0][][] */ 3,92,120,105,74,-12,-96,114,10,-85,-78,97,30,10,2,-64,-22,49,-49,94,127,-17,-18,40,-10,73,-79,-48,98,126,108,-17,104,-44,-6,-18,24,-37,-79,-86,14,119,-73,43,-33,83,61,-61, 
  /* [25][0][][] */ -23,-9,-13,87,-6,19,-106,47,-37,57,63,51,-104,76,88,-104,-37,-18,-107,3,67,108,-32,101,22,-95,-39,-75,69,66,-111,66,-71,-68,100,127,-126,58,-108,121,-114,103,72,13,-20,-94,-126,-115, 
  /* [26][0][][] */ 79,-83,-6,-6,86,-112,105,-45,43,-40,-95,1,-46,-76,36,-22,120,8,-89,-86,47,-59,73,96,-13,-39,63,48,21,-11,-56,-47,-16,56,46,122,-3,96,-127,114,100,3,-34,-104,-11,54,125,14, 
  /* [27][0][][] */ 59,44,-123,123,-34,-32,4,-5,-99,94,-33,-10,-122,78,83,-52,40,-122,-15,-120,-29,57,88,-100,-115,78,-43,60,97,-67,67,-127,117,-93,38,110,116,59,-82,-45,35,57,-30,66,71,-95,115,-76, 
  /* [28][0][][] */ -112,121,-42,82,21,107,-101,0,71,-57,-102,89,73,-69,31,-111,-73,85,50,105,111,84,14,-84,88,-62,62,127,-46,32,-14,48,-45,19,-32,-55,46,108,-37,122,-90,-18,0,60,124,120,-7,6, 
  /* [29][0][][] */ 30,-16,47,16,-13,18,37,-103,-36,-11,-45,-72,78,-6,-66,-36,90,104,-55,113,41,-57,-80,-85,108,-47,-110,-25,-34,102,-48,39,-112,114,116,0,-14,-83,30,-31,127,-35,-12,21,-64,71,-102,8, 
  /* [30][0][][] */ -71,-95,-83,-55,73,103,62,11,-67,48,30,69,101,65,-99,-127,95,120,90,15,-5,-73,126,-71,31,65,-39,22,90,-37,16,52,-10,-33,29,32,-82,-31,85,-23,-4,-84,-67,-97,92,125,-33,-32, 
  /* [31][0][][] */ 39,127,73,-41,-77,-13,99,-93,-95,-65,65,-73,-89,-97,94,28,-7,48,-38,26,-30,-48,100,4,58,91,-29,-70,-27,79,55,67,95,38,58,109,47,115,-18,-87,-9,105,-103,44,21,103,43,-8, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0022960549686104059, 0.0022447446826845407, 0.0023386145476251841, 0.0021760265808552504, 0.0022471386473625898, 0.0022944195661693811, 0.0022044505458325148, 0.0021065601613372564, 0.0022555303294211626, 0.0021165588404983282, 0.0024321619421243668, 0.0022122284863144159, 0.0021481090225279331, 0.0022770995274186134, 0.0022526581306010485, 0.0023023432586342096, 0.0022234930656850338, 0.0022397704888135195, 0.0022969022393226624, 0.0021577212028205395, 0.0021619456820189953, 0.0021661566570401192, 0.0026519862003624439, 0.002209068275988102, 0.0023143109865486622, 0.0021441855933517218, 0.0021412486676126719, 0.0021504247561097145, 0.0022348144557327032, 0.0022880276665091515, 0.0022486939560621977, 0.0020903153344988823, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 477, 485, 710, -428, 496, 345, 530, -313, -715, -209, 710, 426, 133, 348, 414, -288, -298, 507, -391, 379, -384, -567, 1154, 343, 339, -110, -217, -112, 337, 479, 396, -374, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.5463799324352294e-05, 4.4447813706938177e-05, 4.6306515287142247e-05, 4.3087136873509735e-05, 4.4495216570794582e-05, 4.5431417674990371e-05, 4.3649957660818473e-05, 4.1711646190378815e-05, 4.4661377614829689e-05, 4.1909628635039553e-05, 4.8158832214539871e-05, 4.3803964217659086e-05, 4.2534345993772149e-05, 4.5088465412845835e-05, 4.4604505092138425e-05, 4.5588312787003815e-05, 4.4027012336300686e-05, 4.4349319068714976e-05, 4.5480577682610601e-05, 4.2724677769001573e-05, 4.2808325815713033e-05, 4.2891704651992768e-05, 5.2511535614030436e-05, 4.3741390982177109e-05, 4.5825283450540155e-05, 4.2456660594325513e-05, 4.2398507503094152e-05, 4.2580199078656733e-05, 4.4251188228372484e-05, 4.530485239229165e-05, 4.4526012061396614e-05, 4.138998338021338e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -59,-32,-25,-59,93,9,127,8,46,-77,-80,-41,85,-19,127,-9,-97,-8,93,18,90,-28,122,-42,-36,101,20,-91,-69,-85,21,23, 
  /* [1][0][][] */ 97,127,-102,-68,25,101,14,-50,61,-96,-110,60,-66,7,35,72,-83,99,89,76,-65,-10,-37,52,104,-4,-77,-88,64,90,115,-103, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0036396640352904797, 0.0035936848726123571, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 59007, -58890, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 7.9521247243974358e-05, 7.8516670328099281e-05, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.060250528156757355, } };
const TfArray<1, int> quant46_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.074007667601108551, } };
const TfArray<1, int> quant47_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.052116762846708298, } };
const TfArray<1, int> quant51_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.099019020795822144, } };
const TfArray<1, int> quant54_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10180669277906418, } };
const TfArray<1, int> quant55_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.050908003002405167, } };
const TfArray<1, int> quant59_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.020724629983305931, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.0442364402115345, } };
const TfArray<1, int> quant62_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.056845121085643768, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.018178725615143776, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.045926682651042938, } };
const TfArray<1, int> quant66_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.079476132988929749, } };
const TfArray<1, int> quant67_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.019800832495093346, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.021848512813448906, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.052548803389072418, } };
const TfArray<1, int> quant70_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,8,9 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,10,11 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,12,13 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,14,15 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,16,17 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,20,21 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,22,23 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,24,25 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,26,27 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,28,29 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,30,31 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,32,33 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,34,35 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,36,37 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,38,39 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,40,41 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,42,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
