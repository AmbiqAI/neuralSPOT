<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ns__free__tests_8c" kind="file" language="C++">
    <compoundname>ns_free_tests.c</compoundname>
    <includes refid="ns__malloc_8h" local="yes">ns_malloc.h</includes>
    <includes local="yes">unity/unity.h</includes>
    <includes local="yes">ns_core.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ns_malloc.h</label>
        <link refid="ns__malloc_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c</label>
        <link refid="ns__free__tests_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
      </node>
      <node id="4">
        <label>am_bsp.h</label>
      </node>
      <node id="5">
        <label>am_mcu_apollo.h</label>
      </node>
      <node id="6">
        <label>am_util.h</label>
      </node>
      <node id="11">
        <label>ns_core.h</label>
      </node>
      <node id="7">
        <label>portable.h</label>
      </node>
      <node id="8">
        <label>portmacro.h</label>
      </node>
      <node id="9">
        <label>rtos.h</label>
      </node>
      <node id="10">
        <label>unity/unity.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ns__free__tests_8c_1a9f213227674effff0122a75d94d87938" prot="public" static="no">
        <name>configTOTAL_HEAP_SIZE</name>
        <initializer>NS_MALLOC_HEAP_SIZE_IN_K * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="4" column="12" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ns__free__tests_8c_1a90e8cd581702224cd749165e4df0ab86" prot="public" static="no" mutable="no">
        <type>size_t const</type>
        <definition>size_t const ucHeapSize</definition>
        <argsstring></argsstring>
        <name>ucHeapSize</name>
        <initializer>= configTOTAL_HEAP_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="6" column="14" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ns__free__tests_8c_1a11208261e6ac23565e05907272f18bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t ucHeap[NS_MALLOC_HEAP_SIZE_IN_K *1024]</type>
        <definition>uint8_t ucHeap[NS_MALLOC_HEAP_SIZE_IN_K *1024] __attribute__</definition>
        <argsstring>((aligned(4)))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(aligned(4))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="5" column="16" declfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" declline="5" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a3278c1695b8d9e13478a886e078000e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_tests_pre_test_hook</definition>
        <argsstring>()</argsstring>
        <name>ns_free_tests_pre_test_hook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="7" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="7" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a0b93bcd7802dc8e5c8f1cedcce2eadd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_tests_post_test_hook</definition>
        <argsstring>()</argsstring>
        <name>ns_free_tests_post_test_hook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="10" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="10" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a9d4564b086cb3bf09b396bd828f9ae97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_test_basic</definition>
        <argsstring>()</argsstring>
        <name>ns_free_test_basic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="15" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="15" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a22e451b25d135280421517d70515edb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_test_null_pointer</definition>
        <argsstring>()</argsstring>
        <name>ns_free_test_null_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="31" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a0435cc3bac47e3d850ca141a2c77e1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_test_twice</definition>
        <argsstring>()</argsstring>
        <name>ns_free_test_twice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="39" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1a57f96cf9512e09975af41744ee3daa67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_test_non_malloced_pointer</definition>
        <argsstring>()</argsstring>
        <name>ns_free_test_non_malloced_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="48" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="ns__free__tests_8c_1af9693b828d4186643603edf9fbd1c10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ns_free_test_memory_fragmentation</definition>
        <argsstring>()</argsstring>
        <name>ns_free_test_memory_fragmentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" line="56" column="6" bodyfile="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c" bodystart="56" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ns_malloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;unity/unity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ns_core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>configTOTAL_HEAP_SIZE<sp/>NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">uint8_t<sp/>ucHeap[NS_MALLOC_HEAP_SIZE_IN_K<sp/>*<sp/>1024]<sp/>__attribute__<sp/>((aligned<sp/>(4)));</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ucHeapSize<sp/>=<sp/>configTOTAL_HEAP_SIZE;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_tests_pre_test_hook()<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pre<sp/>hook<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_tests_post_test_hook()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>post<sp/>hook<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_test_basic()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>an<sp/>array<sp/>of<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(5<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>succeeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(ptr<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>allocated<sp/>memory<sp/>with<sp/>some<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>i<sp/>*<sp/>10;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(ptr);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_test_null_pointer()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>should<sp/>happen<sp/>when<sp/>freeing<sp/>a<sp/>NULL<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(ptr);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(ptr<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_test_twice()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Freeing<sp/>a<sp/>pointer<sp/>twice<sp/>should<sp/>not<sp/>cause<sp/>any<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>ptr<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(ptr);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(ptr);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(ptr<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_test_non_malloced_pointer()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Freeing<sp/>a<sp/>pointer<sp/>that<sp/>was<sp/>not<sp/>allocated<sp/>with<sp/>malloc<sp/>should<sp/>not<sp/>cause<sp/>any<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>&amp;x;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(ptr);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(ptr<sp/>==<sp/>&amp;x);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ns_free_test_memory_fragmentation()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocs[1000];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>in<sp/>a<sp/>pattern<sp/>that<sp/>can<sp/>cause<sp/>fragmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocs[i]<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(10);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_ASSERT_NOT_NULL(allocs[i]);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>every<sp/>other<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>1000;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(allocs[i]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>large<sp/>block<sp/>after<sp/>inducing<sp/>fragmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*large_alloc<sp/>=<sp/><ref refid="group__ns-malloc_1ga45bcbf6ad4ad52cb96f6d024acaa0602" kindref="member">ns_malloc</ref>(1000);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(large_alloc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed<sp/>due<sp/>to<sp/>fragmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_FAIL_MESSAGE(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>a<sp/>large<sp/>block<sp/>due<sp/>to<sp/>memory<sp/>fragmentation.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(large_alloc);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>remaining<sp/>allocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ns-malloc_1ga8a1763f61176219155b7cd50652f383d" kindref="member">ns_free</ref>(allocs[i]);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="neuralSPOT/neuralspot/ns-utils/tests/ns_free_tests.c"/>
  </compounddef>
</doxygen>
